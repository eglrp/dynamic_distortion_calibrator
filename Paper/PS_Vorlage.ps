%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: PS_Vorlage.dvi
%%CreationDate: Fri May 13 15:01:45 2016
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: NimbusRomNo9L-Regu NimbusRomNo9L-MediItal
%%+ NimbusRomNo9L-Medi NimbusRomNo9L-ReguItal CMSY7 CMMI10 CMR10 CMR7
%%+ CMMI7
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o PS_Vorlage.ps PS_Vorlage.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.05.13:1501
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: psfrag.pro 0 0
%%
%% This is file `psfrag.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% psfrag.dtx  (with options: `filepro')
%% 
%% Copyright (c) 1996 Craig Barratt, Michael C. Grant, and David Carlisle.
%% All rights reserved.
%% 
%% This file is part of the PSfrag package.
%% 
userdict begin
/PSfragLib 90 dict def
/PSfragDict 6 dict def
/PSfrag { PSfragLib begin load exec end } bind def
end
PSfragLib begin
/RO /readonly      load def
/CP /currentpoint  load def
/CM /currentmatrix load def
/B { bind RO def } bind def
/X { exch def } B
/MD { { X } forall } B
/OE { end exec PSfragLib begin } B
/S false def
/tstr 8 string def
/islev2 { languagelevel } stopped { false } { 2 ge } ifelse def
[ /sM /tM /srcM /dstM /dM /idM /srcFM /dstFM ] { matrix def } forall
sM currentmatrix RO pop
dM defaultmatrix RO idM invertmatrix RO pop
srcFM identmatrix pop
/Hide { gsave { CP } stopped not newpath clip { moveto } if } B
/Unhide { { CP } stopped not grestore { moveto } if } B
/setrepl islev2 {{ /glob currentglobal def true setglobal array astore
                   globaldict exch /PSfrags exch put glob setglobal }}
                {{ array astore /PSfrags X }} ifelse B
/getrepl islev2 {{ globaldict /PSfrags get aload length }}
                {{ PSfrags aload length }} ifelse B
/convert {
   /src X src length string
   /c 0 def src length {
      dup c src c get dup 32 lt { pop 32 } if put /c c 1 add def
   } repeat
} B
/Begin {
    /saver save def
    srcFM exch 3 exch put
    0 ne /debugMode X 0 setrepl
    dup /S exch dict def { S 3 1 roll exch convert exch put } repeat
    srcM CM dup invertmatrix pop
    mark { currentdict { end } stopped { pop exit } if } loop
    PSfragDict counttomark { begin } repeat pop
} B
/End {
    mark { currentdict end dup PSfragDict eq { pop exit } if } loop
    counttomark { begin } repeat pop
    getrepl saver restore
    7 idiv dup /S exch dict def {
        6 array astore /mtrx X tstr cvs /K X
        S K [ S K known { S K get aload pop } if mtrx ] put
    } repeat
} B
/Place {
    tstr cvs /K X
    S K known {
        bind /proc X tM CM pop
        CP /cY X /cX X
        0 0 transform idtransform neg /aY X neg /aX X
        S K get dup length /maxiter X
        /iter 1 def {
            iter maxiter ne { /saver save def } if
            tM setmatrix aX aY translate
            [ exch aload pop idtransform ] concat
            cX neg cY neg translate cX cY moveto
            /proc load OE
            iter maxiter ne { saver restore /iter iter 1 add def } if
        } forall
        /noXY { CP /cY X /cX X } stopped def
        tM setmatrix noXY { newpath } { cX cY moveto } ifelse
    } {
        Hide OE Unhide
    } ifelse
} B
/normalize {
    2 index dup mul 2 index dup mul add sqrt div
    dup 4 -1 roll exch mul 3 1 roll mul
} B
/replace {
    aload pop MD
    CP /bY X /lX X gsave sM setmatrix
    str stringwidth abs exch abs add dup 0 eq
        { pop } { 360 exch div dup scale } ifelse
    lX neg bY neg translate newpath lX bY moveto
    str { /ch X ( ) dup 0 ch put false charpath ch Kproc } forall
    flattenpath pathbbox [ /uY /uX /lY /lX ] MD
    CP grestore moveto
    currentfont /FontMatrix get dstFM copy dup
    0 get 0 lt { uX lX /uX X /lX X } if
    3 get 0 lt { uY lY /uY X /lY X } if
    /cX uX lX add 0.5 mul def
    /cY uY lY add 0.5 mul def
    debugMode { gsave 0 setgray 1 setlinewidth
        lX lY moveto lX uY lineto uX uY lineto uX lY lineto closepath
        lX bY moveto uX bY lineto lX cY moveto uX cY lineto
        cX lY moveto cX uY lineto stroke
    grestore } if
    dstFM dup invertmatrix dstM CM srcM
    2 { dstM concatmatrix } repeat pop
    getrepl /temp X
        S str convert get {
            aload pop [ /rot /scl /loc /K ] MD
            /aX cX def /aY cY def
            loc {
                dup 66  eq { /aY bY def } { % B
                dup 98  eq { /aY lY def } { % b
                dup 108 eq { /aX lX def } { % l
                dup 114 eq { /aX uX def } { % r
                dup 116 eq { /aY uY def }   % t
                if } ifelse } ifelse } ifelse } ifelse pop
            } forall
            K srcFM rot tM rotate dstM
            2 { tM concatmatrix } repeat aload pop pop pop
            2 { scl normalize 4 2 roll } repeat
            aX aY transform
            /temp temp 7 add def
        } forall
    temp setrepl
} B
/Rif {
    S 3 index convert known { pop replace } { exch pop OE } ifelse
} B
/XA { bind [ /Kproc /str } B /XC { ] 2 array astore def } B
/xs   { pop } XA XC
/xks  { /kern load OE } XA /kern XC
/xas  { pop ax ay rmoveto } XA /ay /ax XC
/xws  { c eq { cx cy rmoveto } if } XA /c /cy /cx XC
/xaws { ax ay rmoveto c eq { cx cy rmoveto } if }
    XA /ay /ax /c /cy /cx XC
/raws { xaws { awidthshow } Rif } B
/rws  { xws { widthshow } Rif } B
/rks  { xks { kshow } Rif } B
/ras  { xas { ashow } Rif } B
/rs   { xs { show } Rif } B
/rrs { getrepl dup 2 add -1 roll //restore exec setrepl } B
PSfragDict begin
islev2 not { /restore { /rrs PSfrag } B } if
/show       { /rs   PSfrag } B
/kshow      { /rks  PSfrag } B
/ashow      { /ras  PSfrag } B
/widthshow  { /rws  PSfrag } B
/awidthshow { /raws PSfrag } B
end PSfragDict RO pop
end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BEB1E9C7CCD57DD67E
207AAADF134E872978462E0B1CFF469069A83A1138E2AEF49C94F5D0B8DBB44B
F54B6B866274AF69608C3DFDF5EC129AEBE733208FB8CC62857041D8DC978540
8DF04F04C9A15E09E3083D4AC83113CD862822CAA7A8676A83FA6E29AAC320E9
A17CA230A937AFAC4B4E72EE284C44A942EA98BEE5C6468EF4287AE21971F3BC
30A3B2233A129E3A28A5EE83BFACDF4042ADED530776401F5F9F4C12BCD0757C
0B641F39327DA3C2F9F5A1C8AC7FD8659CDB465259CE2D6128827F5B4BDC4B31
82A212C6085998F77D2FB0C26B73308DD94964822D8D80A2D2FA0FAD6A68B2A5
37FF94E1099CDDD85E0646C4DFE8752021C391F2D249EB99A0247FC4BFCD6F33
6551A6836C0430A946C0D864190CE11362E13E8DF3662840E32409951CADA934
F8896AA603797A0C5ED8C8CB4191E950DBCCD311A20B14B4177C73EE314A42BE
B6D948615230A58165C7A0F972EDA0D29FF4A19A399E957A057BFE70963315AF
DE3B85D180E8CB37E31FA6A8206F6A9A2A9E1CFFF120534D993E961D9D741703
E35DF0172349D6FE770FD2E543F078EF61B49981EADC4427DF95F15FD7D1720E
D8720E7F572991AA890A8B6CB720A8FF751E0626BAED7F0A807BD26DF0FBBEF3
46A224D073A11E3638F95D07C0C787F36A6CFD7131512ED31831DF0AE2867319
063C6E739524DA99E494D9E1FE8EB703797B611CDDF07B4F56C391CC4105490C
90F3EDF580FFF16F3C96BCD5DB5399B95E63CDA6BC96764BBA9D0857125F520F
071507980655EFDB97B56E09E4B66423E8DD38E27D05E801EB66B5A8914C6641
B700535EC869E27B1DDFBC69855614745975607ADFEFB7CBBF4E1D5C21595E51
CAE3C6021E2CD084A54EF56FC3B5C612CCDDF98B291417EB05CC806718B8ABF6
7DA2CF8E2B136368951F5F2C3D349CCB9EB818287E6AC2C9F736938A81B0319D
DB5AAD2757F1021AFB109F708BB748EC8298D6ADB51AFE9B73054AE10CBC9D3A
107876C1FFE913A38B14A5FA4F9D3A83088A74E5BE823D1BDDD631CC08AAE901
7FBACA70F738907BF643E378ED0C634370C33A37BB21183CEC6CDA338FC5417A
7B3249BDA1A40488A92FD019DA307E5CE28EE4ABC81450E7D360C1358FF130F4
91650F03E657368DB1F3366435E46AFEBE5B3216B772316E032FD0AC3F0B6746
1453096303C5A08917EA2CB4F3111D1B8690D82B4EA0FB07508634A07D3A4680
EEB30E117824B7D31B8E1310BAB81131045CE19C212576A81D143A0A1EC59D67
82BD87A382D26687CEF3B38144373B506584BF01AEA78FAF02C6BDC3A4CF68CA
37FE302DCA6DE2424EB54481EFC9428CBAE2AEF8AEB2F6A25B0567BC429D37D9
193ABF64AE6A4C0658257635E66862BDC6919001D4195A7212B001A5205AF33E
1C3440D35B387CB7D76D72F028611754F949B9E8E09F71A863F05EA4BFEEBDDD
90989AB35EE464B517E6A3A7379BD912296E6EE8DB98B99E3D4D08CBC96D165D
CFB28FF6501FA12D3E118713B68B91B9057A7ADC16BCF4FC9637A3099F1E6F70
BBC3709D404D12A87337B5AB6B751A266C4FA8480BF6BBE66C95BDDD7E73384F
FE1ECBD8A4234DC060CD0CCD75E59F9CDFFED3B6C8E77DFDAF93A98DD136CD37
470493603A285D5E78E1A2BEDBC38025BD8CD644431165C0ABC17B2D87DE508C
FBBE8EAA1D1428466DE084B2C1FF5CFC2F9CE292C2BB9338766F055198949FA0
2AF30D02B23DC346091B2CF9EF259737F27DAD8651C8C8391C12719AC3EB6A76
52B3689830029B201B22ADA57600D753A9E426992ED6BC8BEFEEAD4D797491B0
486E7CA427857946D2F3D0E22E018CF129A2945B60AE3D43E04691EA342FCB26
23DFA6BE42AA1C375E2CC177544A6C425CAB682B62BE6E47861E4EFD145C4696
2647F86CEE0350F4BC135658468CD6ECA30157A0A2393AA5A36BE0AA75566279
CEFA4376C1DA98FEBC70A4DE9090A680C2A6B101DEDEACA70664A679EEF8971A
CDB18EC04D2B8F47B2B6746C4B71314D5D009BEC8CD932CC75D4629C629A491F
0E19166E4C5685DB2301CD208FC24E26EFA58FC455C83FF5A31922F3A8726A99
C3F1DE84BCF33AC1A1210EDADE29D28FD29870E91E05FBD88619371A766262D2
B6A86389A4C710044C03A37A6868CFF6157C37987D4D6339C7EA42474C755C8D
258D544165012296C4D80E9CFF55B75629B02796E93D8F237464B6C5FAA84017
C883DEB0EE9DBC52DCD92AA2F4845B2E8DD8D5DA684F421DEB871A9D2B1C47F6
E34CBF655C882CDB6A03A7921BB9F85B93AC64F9C82C455BF5B7EBD718248AA3
FA53B85D3EE6DF698FAC50F415EADC170CBF5F561E004C322217D2A01680D7EC
23747BEF9C47598585ED0C78B4D7E5B9422B3CE88E98CFC20CB94140E58C4627
A127D4600DB448D32BF2E94CE645DFE0E7484FB30B628295F941E30A5D2EE095
EF38956FF6319AC534D257986E96E8238130FFECDA4BF305F881CD7EF4387121
F72EEB3A9ABF13F7A9C46C001446687135708C6BE071B51FDE425A0AA5724982
F17B4949B3B5E1DC217E8A1FBD9B828B8E5DDE117249E3BFA076C19DB786990F
5ADF4BDAF4FA2F411727256884AAD6751AA3C570FE0E4F0239E05BF6E98C9D01
C72EFE315CDAC8483406A15E118670A141B29D05A66D00B24D6B0B4656620B93
787395F1A017D0BEC4D2E8EC7B2CE94B0383DBBC79CAD719E2D7210B3C323F94
CE2A20F23C8EEE8C522D5C8E9FF435AFF83A7B026FE1C9EDA23218D01FCFFC98
D9576541ACCCC953297E3EB200ED5AB5CBB53345789C9340915C41608E6C1807
46A5422C0BF5C8DD23471F0922EF1D12EB2274672143617B4265709CB81C402F
0F1C7CA9EDFF016B7A63B9C2350054AE362F236481B2D16BBFB9ADEC4DC09310
F616133FE1A003108860C4C4F2FFF8E673F68CEEA172A32E45B6F86625778211
E7FF9A8943555F16CC7973B4956C28D804A743BEBBE81C7658FE0FA56CB08449
AF3A89725CFECEDA6238AD53F930853B1D8F8983D1AAC6C9A165102DC717479F
9AC9F301ED106305D29A975ABB163E58651D2D017D88FDC69AFC5D0496707DEB
63C0FA56336FD7C61E1DCBD5771862130F6F8A1BA7348365730EF169460C917A
662492213BE306832F108FE4914AA3C3F101743490953E57334A2A44CA18B10C
DD9DED32A96DF332C5E4270C9BBFD8ABD8ABFBA9D53C42A61026E5BDAF599739
777120EC786EE39776EE06BFD3C04FF933CE48AE61ED5F8080FF1AC67983B2E5
C13CAAC355E995A962D992722BA067E162017A25446984329E24CB9C299C604F
65E8D4445637ABE70A0A5834B62D3D1BF8537CFC9EFC90A792BA515C2AD53252
EC9B468A1B15A5C886AED04CB8A42663392D32BFFEFCC9ECF93ECDFD37FFD080
D5CE2F6DF0D3B914CAD41FF8D5D3A7CBCB73F5211BBE23CFA17BD8B494A11BF2
2CCBCFF847519FDD0233939F289D71066A083E8592BC01483D8DE50B9A6AC86F
872ACFCA7EEC6E8B4CA921C1AAFC0EC3E24C38BF6D64E9C25E9B3192098773EF
4313CD8AD96FF7FA7D349FBD7038AE4D67659C31F4F6F7DECB5E57E0C7B6EB1C
817BBAED6DFFE2645458F781186DEE74ADFAD342869083492FFD32F2315CAFC2
3ED4F9CBCDE0D5B18A731882D69D005EB7655C013DDA26E8CCD73378B38475E4
BA09D03745A1CACC9446AB789F0A8B714B24B673C13F0F7E20B4DABF379A8153
AE94905DD3ACA41690211BC3B31FC0B945D45A59E237752C0D14BF02F879F136
1AF8C2278AADD12A049A42A9F1E6A351A65054913F8362AE88CCD698E3918F75
B664F3E5422DF9C39A8E56F21E7C9DB7AA9E8AC300F510E75D15CF061A05A7D9
2053B5E09A75A4E2BA010A1E9E0453A0E1B778E4CEFAB9C4E774D4B6E2B8F99F
6802FC6A92CCCF942D641F92EBFF09ED5BAD817DFFB06C78E285CF87751C8D08
C831E77DF74EB584FBD6ADCFA082CD1FC2835CB36868EE581C5E0BF90D26C76A
1833B82F7E3D335148791C6FB30D6AAD40AFF247D80A42CEB46CE357616A8E62
8134A9D9F8809DDD97C73E0C7226ABEAC9A54A0DA59DF360938706DC5D9CF0D7
0E49DF25E6DF6F79C78CF8550464109B98E8F140CBC222E92AA5E2A004766349
01C13338462BF6FC705468B2FA3200857A57EFDD6BABBB2B153976A11DDD8127
6D75E955EFDABF1C2DC348AC0AE6777F679E2F62A0A3E7CFFA9E6A3552760C19
98BB54FE1DE1ECB51495B5657533588CC643C22513C6F69FDE343CE33E17013D
44C1C90D143C5F6FAD3E4A3F80C2FC2B6A1EA45B1E4AA078FDC8E849A8639D82
520AC5332EF9745D6349294261F3C7F23CA7363FFDBF3675ABF732FB41F87A6C
EE30C90E221969257543026AEDC02C1CB17CAF8D14D249CA78C51FCA3587638C
90683909D6D65D9F18FB4E7ACDDEFCF6B67A066C20F6F3E491E8148E53097326
F81E9C990A17DB0EDF2A084E7A3EB215C17570F68AA312356BEB75F128A73B8F
4371E90FA42E15294DE89BDC5E27B86B5AAF00C4FD7FECE560A28F18196E9B9B
E313B1A5F23EAF1A32ECA307C440566D8413D14CD260ED646AE2E2DF81E278D5
FF2069E018C84A33E908552CFB17F2EF59D9D1F329D07BE085205665F3880835
74E527498270422C46922F8291EA40B100FDF2B8B145C5EDB5B1435E4ECF1B35
861AC55B8A0281396C178FC15C1C18796352A1F301A2436467A00F728DFF67B1
0DF9DCA40C296A40D6A8F6527DD6B628653878A1F10CC1C84D2B69E1136A43B9
372388E826557733B99DE6891224A561DF0AF67B895D0314250479BF94108693
844FDE5C13394D18921C6015E19FA0E92D38B399848B8F0A693A2FE2143C518B
854618887EBAEE372720F476D768D438A2C9135CCA1EC789989D72E1058172F8
C5D8F7EFA6070C3461367B3BD75B2058E182D130A1B5EF23340647C2FD80D28D
698675ED25A29FCCE51DE9DE162FC4B273DC1C9D175A06405DA29B514EFBB887
F25D7175634349A01ABB8F27B5BA35027F71DF4EAD2B96C994DFBB24374E8F0E
8F6708D37792CB12B450DC36AD412A90A1984881D91078CEEC99E2C27DE59DBA
46E6CD46404FC143CB2F12F6BA1E216D1A74EF9C325E5820D3C9EF826C2CABED
7E2AAE212DACD9168B620439F52961A40B68B5F157609704BB5E4AABF120ED28
26348B36BEA51648F3E80D344B5F15CD0BDEF77E3F6B55BDA9BE5176E8B1066D
23452D8EEBA7707222D7388BF230FF163CCDA19B3C51EC1D101E458D0D9D1D27
47743DB47F3A66FA749DE8FB172A343871132FA7C64BD6E1006B727977AAB0C1
5D97CDA94795D6FAE373B080DD050FC4A9D6393B13590848DD8EFA3A7DC72032
3942B77D128367B76B82BF7F1866C96228D08CEBAB37D932A2ACDB0D2EB033D5
A12CAD1DBC4459BD6ED242F34F4F47FAC184C6A7673D3973FE344B2F661BCC72
033F2F38EDDC366CA46AC1485D64CE1C2B0A58F69A73E7AC4FCB078B41BAD5F2
5677C2D2E6AC2E9DA1CB486C9C7C7701C4D6455CD3BC2795CA29E3130406854F
94D942C145C2204CFC2618A13A497602D0A1023FC26D95CE2DD3788AC479EEEB
B609E8C06FD9CBB8A327BD3E7CADD2653F82D9F92724541584335BDC8C585EE4
1E68B6CA86E04FE58DB799666DC52BE993EDB97DF199549D5479D53ED344829F
2899466FC07B528FAF0E668AB8DC8B253A1FA329E4FD7BA2C2B1A9AFA9C9DE44
28BDC6772A708266C52AEE1B4971321F0E207FA6920E06BD41223A7AB3980C2D
8358C5CF90A7057AE803900750447481DFBF12385AE3FE9C1592C78932868564
980CEE5B4BD1B179F40239D511643C150937B49D2412357D51240FDC85074B0F
86B27B8F62D8A57900DBBFE41DC082E60211E5A5BFD3BFFA9D18AB597A33312F
2516242AD74618EFD17C2D416CB2D33F7996028E67A98BC1739803EDCF448BA4
E66A41389462ED234D76BF08A5779F519461311C0C28F6644A2E388DDE110E32
EC6064E59C1A0C4A90810988FBE3C73B5C5132DAB61CECF668D3B57D6EF154E4
4DD2822D40E023A7288E7CACEBEB622B2E1CA5CF16CF357CBAA6B894DAAB166B
EC807CBE1B898832903CC74E05D7CD9D62CDB0E46269FEEBEAD8E6EB5EA71F72
080D9A0553C7D6A4B6CD48717FBB80B90C04471362FD5A5B9FC4BC9598A1164C
54C888C5A1E073675AA39C4B3315DC85BEED1868DF3A22ED3ADCF4B897B7CE1E
B8AD2E9B5630267F39016EB778060F35A369138AF17A32D8575FF60CD6BC8041
EAB1808786DED61890CF0BC9872BEECAB8E869C01D1D6AA37439D9ADB6B31FDB
14998C9901BE536230B0DE862C894B226D017B06A7DB19BAE8A38B7B2DD3AF5A
E616B22B86AE5DA40DB72D7075A9E46CF8BED287B0AE0BA6C581F6F4713CCCA1
ACCEFDF77EA963C1E0BC924F1E66AC7C0B23C1548BF515D6C0BE077F591135DD
4CC1574303512E2697EE67D5F80524BA9C1A0B6BED74EB9E524789950CA6E9C4
B73D29B1D041E40D948EB99477DA8EB276DEBE1751DB9E0D06A6FB148FB98709
A2D455FBB44FF8C272FC14E5B77E6B6D7899CD62C84582345C9A443D1F3C8C0C
65FB6699ED6DA1493097C2EE47AD35BBA5DFF2EC0F4DAD2330EFB889912EA130
28BDF1CA0F3DD68C23B35D256B32FAE377E21B536CDE8BB0A77196B563CEC692
C09CE19DEA4565AA2D5D4D96E405FBA4E1DEBEB9046C47A485B062196657C6B0
CA8422DC11C6CEAAD03B11462DAB32947F829801EAD6DBFB6A65AD835223AA2A
D5CA5609610B870B20DA015BB9C18901E5693BCBA645B08DBFA4DCBF328529AE
0704AF6A1251535B618E5F45D3451662B0E22E6C9CFA1A694121DA77A21B0D22
672F14EE8CB6107E382A42D3B24D45F0FE52EB4A422D5A8884D7E4B5FE57F025
AB0AE026EA1D6C95B42C6A1F15D839FFA3020BB60CF768A75FE8676ACA75520E
CB313277B923458987CA3D0E400E7F38B995AB39370E2ED88E151DBE7DB96604
4BD85575D8145F62E7D98699377C8A6DB5ADE9F91C08CD422CB3D953303B279E
D66EB955E29C731B1CF4B747AD0F35022731BBCA9DABC220347E79147E7D3A5F
4C61185F01172F84463CF86F70FCF46A738FC9425458FA2E77983A10E48255BE
85F66316CC3E3EF39F47FC0897E7CADC543351C38F13800C2A4E1E547E8A7C90
A3ED3E3D815588B51D237EC598D3AB950C22CF96F9C38DF25D74B7C0DF7AD3A4
72323117EED34F871C1D6E2AF33DE79BB830A2F69AAD4FEE1096A89B45C068EE
D592FEC633F4D753F6CC0F03177916551AC63C78F505D552AC938698B2DAA8B7
94E35F94D207836D5C2866232C82317359BAC870CDA88656F64C44AC758D9415
74A49628C217C17F0738500A7BC9324EECE86C5BFB979CC2757C58596AD40E70
4DF03DE645A02C7B6D9575F45562C314312DD5917B0220B1E292B37F65AAA227
45361846313294B38CBCE3E2C479B5FCCF14723621A0B8B86ED2683AD140848F
45B8EF58CD19766ACCFEC66FC126D7440B56C50C8F4DBA17ADE4BB2AE9DB0E41
6F99285EEF9280F09CC629CD2B0512E17B1519B6D593414970B7BBFDDD78A621
2F383457062244BE1D3D9F93858819131F364135AA4A327DD4F75790571F65D0
A198EAB7995E5300581BD4780B60AFF4A5A07B03B1E2380ACAF6854E4FAE537A
346C550FF7DC5D9685807B473001D30DA6426E3E7B35BF91E600B31100CB3E4C
2DF7B48EB867B7CC25E0ADBD68D25123A7F2C986594E7305B6B8676B8C4052D5
4058D54F8877D534778371976B353A26CBBCDF85DFE9368BD43E099E56B3EFA7
4DCF639D03E177B585B48ACC9A779DF82168A83505F65B400252983B41698192
EDAEA808413E68BD257965F316D5AA2CA014EAED3B10EDF69A96032ABD4C9033
7D0CCBA2373E684995BA57D8CD4D1F7492912BC654A41FB8C5FD183B45338FD2
AB85080CA6FD7060D09A25E333B91A35DC855B8D6142E6F9240B8C62DFD250CF
FE59A92ED9DFD4EA2DA553165E78C1577E9EF0AE0A83E298AC9CB39A6BC253AC
90B887107C66DE7A307BF33C3007E573E19B128F843E3574121A2630F52CE4F5
8E22AC45650EE012A42A1E72A0D83C05FDAA4425C19CFCC21DE7DB9BF6764FE3
BE4D4A72A1E2EB5632AF3BF484B52E643BDD07F61D79F78746C5238C5504416B
1E26F69BF0BC5151B2FB0997E30E10B11C2ED407DBF4E83F1189B329777F42E1
D545297779460B197E1BCCFF96451AEC615628EA68EA1B38C667558976D38A5B
9329DF559EE4F7C45E7AA7930D8A6A160C7302DDAF01EABA209BAAE525E75D5C
A5D2760CC694EDE915CADAD265B2FF3D9B58062CC54D36B435F8AF857422F409
20AA5AED150E21AC35C7DD2E6B225F61D6291654E337D856CB764FD6F9BAFCFD
4334D00CB8A13B841781499C9DAEDD50F4C8F689D9BAEE39D696FE83F70A08E3
62D5A726505067072D04CEF45E0D732902199C52E26368C631242A501B1BBDC3
5697CA4E8F53CB33BF9AB3CDF2BB2117BCBFDB3F8E3E416204DE3F6F1EAF14CC
B7901A3C1C54A705AE43218DF02D950DB053BB719CE9B2D2F75106CCA90E75B2
45DF5C20A40EF09A72B1959517A0630A94699E2A1BD9623AA99381B99497A3B9
08EBE9A234BCD2F00E9D052E942842CCBFDEE3F44B09D1DD8F2063EAF6477F8F
B34734B48EA578982D5F6BA699C7FA6559ED3C6111DA61C93F6F07823781CDBB
E480F771CEFACC14D57DD5E2D5FE45532DD4B3B763CCEDE447443AB0AE8E418E
A1B96070BBA2BA84700A9128F166294547525ACA6C96CAEE6CE6BD7205A6E9C9
B74FD6989C4D2417004E920FEC8042BAB09A6AD210BF5DD105C8A8E7069D8F11
750CEE340EE3F59937C9733246D3DC1DFD8ABEE45AADC4D52CA8D370D5384B34
D68C341F246A44845D94E4F77105E096BD13F4515A4828091F07080CF540BB45
9E4C1332BB4D92C0A340FBFEB3025F9B12B5215CB9FEB566F0261444111E1CB3
16F0D030B0CD204E65A03514834163C78606AD944BB557C31F53F9E93AC66A15
C3AAB9D7A99123C60A39314EA4FA4A59A90A95AEE8EABF24B5BC879E714CD010
DE5D0AFAFF0687C7FBC708A7DFC55327ECCF59C219CD562BA8E943EFC02ED8BD
1AF09AC4E8A0BD65C68108F5741B7B055F44BF8DEDDFF05D4C29651335528417
2A09C4D54D66B5DDE6B64A27590E6CC234C4F66BFEF1DF41B35C4ED46D104E5A
8928286996E8099252953EA21118E6B32D8D6B2A1EA88BE25498CE71A305ACFE
825D9BE76D8C6F0A941885A6D4F83425F4644334171966B22892F73D16FB82BC
B6BF1A16587FBD71F44A2A99BBD1C7FC027EC47FB0EDE4D2906CF1B55597831D
98B646DDFEA47995230979D99132FDD9A2C5D5A5C90863C06D038C88C56FFA84
3B1EF3AACA3FCEE17C7835239CD821DCA6061EF3E318B983E576680ED552A5C7
6833DEC9FF15FE64EB110B540C82CE4A83C0A4567FE859EBDFE76580462B34FA
F8CB61DD5E0BF54F2B8E1C7EA1FEE81E0E0477CD2F5485DDE4B9D40F638A3A95
DE5DDD14ADBE72F179CB0186CC9D5F9EE464683AE60C716841FA535A1F7952FF
78EC04D26B3BCE064A0E572C686C776C4D1D8E0C9251DD4C68229F04C62840C6
5C0CD903A958F30EDE8FF054AF51D3A0B3071E866536A37FEA7B44AA6061EF75
55A639C8868A30F1C13A5553E3F5984DD5F8D347D246B25DC43475A270250406
376938A90AC0353C714458518BD7849F093D3B4C83C151DC99397506DB4D41EC
266C58862DC40E95DCC8CB83A0CC19BFDB13F27E7FA18B6D6EE4E5D1A32026B5
D61649743295FCED7EAB37F39214430BFDE103834356A6728ADDB898D079614C
1B7F05AC96A5BADCD03553A5965077E659C755DDF36379673B7F8CCEA983FC11
1C48818D1BDCE7217B10FF89AD4A78408DF8ECB0A02D9EED19262E098A3498A8
A37BF1F9C5C075430490AEA44D1C906106FA7E4EF5E27BC07F49CFE7A8E40CCF
6CFE964A70EC28BAD57A16FCFB51D3FBC0B1E1925EE1764C0FDDB04B14E6EF04
1492ADB51EC95DF8E053F2DBB854C4BF36A38EB7D87551CE86D4E2DB7607F065
FACA01BF64480CC7152C08B6D4D644BF03C6D46D5553A1BD1AFD2474342DEF66
8B46541EBD289AABD77322EA46F92EBEC5FD7A60C1C6A0C09325430B6C2F801B
8B7E48C0291852C6AF3A4BD405B75831FF3172069E6700B37C86688FAFA81FF6
D70451D90F63043196BAA257EDDD055A37FC3D5A6F286EC41C4E3FFF97794144
F0343368A9170BECE87FD515F09D4F06B6C2B0FAEF474C709515D6A6557ED09C
2D35E561A746E0DB51CED4388D550AC45A5A7762FE22786C14596D7B0D4E3F71
74153A5D789E88984E0A07EE0944A047C8C3A9D70992C1F31DC6753222850ECF
459A7BEFF8CAED69D045E949E25F10F2F48C6D08A7F95F6BFF0A6B58948BA381
7DE8E54F71FAC584426F531F4A3F9C4F70B8EDA5BF150E373526CF55A76CC97F
A47FFDD7D897E21177A484D1A7C53172A728BC83D3774B973AEC1EDE6552749C
1EC8B0A623BD35418A3FFC6882551FF6C318740520E5F0CF45E34F3E676F5789
2E7B84E9F184214D26D55D9F7A5B2306053AB76C949AB1A74676A1A7079D26C7
A9B3B3E4C94830361C8115DC829905CDD01E94393B2D31E489463D4C939967DC
46EDECD2123FABEF33D2EFD095660BC6A6F743E66DDE0A4A395F7F17F5D533EE
C147317C507CDB27EA8A1472D4E8D917E62C98DFB04AF389FC40B58D828722F0
FA75A0F4913D2F5DB4EED1D98A7772216807D654AE74A7F8B11137AB1B118AA8
3B5094CC1C5F945E05D1A6D913C44462A1D72F8FB7690832F900A6B70ABA36A3
82A90CC076DE8A89C18EB54A6352975CF523630A3C01C8FEFB74E98FE66A7B82
027D466D5386A5F6894A8DD97D278678850F5A4FA685BE3CBF2F821157ED2780
17E94E06CF67A34CAE18A1625BC33631CAAF1EC18158B69EF2F00453103BE43E
164C6907362B55CCD1D92404C7B955A9E399A2AE6833CBF2D0D2673315910BA3
DBCB64E2084E8F8E2DAB2C257B726539ACEFEB246B28D984B6E863760DB94589
125932F055EE085352F9B0ABE3C4F06CFB985157C872DF7A1B815B966A2F82D2
EABC83445E4A82C1E3224F2C0F8C49BB517676A4D8B1C6DBC531E6D9F19D8E83
06BD407C60C0A83A6264406B36A4F1D83B1D09AB67046E854A08100DABE6FDFB
9B039F91AA8ABD1FDBE17E302D4F4D521D1CFC6A2D903356C5146844AAC3B230
2B7DA0700A43A606440F5695150F97CC34EC51CBEA87086EEF4072FFAEB3CDC3
A9D3C3172B8D39B63C3C965D4E22298552C8DA5B8BC48404A1576D5CD1B116CD
4C2ADF03A783ECCF9DECE14B6C783AAEE776E733265FA5B8CBA35CF6144CED28
F9CFCCBFA49450D67A8F9B43461EEA90D1113C6E2433C7CF7C09670358CAD875
998E7E0EC5473CBE3ACA1D98F9CB8F658C022F6034CB3A241AC6A8BB3F37D901
F5C0E809C17938DF078BDF5BCDA5211DA5C373FD67754F3362220B9E87C4E604
231E3E61D1727AB844027B3B4692D3E210BB83C3743FB5A760621A44EF78C167
190FA3E50C8F76706E6BE53C1244F8E79E8BD5699EDDBE0D1DE070C5563D8B86
9B97A0CC82C75B8FA5D2DA83A7FB391045E49CA89D0112CB27B4234D52963330
2F3874BB8E556D0831B2D4D44B774D5AAFA48DB92E2CB4E17A98795EA88D328F
79EEA983BF70A255FDF41972252074143613980F4C50AD1E706A12660BFB5F92
887234C6F60C5ABC52C89576ADCF22C070B9F8D99B16EBCCD877AEC2C6AEFBBC
8E1D07BE1EFB8B6DA74EE3B5F27CBD2CD68B8BEE9B3AC4C27683F1E9D009D1A2
BA97F8BDA78E61F819135C92C5BAB847F2C5F41DE044BC0B2C744A7013080149
CAFBC442D2FFAB80BD4F24A9795EBDC8F610040972276A5D784C9C36FCB95F0B
1A45F846C015208F7796C800256D1638FE3A89FF9C0045F7B2047E324EC02A41
609906F2D2462A6B6E2FDB2E84EF58640E1441E280BBC51FDF5D003E52A79CA4
7EC30170883E7C27412FA41094FF97BA9330106AE795FF2CAB529971CBCB0616
60A56B26075E25A22929555515F711DBD1239004F1EC01C583DAB168EBB5E40D
16571E4773CA897394EE5A12A0C0274DE3626D77B5450F3D6D5F200232C18786
FC7B6848300000C2E159E5EAD638D35F84FCC0259C81EB26DD9E2FFC85C9A546
8AAC5F236D65C7144EB40257AA4364F361E8AEE597A13EFAC72B20F6BDE8E434
C2DE75BB62475B91E229AEFC6084BE281C7C17DEBEFA5127A0D32934EC6D776E
EEEF2CA5180DEB6664A5E65ABB0CD0A086E4A3D0F951A935DE97EBFF4C1574F4
1CA577505E2891CB08FE103D58EE6BB6C87F39D05055D841BD088A6A8F3537B8
DED8109519024E651799B34030632D452BC8A23D123A5B83F9E16D2BA352CEA9
2A13646A216538FB61A6F32D09D6B03B6C70D4ACB442E0377FF7FCB624ED518B
DA4E107E4B389DA6F13FC0E2590201C097E7ECB4CBE8A0DFAFB3A5A463164B1C
F55196E73B626DE5E2C9236AD954B1E9C4D17E5A826F7641FFB6649D7F4A27C0
ED2A6B2EBF2705ECCE7B2E49B57AAC7C5F6E110F36BE83B82993A85AB55F4B43
1D3995C2E313343AF0187866169853BDEA7ED0D1878D90309D5DFEFE059982A9
778F4D8CE0F5442833C23AA98F1CD0949344722AED32DDB6C47793F7FABBDA13
0C35BD28BE136646750B8A2BCEE2812F69CC7581EB895F44FB006B49FFE19E46
FCCDC1465CE648B98446F49BC8A74B02273DA1F03AFD499A5CB2CEA052C4E538
7620A97497C0D2F97EC4CEE02C824A82BCEB16FAD2E5ED911ADAE4B81BB817CC
53E53E675CE6845FCB5DE6FECD3137EB7A043E36E6ABB43FFFC8DDE5A36A56F6
C7FAC8B76495F4954B210EF4F0A0829375589E0770E50D0C811F7836C5BA2D01
59E03B13E9119E58838E1DDBB63B0ED28911D1607E97CF216CDF971F86A1E5C9
D7CAA8E385D50DD8676C037FEA0401DBBF592F4CE7A055690145AB28610E25CF
C282769446FAF1D3A226AB88DBA66D7780E191B7081AD15F994F713CD9067D7D
4697AD3B6EAB4B5473C4190AB0CC489ACC5AC63B5FEC284EDC6866A6CF6F9CC4
3B2EDFF42CB77F7843C0D4BC6E68D2A2F639252DCCCD76F48C494FF656B8B978
D0CE81534EE437E8CC70C447A0EC4650276B9F7885114475A90DE3C846AE45C6
4C19A374D2E2173D1DC9C5974ECF892C90E3659107F13B2CEDB3FF11849BB253
EB68F06E435174B880292C0A8DD3900C760C0777BA86B9FCF4487B9AFADEDD2B
BCDA529244EE7D0BB9A2C43E77828A5D73F591689A6E873113089EB1707B4281
0961682486860D254F22BB0F5DA0A148258B912A7C30298F43C5748DF76B5C79
B6DEC22B867575DBA22101C2D4DAE7DB05E2171C5469476134713BBCD8043B76
308FECB8B1D3C81E84BCC37E04635350F8B3B031409D966C486E09D5F163CB5B
6E9B3DFF1C9B6EB5D7DA81F982730D4A95C3CDC1BB31695F1191EACDE3F55393
1C6ACE59B698FAC38A930D905DB71BF4AEFEF033B49789E8215C32876E516658
071D9EE59340BEBCA4551E7AFDB3C4FA87156292353D0D878D520D9FFDC1489B
DEE375193103080B43BDDDA4FEA502B2DDFAA7D2A6A4CE20B60F69C02FE54733
4A351F397F0944DD28EB5151AA54BBF87909C34340D72CC4EE40E5ECCCDF562E
CAFAA05B7D4B7200079511472564B2CBF3639D1D245721896BC8EB303B28D95F
0ED54C473BFDF068E6E06CC824FA4BF4ACCC11DBE865E55EA46BCCA034853ADB
10752BF0D854542D5D6AE28F65378F5E5E7377B719D738548000CAB27491953C
4E88425ED2A5F0D4F06414757F992435A0E6410BA74E01A6D5ADF188BD88B440
79C7E0EA5E4F69B9F4F90A3472A35765DF827CD7597B5F83E1054FC5E2F750F6
DC912BDDD698305C4E3AF341CEF2B77CE842F04671D47D190D1C544B8EA3D6C3
E4513807B8C56BBC840D25EAE22A21AE25C803F2684376B007AA39295A655ACD
E012D8360F17E67C3577C4C7DDECCC1E41D1C5ED4469CF12852E3A36DA8CB5E5
90F9119E62B473CC5F1F7823B05BCB9CADA7D80073278E665992EE576202FD04
0080E99E1ED9EC6058928748B5F0E13BCB2CB119C14365179D41B3280C0E0129
6A4C3BD5C7262AC783D23409C55CB537B774DAA5F0714461030E4E676BED63B6
3393C78EE5CC8D831307AF1DF9478F81D06AAD758CEC02F161E9C3246162C78E
D0B6E902DC042BB5BD62D2BB683C135BB9CF596CF3E6DC083F8CB5529EB5F737
FD049B13F61959EA4D75FFBA25B2960366A9C71CA7872DEB9A8A0225989318FD
D6DC69776DFA91D96E7BBAC54899543970EFBA82E92D2AFE10E93126896F5F14
F3B9B3D9178EB0253B706FFB7FDB2B01C9F71BECE4577CF15A999FE0F7A0F373
02352B5E8F5054C7B43AC29487D46400A266E189A3F9D0EF915BB13AFFEDCD54
08ADF6B47CA62AD584C85206CE57CC6250891C94A4B2B51C2CC89181FDFB53A0
2E46FB524842E5F7FF586B0A746D1CB23D8592C922B8284CCFD124CF1719B64A
38FCA82C529F767EFBFF2E1C4836523038755F135C333B877CFD70E6924E1591
E0F8A4465529CABCE2F931204DF05FD68A699B6F5D12FA5A4B89A5868DA5D8A5
EE82FA4BCD635E604AC45CDBBC8C8B6DED86EC6CFDA227E025E6725A3F51F119
F820DEE018A2818A89F623CDC0D874E8F3983B031C03D04F00E5E316E5FE97B4
EEF4766F5BDD298D6D74B059AD66246A65BB5D731DF9B891C4AB12EB0810B900
AFB32E5C964140EDDA1352EA91DA9BAF4204C0A3C34064F90B5E8ACEE1366DDD
0A438667EF21317C1C8FADC4C4C2DE2E292118F174DA773138F2BAA91063854E
FCD1C1DB27F2A9894F71C181939CA3DD7864380D9667970F3FF039E2CBC836AA
B0372037DAF59CB043FF59544EA2A1FB1CA49ADECE53717BBC22220BC28DEBD0
ADE7B4505BA77C5B1BB45B3B6D2067AD2F9B62E5ED7A6115FA9B4A42D74A5410
5C860B96BBF37AA9BC83A624EED3122E5C3498B913D20393A6F1764C463B28E5
CD987651753B993EE730EEF355883C76538AEFA1479447B2B9F5323C9D16EA2C
F7062B5B6B4D846597524F5633F0A6289064917C89189E0BEA717FBB93D18CAD
0CEEE159420BD18E77C6BC209365086128DE57EF66A9448AEA536917FE7E7A63
AF7DFBF0FC207DAA3423B9E24EF095F18DAD148C2A24EE312764D00D5889102F
14D92A516428F9B510106192136EDF8CC17645C70566831082BF3ECC232F0796
0E878E9469F2DEF33F9469909A565A992D2EBA8BE516C2AA6E4E03B81F9484A0
752E78B404DE620AFFC458AE3A362521D62C24170B19796CCF924B8C0A7A7B45
D6006E1BE0C039B3C5DF8BF48159A527E0319572B8CFE35F62CFBAFB2B05077B
6ADC26BAAA2259F54605D17574575EE37DC30E3A7A9F187A260B16F36EBDB45B
17A0ABB77DC7C6CABB1B0EFF3F643DC8E84DF261E34280934627BB3DA0B1708C
D2AB72672604F139C4995E4F38426BF87C077AD7745E25B34631D1A79BCCE61A
DB660FAA096662CA53C7DF0C3A5560544838D57DBB8903C6A5E68BEE8C426BCB
01F280E07C1B5D1258D5AEADC53C500BCB01F24A09BBDAC46971071E7723C1A3
AA3975E2D5997AFD76DA1F6811FD0CE06C1D912C37368EE85EBE8B369E0C4AA8
1CE19FC138DE6AD5375A852D2FF7E790E2B88D18FAE239AD75B303078E2422E3
F367274BF215F1CF6E5FEB8453CE505A0070C35F9C7A0FD182EE337093F5C8B6
4FF09D9163F9CB17D1DA130B85D1A4635555954646844854D568BEAEFAB8E7AE
AD1347F6C429C42A057508F35EA042B3B551F6FD6C5EC345D8C4CBB846D399C2
EC1A6CEDC94EF3D1E2995A569537F7EA93601FABD16F6B8D06259F68B9877C15
D361B4DF498060D5E2B8C0AA6124F9879A3D07D5F3ECD761DFD9B9F5EFB69037
C621FC509A304CABF12AC260E0313C89084F94F93BFB57F7D9A76E314C408C42
90EEA0E16BAF77019855E64764CF67269E161FBE5FECBE3A9C7DB9D6589F917E
81758CB5E40FAD2BD04924DADF18A7D999473369E688F3FC2101BBCA618CD5E8
EB99AC4E72D0F2C8A430D112D4A2CE7A1638DCB32722E5483B0C03318F0B804E
FDF99F1299A76BB4186FC353C99CE8531F58038C8D4EBD19B1D3BCB936EE313D
7E5BE31AB7F41C40D45D3F9B39005F188D748F5F3E6D3A266CD28A27951C01F8
9FEACD01C06401A1EDDA777F99FA8269F59903C307D1F849DC8EBEA6F5C4BC2F
9C66AE8CE7E0F00EF80F6A4567C4CA4EAFB30F4DBFC497B7C62AC4FBC1F0BE59
0780F61E4950E67DDE24CD3F3C8EB0F4DB5F435B72596E0E54F824
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463BC49115864B5B5A6569C59D057CF2A8C
FD282B79BC3FA1308A61476AFF58D91BFD63D1BABC326C4FB78A42CA08478425
E8038116DCD68406DCCA2F5A85858019428DC1DA7A7F42131319C2B08B6B93C3
64413BF65B6D8554C69AF4C1D98BA42AA91660B2AE57BAD964F6AE9BD13DC93F
44DC05BF90F7E1C05C954ACAC42A93DCAB215675B1C7894E2A0D724B606E9DA8
F016953104BF247B66A7BB05C64AD7636D951338BD379956280919E1F6CCAE67
34BEAB789A232E1082DEA0383E98A6F55D8C71CEA9D1554E7A796586577CFA8E
0A1567CA0F3C0A445EC1752A47E705F4EEA6268E2323E3C3369D97355E3B32C3
3CCB9F39E828B8B8317E4E50F94EFED6873046F14E850D30BCFD2B6A49A29126
CABDEB8551410ABFC1BAD9D79E03CAE74D67249247577F67F6E02B76C71D6809
A3ADEC3800693DF0FC7EFEBB1BFA166A088B8F232012896F122727523E1AD51E
E1D8B35EC2E6B2BB0314FD0E2835FB97FF4BC59F9E64756B4B5F2119B20D5BCF
AB27289A93B316981EAC33605FFF98C7D011DAF6ED1AE0ECE6A43A7A29E27903
3C4AAC3E18B02E195E87257DEB8A1F6489CA0115898F910F38FD25CE03F740C9
69FCD8FC6085A66D841ADED0348EF0A843D0F05CE3F579148DC11183ADE03A18
83B216F1DA8BD7F20B32D5A200D311AD5B70D8D7A6DF940E23FDF870E2858CDB
C2A33039814B0C5363F0ADB027A201E35FB4C9C631CF85C30F422B9F568B9ED2
25D9D69B6581864E351CA800EF6352248851C763613B3DB11FF0CADCA8444111
5A0F5854EA100ABB401A60B1A27DA0BDBE5ABED44A6F0B91FAC0C5484DCFA46D
D8D89C69C886AA0247C5EE233C9B82E24E7366DCCD9B30F171DD667B3E3560DD
F08175A7B0D69A56DD9CBC1E789929A97CE2DD5013571BBEBB7E47EA7CF33DB1
E9805AF27AADE720FD2E3AEBB84160264EBDF41C57320480E9A1433C316EC291
92196D5F6EC0048A3595E64BBAF70EB4324F82D5F222B4676FAD6B9FF3E49B83
21F213EC8E1F5353F20A2EA69969F9916ED61B71D6D94DDD0D974CB5939C9AC6
23A838EE2E680814A84FD2889C58E412B04BC405BAE98B8E3A5A1B70691D3006
F4A89AC8E95965232D5DDA1DD6CA600981745E13B68B91B9057A7B8D3DA716C3
E6F16C8B1F5607B4DA690418CB7DAEDCD83890FD672E9CD8C8AFB769F917291D
A7DA2254E0808842EE4037435F6173FC72034D351AEB2EDC92F4C9065D1B7B40
35E5BA887365496A58CD0010EAA09B3B0A860AFA4EDA031F593BE8187D3ABA5B
99F0F3EDABB762FC824CD60ECDC41A9DE1951C698C0BBE82408CDEB23A4A7796
BD8C4B85AEBF8780661EC41EA916B0F5F7D3BF0766302E833103A207892CF4F9
6F95BE9A580ACE43981CCE9FAFEE623780C0AF99AD2244654E2C95B54A088536
335E0D05AEEC07F9874C8D167AEDD740219E894E7E54A2C4CDA7AF1F92F48612
7488F604E972B69D6E45F8859038CCCDC8A7745894C5AF6BB63B9C4411FA8F5A
9EB24A38B53C6557607D265787BEDD2E10EF99B55D31D4D7839080A234D3A049
B2EC2AE49BF52CDBEAC1F6732638A2A914C50ED716922BE6E42A92E5149A8084
88047DDDC22A3090BBE78ADA2B2D1913E5AF0D8A157B26404ED4A1DA1175870E
6DB1975A17D15D03C6ADB8C7674E2C284A1177340AE14E510C511D24933FFADA
99594DF633497869AA0F90FD53C30FDFACF1CDA73DE2F256EB21595E79DB2662
28EB566B3B34FA007F8981ADA225A7315813455D74F370149351B3A17C0593FE
288170165349914E195BEBFE186B12E06F04F9E892890565792F59670BB08DCE
AB9888772C9E6C69407B58AC96CDC72756110D25C5C0D916D2B012055A37FC3D
5A6F2AC63E8CE69646935341BD381B4C6D5F499E27B6186613B8AD5D886B7FFD
7A85DC448491EE057D1A086207A46A8739C8270F286208BE3B3B0262DB4FE0DF
D65AD6780CB0D21C2037F7357A4B377ED43DC815B3D18DD6B4B5DED380FD9A9C
F102E28B0EC902DB4BAD5BB0AB94C9A0FAF4B488EB9E704853C4851C1778F62F
C14593FB10441B9185FBAC13AC58FA76B08A81656DD25A7835DD6FED9AF8F155
66AC294E182359C7A01DA9C60ED3C0A3389E7F4291275639C6DE6964F3607C90
166D11C29A133415DE40C492F1036351910FE6B93342626EF818DDB64C7C2FFA
658BB21E8FAC70D8E3823E3587184361A99274341D829D2AB7082693239C3468
B177C2019465A133D00285C4FD7E49FA5D2FB569061CAE94BD0B2F67009817A2
8C281C3EBE5C2C46A6AC2854462D87383A5CF1546572770BBA3CB09E41AB8CD2
11371B73C297B3DE6054E882EE083A3D17AEFFAD6136B9BC76BAC795B43085D3
0037728AA7E8586FAE7F316592E7DE133DC96D9C914A1FE11460F214CFFBBB44
634865DA6E5ED754AD69C31FC946EAAF3E000C92454D60B747C54006A5A21612
E2A67CDDF416BA3B59A44AFDC3CAA7CB664F81A5CD41D02C6A69DE0D24B36A05
98D2711019CB72D5EFFDC14677DB5E26593722CA1538DC1FB218B88BC187EC6A
A3CC4372B2FA1BA8163BEFBC6D45E757EA21C540BD81FFF685E3D1841549B154
43B9E1F1809B49429947A32FDF8498D42D3AD669CA41FD6B7F3E30B35A5F6C47
4F1D35CEE00AE9D2B87DE75ACF2F3E5EBEC0DAD44A2DBB0299A72E6AD2765B2D
3E2804A6BACEA3B04BBA7E193069496B58CA946D021BC9F43F89A649676321FF
FA0E5FF6B4A9801E168543480A39A5063AE31266DF857E7234916D3C9D2C4B70
6A00CC6FC0C6FDC412D1B1E0A59F387BD5D4A6DB1CCDD76474C94A2BF49CF016
5BDB0F6D3A5B99F348417E6ACC655C5C28DB99242A83C7CB039B925E4A797FC5
6318818E6995987FEB4B9BC2EB07F2A45F099249F53E4241318E56B560FC83A4
3D54F69B2B3B0791ABDF81335964074C54D25597B61B7811CF0AAADB83F50684
86F63DE23B5BD743DA84BDA3755FE793309F43CED6D591D11D35F3956CAEDA7F
621B6F81AF6BF98B8BB53FC5E72D3EB8B01D29FF32A36C5D25FE6FACB868FA82
EDD546B4537D108638DD6B9D64369B34967B2B6256C214DD23DBFF6A1E605E81
93AF7DDB35A4EF605C4C23275E39B649FE5350CCA347122D9F1AD49426BBF81A
783ECDBD0EB4BDB9967E93C46A8CEAFD66D5765B592B90ACE2DF053F99151AA0
13DFAE4D66EA0B92A7B4C63FF35774C12C400C86689234CC892F5391EC69C659
06D9EF2F4E0EC6AE438A5E3A74345C5796A2B47E4C81BA6C9E6FDA99321F57F6
794E4F815E570A966383AA9F7CE59375525369CA6A559BEF0E074EDB9552BE2C
55747D7AF3101C5F1A2A1BF6C0E25234B978482F9041012AD781066C37459250
D8608F87B34190AC06A6ED10305E09ADDC767335712B45456FCBA4F5559692B7
327B6720BE086562C6CBB4895CD2D0D976EBE8AE53D3AFDDBB926B54EF0C41B9
8D152528A4FBA8DF907229C1CCF681450F0BF41741C5DC49707CFD45E588F7F0
CEA7717976FBB04E6A3577A167AFD809D740C0686E3F7333F5CAF65C9E3E801D
2C79B0BC9D268E5D6552D7189D4AFEF049789E371532480797E5C6BA92934581
EAF8817CAB1551CFBB3E23E96C7278E703662695BDC4004A3E717A60CC55B522
2BE540D429C92BF53BA5D6D7BDBA8029A96B429FDCDC16A22EF696184AAB30F8
5248407A164191C82B93D4767BBA7E8026AFE44D893313D7990FECE8B4411996
A70759BE3C8BE74FB07766723F8558B743976BE07BBDC35D391B9C56504C437C
64AF02C2E5A5E927504476FDB488AC23360C5A0359B608B771DA26FAB423BCB6
8FD1C2D0F7AE1D28CFFE00B80235695C1D56BA2F32086EF5E99A44569B17E6C4
AC6396AFB3511ED504335D8993C46062EFEC87EE7F2DD2D1BD5C111D2A9DAC0C
40AA25B91C7E67F1459F18598E3C3A56DFB96DD13C7E94D5CFCB7E8EA54103FD
8E2D8F7298D62092922F631354878A7FE24A1AC13E5784DB92485DA594A35639
A81D5ECEBA4B3DBDF3468A8FD83EF1CEB7E6B293CA65D163C3FC90FCCF6D6AD2
188514DE43D9EA8AC68B343772084D45B94B8234274A187D767EDE855B520ADF
A07DACBEC45BBF0C25F5774A08F51077748D1F0A951BF74B76495AA9C0A31E6F
A72A3CC8C866B77F225EB04390858BFF70300B0C3476F553A88FD966801A2497
12B98F8F6684D73619634D02C0902B167500C2538273D545447091D9D01A466C
EA8BFA775366070A9E8C18D6F76597DA46F33843317366D9ADA698082680809E
2BB7409C559024F1EB4E1C481FF3F7E0CB583C8605FB1DEE02FF872383BF1C98
5EEA0521867422FD82022BEBE54D643F7C2CEC6BD0F0A7165BE3EA9261F7BAD6
46B373701920E63C05B3E0C76AEFB69565A7B7347B45770125B5D866B064F141
83C30E5343D2CE65C1B010A5F5C34F34E1726E6171529E0E1972EBF20BA99B97
3D833C01353D785284BF19FC952FF8D47D723DCAE7E031BC6CAA6BE5C372DA6C
0F9656E47E98A29F034E7B865292BB9F12BF36E45414BDDE19EB95FB140BD4A0
A28C430E37B4681B2FFF0A01E37D089ECB3A99C35873FC9C6A7E6A0091C3DB4C
EC9F31AF365100CAF9A58AB3577729F4DAF64FE2DE93610FBF80558D636D2424
56B28E1205031E9FAD025AE677DD70A7399FC30381CDA70B5280FBCF9DB78BC2
49D2BAB28EB57B3B3A5BE99F52DEA3BE0F7D8F2CD2CF6917F318CA84AB125ADE
D1FD166E096F4B23E203839C340D85B3513341DFF1A3C4A6E985EC2F570670BB
EB2F4372BFFB962E1E59A82641F3636C82E90B5298898025EA873936EB69C9AF
BD9BA2C357167AE5323168CD87F7D76977C6E75E6763C471FCE09BE8306445D2
8DD90A9CB7A6E80062BB4D58D6E0EF2D84DD164F7141FA5ED0E97D14482296FD
B14126F2C3250B5E468E53284DDBBCE5686A754CB94CC79FEBB4309362F205D2
0AC6195D450CA1EC2E7F061CBE5E60A90D901129CD5A945CF8931EEF3CA391B7
BB5FEA8F0826F48F855B48FF22E8EB7ADD234ADDAEE9CFBE2D6EDDB1D0E442CF
868D4FF6A3497DBFC58D3C6B9CCBE64F492100286C14E203771564A1D120D73F
C11C903B37E0A8EE978FC455E70976E85E38E9FB365BD7771605966C6B1B931A
BAC2BCD99B34202877BBEB9F5002AE1230C4BC5F76AD2134CC4DDB0863C58530
A2283B586870FE655D6308126DE32C494C6AA27C88144786FD1D4E42D1749CEF
E60470625F934710DCEAD15D70314B58E07898EB92DEE6EB4F956AE90F8F22F5
353BF23F5DB1DA1E4ED90B66F08837CB00E1442B7013A716C43D1A07744BC823
C7A0734BC0D6109CBDB0822C1A7AAA0E198F76845B8101616E1683BDF622421D
1469375E60AED4B907CD9A44358953776D0DADE614C18596D0E0C007FFBD5EA0
190CB41CAF5603E1BB9A4DAF0258C35EE990F664417C84F84265256C610A2866
28FE70E074E40F2AD9BBC2952CBC07B8DE14FD0DAABF9D8EBC8AE214339558D4
21E91DC93BC429B0BB3F3FADA3728C9E3E0893C488FB68CBA86606DDA5939B79
024DC91F5920B6B0E72C394B3A54415981A36996D572AE90EA4AE7BA33A98CD2
9C1AE05ABBFA9F08BB005DD996FCA2DB917F271C06F9E8685749426E9ABD3FDF
E1F317A0A07AD7169CF538D50C379FDEF1C2D8E8E049052DA045890231B710C5
43AA2A5CC05FA7599948E77E4B370AE4E198A6C53257207EB4F7A4E7963DF19F
11531FB0CF06094143B473A3D520B0F2815EE718934C81A132E211D483AFEDA2
CAFA096F1618794BED59CAEC54B45B674DABFC4BAC37E66A369B305198A5C11B
C9927864500B6AFE47D86C2F1BB402B751F7EB9276A8DEA14FC67F1E1AD54560
E1830BE95DEDA240F9AB9E59DE6E264CBA19D3197F80C4A7A8D9E9E8FFD970D7
6F9DD4470201A83B01618BD6E7901A27C26270CC53D99AB8FA06782AD7F91C15
C43CA3C6A421C3E922A2BAB207D918CE01085F9062FD63D9F028F72AE1C7CCE6
978BF31C91B890836B80FF5FFB8897B6707D937D4A41BADF2F9A51171ACD771B
40D48806F82B4B5AA65A7A9B6E99FED552E9BBD83A61622899A6CDA1B6BA77CF
4525E91037F30CF065969024A822946BF8F810235FFA7904418684810F1F0627
3728A9874D4FB7581C708261AABFEAE75800BC5BEE9F21801510763A87749D5B
45C48F503DE04B6237F16410837B3B0D3BEA16D2BF235C92C528BEDD0F3011CD
20405FF82361AE2FD83E6E9C8CA4031C77F300DDDBE467FC87C884973C2B53B1
5227139EDF68868B68CC92C4CB707612CD4531717DF68111BF35E77B202F4917
64AC5EC0B4DC2BA696EF13E95A5FC8E3F4093B29AC80CBF13F69EE966CA0622B
872CD9E55B2E3AE02CD20A991545E399B20090DBB684745381A6845FFBE97BA3
2AE6A6B0269F00A8A5871002AFA3522F8D6CB3BFB57F9DAC2443A641BB7B123A
FA4A99C01A1023D0FA0BE7A4DF98756D7977789B19EE83C5C1639734D651FAA2
7F7A5DCDFC4856405DDBA4380E65A087AE3B89E10AF2600C2A5F9D08DEAEC145
0D3AD9F63FDCB4CC867985CDD7A42A7363FD200EC20C8C3FF6579AA228DBEE1E
B2C0173418A5160E868C698AF1F03BFC0D9F7B02778530FF409105CD9850F234
D1E3964E496DF86E4CE55ADCE6D8CE16777DF59263DE85B19163150D8293998E
2523ADD4055B5073E0B92FCF3206546F1F0F171BBEC63B9E088D7CD96D0D98BA
6661C0ADF245DADBD8D6B685EA480398AE51BE69817AFB2938A9F7692B3BFF17
76968C5783506819BD027350FC7BE203582A7B32FCEA0DD7C61DA385672ABB3E
C7657149777901A47B61FF0F9517F4B09E3D4AA9C3861678DB28760B9732A5CB
7E16FB416D596B0A484DF7DA49388C95B466DEA839A7D92CC9F6A8837A414149
F98C1530A3598F35E26F2E8ED5D8A0B0A4EF950602AAB9CA4954AD9069797717
CC0B929BABA88F67E4E36F25631A63736B5A4D69E43D6D6884C5C1D78A4BBF00
789E8B47FC36447156BCD2AA7EDCBF4D6FA08D72896DAFF929A8F0DD2BA245EF
352CAACA1CC3118DF934DD34BF9F0468EC4037C394E50EC65F0CE9247E0070F9
3E50EC9911624A28E474D3AAF476BA9F439ABA5D88C20254F2F05B511FC1622E
16D8E01215AD69351D10712C774096BD7757FF2E4204EEC5D09AA10EC893467E
0C32EE695D829948C67FB7F1E6F9DE382EDDC78C3DF520AAB3741FA0DCF78653
B67EC6375F2F26C049117D3B234C0B2BB16D6589E40C9002B5BD6F01AAE2BADB
3C2F39CA90E970EFFDF8F0815D7853357FFAFC3F98B322D18B0BE91E1A7B100D
FE972508191C0D44D77AFF7345B8FC52DF9C07ADC97572BBD2D561E515679BD4
1DD7156C5ED84AFA032598092174640741E932216B5223E8FBC5B8D0098C0C00
FEB5742C9594923DBD94FF6EDD1049A999F6BDFDE7D2FDF54AFF5FC776ECC75F
BF544C5C0F0FB8255B88B7F912EC7E9E66476F33CC01B44A46B797A6D973F381
8593ABB293C6C5AE4A85A4209AF46C21F6CB6CA35E9039E6C076693C25379FFE
E59A01374E7456BF5E4DB0B2927FC5DFC41879C0878D415C0CCD2B7AE2405B9B
E2E53D89FBD45393379827EEF74296B71F9E7EF1487F54EB23A1CE0AB8CB768E
DF04DBF511A6CA32113FC022CEB29C19EF05600671FECF22AC70B27E5D29C1F4
44CE4DE751B5064C8AE0F13E9CF1D7051609355814B644236854780C9F02ABE3
7387174013AFF89F3383A1A0A959F728DBEBA94D213EDA0AC34B9F025F45DB5B
C9236ED69392AD6ABBD6ABACCEADA3D6E9E30F661FB457F97DBF96D8FE3E67E9
B72195CF72FC3BA9D358E2890AD7CB5AF0D3731101B60142BC7E9A80C378455F
DD227E6119D574E7A99E9FFA2DB4113C122217FFBF8721E827C6D6CBE0EFCE36
4DD002263EB7025037FDF5A9F44ECC5B23CDAC7DE62C90F571A62DB8C662E502
F9C53B79046EBAC28FEA61A66606EF122451DD2380B9C411DAA8C70CD17D8992
56C2BE2B6372F2D552D74CCC6C0F708C06A34D2E1D51136B4EC9D698B9862281
88F5BF87D3AC201F8A017B1C7C0B1EAF4E060FEBE73DA5DB256F1E6F6776BFDA
7B793AE03FA7244D4B09EE6684D6FA2508972CD7027A81CD8020ABC02A21904B
27F63D4F979C9AA56C8D08209F0BF59A06953E87C74984366C9427A311C3DF25
5B5E2640A5ABCD8C7499AA5353F28B680AE19F5C73CB21B71EB25520E7FDCC88
0AFDE607C6767BFF174640B9E1BEE3CF4421803E88923DD208E8A3010266862C
F39FBBA573AADD91993E707C3417F1E3C7ADC327457BAE54CDA11B7C316065BB
27BBFF3E84221C5356769DE68B5A430927CD026E7CC02F5578EDB92FAB61D895
A6C055A02AC93B2FF54CA8001E4E91CA5F7A54D5C5690340ACA326B00A7AA5E0
A5646C7862671FEDEEAED69F22CEF9A3DBEE4C10D079E09DD003174212B2C2A3
534DBABB2D34D36584C13C0D00FCAE7AE87CF3484144AD22E490F4D584FCB66F
846A70A1D482496AB74D431D9612FA8EA346513CA8C711E370ACE75D5BE981D4
43EE5B904185ED400BA8C6B6F84CD3470092B499F0E31B0902B6B5C8F237E4E2
8A90F3D5FBC35F663DB0CA2E1A287BED8B3ADAE7F49CA94439534EE75D8B82DB
C7BE9BFE2710581C17A9D364B1CD13DCA3D385B83499C715ECD759876274FBE0
C50B4FA1AA8473D057AFFE31D1E464150C87BDDD01EF4FB69D99F92E3952261C
0205AF4CF5DB37BD5336542E0B9434AEDF4FCD4C3D290D4C9264A92470E075AC
4A3EDD9F04DD64ABCE032684F016F1617292ED56DB05F9055272A8FFED2A7BE9
698FF3511D6862A199C9B1ED2CE0963F67F3685BC3EB5C9E7368F100367CC329
42DF887666CF4EB1E5042EC0EB7DBB48A466C51F7037BD7D9B3196DC0F4EF2FE
2FBFCA8182C4B1185CC760621E0A70EE206034708F56E177368C84661E8D470C
8FCECF87E141E181D826EA02B04432250C17C02A844CD9F42A31F6710DB8CE76
3A3FDD233368AB891AA0006AFDE458F28C88624B7CD1FEC46A8C61D4FC7989EE
78FFB2B37BD4CB3EC67FF81E7E675FE6CF410380BF34AC17B2E42C84A0B24C10
63C61479582C204D8D0EC8AB2AB23D244FDBEDE098610F35EA14D10ECD3A3AE9
7EFA7854C7045849DAED8F29F582ED83A6348F5339306A9F79BF2523B16A083F
710C102E07B540B03DE13EEBA9C102C40045692EE3B52643A0DE3E654EECF8F5
6A233A629F16DFDC16B6687D0DE3C875DDDEC4A49EF8A294FDDA952D6D1DCB04
81C4DBE8A6CC2906CDAE8BEEA68C46B8A633E82E5BEA048E3AAAC107F62A856D
9F4ED778FCDF4C21B59E76F4A341ACB628F3C6FDDBE812F0F3C38F09982D6B98
C3B129D4EAD34978572CF685BEEB85E4A31E174DA9330491EE2EAD0AE6BC9EEF
A0F3B0E2FD0F2BABD93922C7DB8BAF16741115B466544186F17220066A6823F2
9711AC571F570169FBE886F71D174D42EEEEF2643CE2B3928163793A530A89D4
DAC9B7B0F3348A1AFAAE48BE88E0E16B8E34DFAB218936D444BDCCB32D592B00
EA16242C2CC6BFCB501B02A87587DC7D4030E320C514539B504A31AF3D78D4B1
CEC64F1C0C61A3CA481CE5D74B8D57712E5A885FFA07E04ED65CA0335AEE2E38
537138BB6A9C5FFF29E7B56FB5BD163E58651D2D017D0876F86FEBD25557B858
367EEF69826C9576EF9D0671951505993DFCEFAA29DE7862BEF5AD61EB798D22
40D716C6A657C2EADEBEDE7A57257EA6F673ED5F34F1C1D20B609A152EDECFA2
687688ACBFC09760B1F17B61ADD5E31186C06DC35720722FFF20F84BE80DBD34
ADAE1D899DD64BC02EB64DB7060981D686E57CA1229401BF634D445C93FDC157
796BFA5507E66AF9A7B959A8DEA82B3FAF3D8CA197EB10B290F65ADBEBE4AD89
5425E4FB3315BEA6E2A5443A083B4EC4D62A78975DA35A724B445CADB06E4F5A
7BDEF178B1674D3BCA6807D768CFFAB4CB966B5DD8436D1ABDC3EBF183FEB4DE
71B08EF4B978E7688002FD01D97BF158A672470F56F60C29AB8B417E2D6092F8
BB70A2DD5DEDD4BA14A2D8A8D2559C85177C31784217D6A61BCB560C5ADD221E
FE49600B28E6DE6DD5630777328F56CEAD97662B9885FC2FECA91F2A21EBD10C
F7969FB0B6CDAA4440058E7038760B6BFEB2B9B16652CAAB36F65AC444CE935B
88AD27CB98A914D22E25B41FE35179D5E020790534D6B52721D44F1376195924
9E10508177B1FF8B21E21EA1D4B52E8521474FCB68D8D460A41B61369BDAF603
292F97A236162024F2008D619DB75BBA85281C413245BACC54FC6295480EBF5E
7AC5FA295B2B53F16B1B3C3B1E3EA7F196A4391CCEAF69E03A6F1586D4FF74CA
1C207AA4C280C4CF19EBEC3E84A779309F6DD4BBFFE0F6AA5BBAFCB3A19087A5
E1868088441D383A26338FE715685E241C59270331C93D1FEA1A8E24C17A7D06
18ADA3BE5EBE074C6F19731C3F43ADF69636BE324A50CB1617D431A70FC1CA00
F7EA00F1881F72AB575E72823531CE502CDC7C4259F97356D0AD0FBAF25757E8
5935425CEF5DE298694A6FC1C9DC9937CED891A3FAD8BBD5D9B2BF18137C1BC1
7F6BD0C319B8F79AFE5858F072448333A505ECFD4FEB93F67D42E4D493FF2910
3FA1A88D64C27B2B8B7136F1132A0033607ED4889DFC82FA74540F1DE93DEBFC
923ACF6341CF130CA2864B0EBDCFB578FDC44CA7C0642C2BE8492B0BEE95E7EC
7A0DBD9FE7BA4348C7A9FA5DA7C89AA59AD9E5BA490630854E142D47837E47A2
E7435EEE987A04281CB7D7AEC0D5A640E2FCBF7F6E12C934F7625CD28DC71534
6A2B0BB999C1BA751BBDB5D30350AA64635E3DF35C4035D624D81DD1C7E8B7A8
C1845C8391BEEA924866FE8A3102DBA2579FE324721A6ECE302D4BD3AC021B1E
56E0F9D8757062225365719F27F26B346D616A1FAE332DFC36E6577AE0422F7F
D1743563A14486830D580A02D980272B30871DD14BAA9B0461A8F2926579E70F
E766D16F32D4186B8517F887BDE9B764B0AEAA0FEF47DE1D9543927BDEBA0688
A0689D7BF123F16006A625FB2280F9EE507ACCF2A3C8F62040B6FB0570181B2B
F2CB0B2B34DD6AFA8713CCBBE7364DD049F28B82F4C2D7E212E41AA0EA03D519
FA18D8DCA3F6448ECF17E250DB64D90BC6C087755FF53C2053D30447F49E7AAB
54211C50232FE9BB5A6ABE4E8EA1073137D9E565F947034D7B4465744EAECE20
DE762BCEA5DE2D68723493C998960AAC54B2B9DEADC62E5AFF0E9DB8DEF52B69
8D539C111D5F2C6A2DF778886F22E6353966110B34613CF80130B2018916D814
5E09A05E10C0A62A977E63C4F8EE37DEEF241868D03AA35DA50907875CB98EC1
479ECA7414FADC3928EA7843B075AB260FFFC92E2AE38E0AB85C69329FBB67A4
0DE63E8B5EE1EC56A9BF86EA0B55052B6D19D95ADFA154B4ACFDA156191FF9FC
25E0D5DAA2439C2DA8FFD1F1FC1EBBADFDD3462A6FF9B4B27ABB003D2F9B6ACF
AC0EFAF70042AC730B68F3D9783D4D29DC0EFEE82B94D81A648046EB018B34C3
09D147BD782F1EF5FFC5B9B48378B88EB793FABBA2C4A61C3CC685C4515C23E7
8D27B2E80D26ACFFBC918EBDFA3B3E67F9175CFFDCFAF99EF9DA48AB37F46B11
1202B0DB5B10F1CE69E7D0C679BE1F40612512F95DEFC2608E3036A7456AE24A
F7DD582FAEA02A4A0380622E8C6DD07E3EA7B7A9D6DE93BC03C11607764A1622
6BA2081F813E854D9DD97394828B9FCC06E950F0872743BA614EE5A7E4B79471
7EE4576FA95D649ADCAE97CF9A211F144C5F6B43342A87FFD678F97CADA0F2DC
5EF2D5E3A2048C6586EC07D764D045E949E25F10F265DE492967C35340B46C41
EF65FD9BC555C2F3776FDFFDA7B8516FF32957C5D832A7F1AD2D496F02C7566A
4D3A8DE714D9ABCDA7AAF69D55E28F1C35B0001F65B92F14ED42566881C3AAB8
8AF3FC13715C38E803A45141D204F851D6202D3168391B1FE00EAE342B4E3DD6
9826E8875424D6610B758FD63247C3EE75B79A42A7D4088A5A15022610E0FD0F
021C099D4ADBF73DC2E3801BB732D414C1DE64F22F418A8535FDFB994C773C6C
58B2528D7FEAE09BE5087A800C24F65EEB55C3303CB07DA36E527FEA91002B4D
E113ADD89B3A2AB273BA9ECB9215C6E14B1E24583B04F6D921F0CA89ABBEE52F
D0A03BD1A0D102F731586793134A186A598B8837C394E0192ACE29AD10E17F80
6D556F8CB7617B55A438993B3CB98573D8732EF6E59584DA1E32F418F6A7977D
13FC658C292AA860C24815AD3EBB4503879D253339B70701B278C99788F76B3F
5000236ED99A34C0F33F529073D335A4EBBA05454CBCDB2EB653428231740BE7
F6487151BBF98042243ACA1D7907E43B0FCDE865139757D0FC60ECABCE315992
054F767F89F7D9633A6D3759DEDFF460D85F9FF51F65C5F4D59ACE2FCFA13970
5BFA7F80D55BFE92D612995E080A58F6A0B098A756AFB05DE3EF4BC9A3205C8B
5B2D7D6E746E048FAF63A8F5F3F8CEC079672FF6790282BF547C06A2DB75A6E9
ACE0308F5EF5E5E23705719BBDF503691A950D9CAB3E5E91B009A9097FE58EEC
82B9F7C0F46BBF6BD1186003B7005CD3508815A7AC370F61C1DF0C409957FEC9
9E7FC719A69FD3A7B2909FD106C39C05E062EBE0AB29C107C856D9A822FA6F53
D4A38200B982BF12FB7379890E2D9927036898466F0F36C209CA208A83D541FC
E18290C7135A430384DF868D1180A5CF302500D3F3FAF391F2BB6A46B6F6B8CD
AD9091D272FE64993A839023CCB7AEBB5D60F083B1608EF1197CB3906ABFC8B1
B599183B5D71EB9FEDA207C1CBCB5F7BD74B3E46CEE533C1F990913D2FE8288D
B56D02B2FFD59E02D21BD9BEB4252D67C718718682FF811BFE9F1DCF8BDD8CE4
1DEF1EC6F0DE02A857F1244C6B5E42380687EFDBF3A22A9E375CC57E25E69C49
483D2CC44FD15B4B59FBC326791881AC86D3E6277452F5227F3209ED23441487
D969678F60B39A6F6D62C193EC19D94ADB9767FAEB58F98B59FBB2C4FEE1FAA0
9DB2A2D023DC29AEEBE40887177E32CFEE5EB937011BC916232362C9A5069EF8
C33F060E55E7489BE7C44159EE61CBFEC3BC53A425AC2845EA17011C28428DEB
F31ABDC2BACD3482E36073E22967D8AC2728A64F290D54D84E305C1F6C0EB405
8894BC864FC4FB508E5EFB31C68F516B12F6AF75E439D3144559EDE63D3B6A13
AC052278BF9A3E8B33300A8EC93AFE73628FBD220AE3EDEFB2E348375AC634E3
1DEC78FC2F1BCB72CFBEE66C0689E5C8D462BEB6480C45CCD905FE59FDEA094E
8E07B8B7B0A3D210F95770890DA6CD53937395715254D5FA17268A56C1C4B42A
6A28323E56B5D31349C12ED9767A1B629A4461BEF00AF78B86C82DF20A67882E
C0EC9F397C561388AE1C992E7CE71BE308E23DCA1E37B5F1BF227819188CF2F4
64A378905CF1D7DF76E9B2C7F03E169EF83AA7E32A08CE64A5692FC2CFF28995
4FB6C4BF73FFB27783C8D82AFE6DF96FA51D3A89DBCEC76DC1DA6226A0AF8776
C48E2209D41FE11191990D58F0E37004D007A14A4AD6765D2B0D2A0E4C23DB77
9C68B730D218A3E025E5A05E3A03B7B7B7670416BA94B90E4D2217EB43E5CCC5
55C51FE8F53DFA485289D0DABCED8424A5D69FDA04F227B9FCABED8A8A5FF152
9909C3802DE959D702148BFF5078AA9ADD5B7698BD4FA2690425D3D77350485E
3AD530DA422B71173D61D6BBDFC40D4F4895CCF234E7FFD99F60C47877387DE5
69408BD0BEEF19321C16338DFA12E640B888BB6E4CE5A7936D5A23056AD47820
947B57FC7142F8F1257B1871DBA21A16F8E6F36FAF8EBE53A68286B8880AEEB3
4CCD825BAB9C8B284F7579ADF64C2F48CF1EC63F5D401ED8CD24D067C7592382
36C43C4349394E5E5F17538B5EFCBFC33B0937BC3E072D73F356FD3F3C3FE294
2170D0881BCBE9A6FCA4C03BCC067105D1C3CF6E97411BE097D0134159AE0F83
1F0BD3C82971F3DEF8E5556DF8A184D8659F0D38F442F4888674C5F457D684CD
D93BB185D3F1994E56A843EF1419043CBAEDBF2A4C3F7555A3E49CDFE4FF3A27
668CE30382E2AA79DC0141D6F1CDF9CB4735C8EA8DB5A81B7B34101D26360281
09A1C63FF5E3D0459F6130008032D00013A075A1CAFCABBFC91BF614DBF8F134
3CA5B650AAECAD314958A280AA898F979D5D05E540124D1935AFDECF65190EA9
969FB791FFF3FF7E8A46297F8047872683FBE10DABCD5D0D260934E6D8D181FC
BF3FBB9AAB7F732203DEAC90CA40DC0F9B04449F33F168B7224C157D49D8F51C
74D905958D4F2ED3217D2A214D57BB2475DCBC7DA169D8A9CDFB5DC55F08AEB9
0D430BCB568022FE50EBD6C218AB58470C9A81EA0C925B74C0C388D290CBE14D
928D068DBF528C83F702620E1F46850107501F1DD6671ECD1CD9FBBA34D2F212
E37E927FC99A80159C215F303CBC1F20FB5AAF894E13C8F3E84E83C13B5C5F55
715121CB73DE53C38D7A5FFFB5BBDB2A9C4984927EB97C18D240FB3967D17064
A82469F6367091BD71D7EAEC19315A26B376FFF139204C108050CC443566B1BB
F4F6FA4EAB067F01D6D70FE6897FF71DFE9D257C72FD37163201A43C78CFEA4C
D5CABBBD40826BD6FECAA1ACC65D6396B2E0C2DE98760D478A80561482175FF4
C42D0DA9A1AFA929C0D70321916B1ACFB1342930F15AE0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI7
%!PS-AdobeFont-1.0: CMMI7 003.002
%%Title: CMMI7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI7 known{/CMMI7 findfont dup/UniqueID known{dup
/UniqueID get 5087382 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI7 def
/FontBBox {-1 -250 1171 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI7.) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 107 /k put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBBAAB71645535A2B
6F0F22458E1429F4A67307E01F0BCF6F337E0E2AD89658D880B04C26306F8179
C8121B958459B923AC3B05B594D8AB95F75870019130442FD29578D44F5690BC
7281357A5041C8A809A59D0DEE108E2A07D406656BC74A9F3317CB887E712318
46B2ECAA341F8692ACC2D14ABABDFBCAC6F35858355F1D3228B0223EC73AC56F
3C987464DB829F243E304F4C59CDE3EF6EB53A4EF9BA91510CB89A3407261F58
A2AE66880BA98FC1EF546112892494C85A2C39F9DCCAC5766725894A7AA148E9
42360AE64BF3A4F1F9F0A0D0C1AAFDC4D50C52233AA595B7D0CE557D4A010D86
6E6B76A7E9523E8A6633DA9348BC3F59302F72F492A30782AE7EF220516893D3
DE836CDE311DED9262AF01C506040541EE84AAC539B404B23033EF56D4BCE6BE
B05F79CD633FE75C6728114D2749E39FD7454050F67763AB636377BA8E1867C3
996C7D7D4A4A02BC49D1AD7FF174C1F49F1F205BC9D5AE42BCB02CF8554E8F5A
D1876C9285B6CCD7B8C165F75843B0AA11D8462B57077AFE75BAD086E9D9F91E
30ACFF91776132F3CACAD1CA5E08B17B36A0E45ACBAC52393B9AF9089BD821D9
CD5A9CD9BECA59F7445D63DECC1B4502D299DB85B6E2EE7C69A1DAB91E22A3A5
89B524FA20AF6005E7A586B90A2C6E5A93C9EFA4ABEF5F7E4C7B81363FE8D2B3
0AD637FA863DE787581ADD7CBE463F7866C40F4E280260ED0E9C8453E5C7E668
FFF058B9742DD3F131C264F8FA102CD0DA05F3114D13D34D422799181453FE23
2FC6EFB01BE420C930B879D671F3DFB036197874725220644A5A52DFB467BB75
8089E4F40CE9401777B9FE1D0AEE02E782A6EB2A185A454AE9394094CDFE7CFA
C03C23A78EAF242E4F811E4C83B59EF4DC5ACE4AD37B41616B46C263358710B2
6137314545CA6CE89119B42A3518EC85C68DC07D26839C68B1FF55C4A9CD518B
A1FB32F9C475BB6110839FCCB94156E7B3648F27245A00D2966FC4DDE3996BFA
F463A663CB6935B596B1582ED0ABBC648AAA8A86068BF0038001C753C8BAFA0D
2058041DFA720B528E2D4B16196DB1CF30C779D3F4800FE662D5B60B208341F2
A66EFCB8448C2FCD12DF0DD899911A8BD96C9B670054D328790E5D388518B146
8CE92E368EB1DB3CAAFCA4834CC9D9D9DCC80FB1F34F39DACDE643052C977A7E
A95C5FA8DFED9B4DCE769E4E46256D6DA8FB18FD7FA4E4CED5D486803538F3B4
6D3F5B3C03184F5C26C66DBB4C724918EBB6A89C4602E4EDDA81EEE2BD18B683
FDB459F2CE0A9CED23DC208EAA8BEDB304B00E093DEE926A7B32FDB2EC70DD85
94B9137856DDDABB402B2C76DBA87149051ADC6007018EBDD571BE1D092EBD95
76D4E063AD7D5F62E6C26EDB88D38678F2806A1F4900B0ABC4ED034A818119A4
E618F1A902315BC98F26775E59555A3DCEA1D0F8B20A9084920ECBE3F7F245AC
1182A40B518B194669D95DE968542BFF80FDC89669BC256C44CB66A2AB8CD7A9
E42C69956CCB6BDE8C09AD22EF3196939B3B84EB23A6E071A36D702909E019FF
058F27562441EB5CAE87A4407F67C4390810BE89BBE867D636468E73677B84C8
5A1228DD7DC8EADA221B1BAD5F43E832F20ADE7ADBFF170AB306F5B711816FD1
39B7882556E30F002977FB88D8B28826A75DE0D20354A2D41F2DA8578376F7DD
F27B0F59D4DDDF5790E11E3957491DC74EEB7625CA49FAD90FA47AD8E0BDE824
FF326A84846A47A21B70FA549BEE307F9C6970009F963B49A504F0115777826F
1D81203F655C242FFF15BA97E3BDDFBF435B10E74CE8543C98966223818839B3
6BF3BC63F882B0AD0FDACA8C56A570277952E1D83F18BEDF084D2AC004E2B09D
70DE1740D7D220E92B54D2FD0DDEAF1E08C41FD321A8D474982DD105B23166A7
AA9E0129DC88065B1E0F9382BEB4B4E1DAAE3EA5489BDCA921AD5A8175F2841F
9400478DFA99C5E5553F383882664D73FBDFA29BF32E52C28DCE80DAF4839434
022FA515679DBC13FE98968D2894DF5DD69C49BD23D00F5D858B69D1F220F968
F0700E13873579B3CFB658972098DC61F1DD580105BC27795DB4AF11A871CCD6
2E1B9AF7F0DAAD4CE315379A7B42CECB983DAC5A2B9426B4E5E0A7F7978504C1
DD7E30063AE3CBDFB24EA2BCCDC478AB82084FD30A4793F4707D9F8F9647B413
F8A5C5AC6D5EA0E35628CE1096A434FB8286F4617CB4D0AD30A4A0B255A5A356
25AA5A947FD3C4FA44B4AA80BAB44C48CC1E2C6D0A711365A37A58C3483D07ED
301A83D2650A2E8CBA9EE62FF5C2736EC82C1402959F64527F9B640619F112D9
8E0F4A8A3078C72ACF3F34AD855AA4008C96E30D9E8C414607C34E06E29AC5B9
2EE5DDB823E8C3EEE6A8DE228313D476A7F39B5DFBFBDEDDF7C45C1C88EE6D01
7FB4F7BB2CBBD5DF7F0CBD98DC287FA6940FBFE1B3B136613A3CF16634CA7B90
53D5FD5776515EFF5D37F8FCC62D8BEC8EE2216503D54D6F2032D3C2BF861E15
FD1B45B71576F15852EEA65DD372E911EF4CC18283CD2FF4196A3F1A9D81137F
F1820EC604D6C61AF318C6C5AB6DA1EDF305CADEF7CC0183B86D31310A09972C
A4BC37D110C77ECCA614D1A281EE1C2040B4A5ECB31A3FC61760F608E44332D1
D2C53C7891B505A3020E9E4915F3618588FCEC80B9ECC5E637D8D0F3C94B1F2A
C53FC46CAE0AFAA7E12266C212A73AAE60199752C042BD55A5DF1CD07FBDB830
C83E7832D8554AD9C9CAEEC7CED1DAEE622090897641CF2E5B34A353D83264D4
4687522DB290D3BA927BA315EA5D25B0D7B69350C6C180AB0C322B05E01F7C7D
F2F48651567F0C1B49AF3950E43C94D78F7B184BF2946B924BC4279AED28F3A0
17A7D8B235698A516D3FB5DF0B18A422B2410C385E7E9439C6D60917EB3299AD
E31471616251FA40C9FA098109BB31A54D9C03B2F12947E4E9252A0851B81C4D
F39E7FC44752504B589C3911571B1D3EC3BD1E1807F99CED1DB20270E483A805
CA2A016E7283550D1B1D35C226FAB63F983CED41A4D02A2F228FA9EF065027B3
CC69D6F2E278C0A2D238D3A37154B0D22281F62C61D9182A69657B027BBDED64
11E261E47620602F865221A534C5A32E2BF5B93A187911A146F2E96538B47DBB
7BFA7EF406FE940F4DAD17E6E4B80C4F031D71F65657C2F5C8233EEAC68DE8A7
E1FC3055C122C1795D0C71A0284F89A9BF04837F61C9E08DB42644A490C97D34
A5D3CEE475B8D578205005A0D68AF94AD27C0E855BB8EDB74775690A4EDD6543
BCC10CF13283D6FA8A7CF3FE6C4F96470A11FF0B0160D3F9816B13B0BAE0D8F9
B84C7631063FE658D13D108D6FE24A89799FABA72E6A6D1C943922CBE676C1B6
11A4106ECB4F1A7F8A84B2783C2E6A109C58D63FC0B74D8C8A1CB62D527441AE
E656D94B1AA8581B4F07B653ED6486AAE1F8ADB30FA8D8914AF24721C74B0908
D84F2EBB91144ED4BD7EF533F2584048DEE37E17CDE5FBC2992A6F924FEBAF07
B626F988599DECDAB43C931CFECF99FC6EBB72F8E542765C26295902DFF60B7C
7B9ADDB4858BC9D808B7F0909690CF8DFBC59A786D48B891937C31A219842A43
234425B4963062DB4C4E9F534C77F4243408805B5A6B8BBF428632CA4AC03A7A
E336DD181CE0CF3E742079E2919EAFABE16A63299771BF276EFA8D85C920F995
5B9D4E8F1ADFCC5C29AA89BF90C186C5DE7679906B2FD4DB279D245D27D08837
D3A8D541FE37415B706EC585C05804108C1D938E543B8B63E275EE85CE9DD843
0A8B9163144B77DA1A552A25D5E77E94F29CF252BE9950F4E627D5F72536B6F3
3278D4A45D10759F16AE42BAE8460865FEE84537F8EC9BF4813570E883B826FD
1ABF3F4E66DB6FEF8366E07BCF290EA67D39C9D81B2A7EA48E0A228FE3D5AA50
1A56CCBF229C9AF2537A8FA70EEF41096ACED34CC7BEECA4EA1F23B39FBC39D8
CCEA93E63F508CBE6722C11467A3D0D5C4C52031DE43C449333E4295104651CE
E13B821D7904653346067E971BE0042C571ABF40C3A1079A675FE4264B784D46
1B8FAA4CDE9851C4EBF69ADF51A7B68CC8706C08D13A44909D4C1D78DB0E0B2D
0E0318304B229DD2FDC968027CDFF65722059C62154304D6F9C3F06DE22914EE
928B7D1BF1FC7E74B4D882998D59BC086AA2D4EAD0AE39F6B75B5A3FB9994506
E21731E1A15F0F2D12F88724BA72898197A80FDAC00243A3038871EBD2F2BAB1
C616278BB78490CB86F552CBE5DD0862F3793D72C68AC16AF8E38FE1A523A5FA
9B0428745B1455671CFA1F6BFBCCF9CA23C833113C2948E7A6AEFFF1A83509FF
C559BB5EE7F92BB43F7F37A371E661C826F63DD0C1B25E34A8119E71EC82FB66
23C7B126FB6554E7560B1B69F2EDBB742F3B20D1648C151C37A8570CBD330A9E
7592A8607D2D727F3AAA0FF2057DF4E2A4C7D3B658C6CED38824A770420D89E7
F6AD385DBCE9C9A9095CF0042052A67AB804A6675BB9373A99390CBDFB715984
A069DE543E4C6ADD7F1EC7A15392EF834EAB4584679A43443953427DB13E6959
0F2F5061C99C6D00FA5327FDB5330AEDE19A53DE3AE092634DC6AEEAF63A5BED
990F8A117AEB1CA0E7F7DBE02CB3D86465F1613B976D1CF6F3A1E69740A2FDC8
062ACC45EDA6B863B60015F276860FB79C31D28F97A799568E66D0A8757B2C41
E939337B467303041D0F4C59390B2E41E5F298F275DCC699D27C459ED4D5ADBD
02539F00095D7E1872862142B46BE06513D3EB1A406E6BAA64BE795122100F09
C37E5D1834218EC1D11B031C7DFC9F5AB071A8F4DC08203821366959E9191D4B
289682D915AF28CE5858F83338DC51B6B0DD052A181D9133FBA50CF18F70EE65
C33726A0450EBA9D0E0C3662AF6C2121AB7911AA9880D6BB6811D6D7515888E7
199A0E632104059A88C9D85B19BB35EDF4AB95E1515BB2339572928BD5FE8CBD
2D4DAF55DCFE29FBC4C3D56336277BA0C9A889A129F9FA7052AD1420B8705163
1A808EC1284C888D78CEA2B4BAB71AD76289F5F4986008FA9BF328E8537E6C91
E11DBDD8447E1C9ACE18DB0EC3D5742C264C8EFA445C5D16C2930FB43669774F
A2CA52144D99EFA8FC427DB4128CD4C036A8C611B087335C780740FAA419D39B
5DD68EA89C95275F9254D947EB3683D0130255269B10C6CFF29EA0BE484C9949
96188FCB747618A8044E2E37DFFD2DB8ABB621B34DC024259340677095B6937A
78EDCF508AC91D4CEFD872AD73F50582DC8807143CEB9F109C84DC5DA30B64E2
E56DE973088A9D32583D6946DB4F3523902FB1781D993B89D5F56D79D5D98CC1
7FEE73FC3A7D1BCCE90179AE450829E228B4DEAD3B2B4C79A400CFF899AB26F9
048B0875EBC871AD23BA96F88CDA8B87FE5809A13889A6AC349ABB25E54ACAA9
C213C5DE2D01BCB9CC0D7BBD384D23AE12E289FF8FDF1F611F5E14D4B20B15A3
42D9B3B37A83A9CA39B5DB6C8316C51B70F211530A56CFE54D63E88169CF5233
D1A7B2388025B3EBD2BEE0716C3A2D589EBC7A42B3DA602AC4E2FD9C9052C922
711E44408DEEA1FE0C9FD50A39AD46D437F61F284A2EFD42EF158EDD71A1486D
4865D6B5E20E60F4F4FC3D646909FF1EE2D7573665E4CD8340A1B232CAC0202C
C35BA9BB3D2267C7E78518F6711633F888EBEF72DC750AC2CB362D528CFC8B2E
A1AE1C05456F50EED8CAA768DEF47FF85C4322F02D7F9D188C6F285C674EF589
251B0B913339FD701FDB281338D96704ED7ED908BC113B4275A24D058955890B
12CCDD5572D63688426B0E1E9A40D6AAECFA5555C1CF9DBEF8C04CE1E5A63F14
969D39B6DAE8A91F6AF4CD1E2DA89A4661DA34E272B6032C442C031F081F5DF5
858F4620885773D8A2B2F5EB6DDA74C1408DF279900450E4A3E80BA9A9B1295E
F24EDC3F6EFD81A741EF74B0202820516C4FB720687BDD915EB2396128C3B262
20E3075DA153D6FD36E1C05B855929DAA4DE694B6F15EF2145C63250B24B031A
4CF0AFDB225E91D99828B83BD90F1702D3906D45872587A3A116B138AD9627CE
E778A949C392202823C670FDBC56F1896FFFFBCF52C4B400F67BA36B5FCE44A5
F18EEB8ADFC088C99DFF8E0A593E81A5ACA2E3693005F723C7D3E0AE2BDD3805
8C6007A00542DEB2539709558A88B21003CE4B2C7817AF207ED576B25A41DEA0
FC55A459BEB00ADB01309B35920F04F84B7B64F95AA99EBCB843A06CED900D99
97BEFD7CCB9F4D85876F10160C8D63E2FDE82B7A8D945F37CC9933ABE0FD1D76
268296B1A5AB06B2E814691128771694224781171DC6266BCC290FCE1AB59416
85530368115BABD4F1DE45952918D1945D51EB713C283DAE8EDD559F437CD886
A4B1DA6120D685C284673A3EE489FC1AE4297A3623B339B7D886B6B4B8F9F4A3
7BF85E320A52FDC6323B51879B98A14C33C567BC069D9B44616514EE1BE36F90
EC5FA33E1B6B0A46945D876EF0085E74935DF2560A03321861A752E59742B9FC
5C501FBC64BFB1602459885B63873DC857ED37F8BE1A9C6E9517B9BF5A6161BD
DEB6DB0381FFB34A8A96AB4AD48BEC40D4C198ABC599C3758AFF638AA75BBDA4
8545D5F95FA426FB25587301A43E176F6CED7851E815AD907F2443E70740DD2D
4FBD5D978B9B37F59D6DCF0ADD0F90825DD23558FCB858513602C8BC82BFA383
7AA6DCEA4009961D06DF233C5381A7F9541259926446B2F03664BC5978A1B6CD
EA6EBC9FE6100A65959513EEE32E69D47B55BAF30A893D77142F943982019C01
715CE29923795EA01C58A798979939B507C5B29A32881877EF7EF0C5CB3DE591
6B9A6C3F3FFA847F396A396F078860B59850BA4CA3115CA2376AEE6B30C05DC1
6F9DB6781ED0F9D45D10E096C33B1B7CD12A9D57C6E49AD833C4B093DC82811F
16B3BD902BE764A1680831EC5A6C1CED84AE0DC0A65678EA5270BF20931E6409
7AA44EACB22CCA11098F8A51096BE83A1ABA56C9EED4195D5CCF24FDAD92E823
C439DAAFBFD652157D728F2754F28304710D3CB33763156D76A259D446647A11
493FAC70DD28063A4CDDA162F72542368E1AC2826C4BFF7109208F66371910C1
068F21779FC39DE03AECF1C9FB2F417930C22791961D801284DCC89B0833B6A8
D63F153ACBFB7B7D547924613BBCCAED37D90BAC5B0264ED31C7B9DA5A2BC620
9B20CA48424D0FF58905BCD6190BF4B5FC6ECCA1BCEF13426920197CAB41C4E6
E82E8EE7BCB23C6BA6F8B58001533B225ED721D6CE3D6E89116EC33CAA6E905A
649F8C6A1AA187A48E20DB864596481976216DB78F0F57543DFAE3CDC0A6FC77
2CAA49442527A5D94DC54BE93C875690CBE52EAA4EDD9F2A511361BC0F0807EE
96AD0D26B62D809E82EC14EDB158EF48A748A6FE0C3A7EE5D4479B35425F35AD
3EC7444F6FA75CEA5011AD571078293448A33C7647611CAEE87974B0A756DAC9
4E1BA78DEE477FA59AD50BF5C52E068A5E044A4A4994D5B24CC5045F768A3C51
D4F65E2A5AFD271A7666C6835E28C60751EE528C0742433165AFBE71562A3016
F59676D56B0B5F7E4984D664BC3ADDAF24B4205752EE21D4B57057A943018466
09C3FA5D2C5BCBFC22A643586BC9E7A965DC34C0A7D76A470B0602AE45106417
0701ACD2C764DDE218B924E38B5A13CB82678372E743A8B3CC300BCBBB878978
D9847F0640A031D5E76B5AD07699C3B2FC6C1DBBF79938BA649C152FFB2B5BBA
D18B9570670B99907506494F362B124790A17D4F415D8447ECF70B67DBD46643
91AD465A1852B804CBE65206EAAA38FFD2B4180AF00DBC6291C9474BAE831466
A9837BEE55AA0E15812D87E7033BF2CEF3BE10ECF668D3B57D6EF1D4335152CB
08DA4049A65A51BCE4BC82BC80EC26012417012D6C86EE5293F1343F6AEFFC30
998F5CE34DE6ABF67EEDFF71511FC9462AA30A36A54C347BF852749FF906C73C
7350511DF420128BD2E6441C853BFF55899534D93A31C4B721622A9AC308CC38
057091623FF825987AFA03ECD117ED711F193BB07457CA841A6CBDDAEA94E3E5
921B7307A98A7A6FCD90CD09AB21868D1562FB2992ECA158DF5E9E5E5C66D549
EDAADEC517CE9D10A93F0A132481B887AF55B32F5871FA9FF1605339B00EC64C
E10570DA68796CD8EEBDB75C548442C10B3D8B07698C3569F4D385DBDE0267A7
8B7EF2791FF56DEDCCCC80F2B114F08F1AFC29B5166F9CBB2CF7C0716D862195
B39BCF6A81928E3C83497F03B43B0CE1F73DAA641E19DA487A5238FAAD459330
28244382F21C57CD2364EEC72281433B4A591E35C1AFEBD1E40431913A7537AF
CDEB0201EAC9CB87B28E1B2D6A24EB2E8FAB1C8967F7CCDF91E1B5FDFF977F31
32D31D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A1DC6C79583CCAAF195A23A61E58F0894BA9479FE3F672B955E989F0B5
3FB07AB5935C31AA8E4B23C25A1C789D174306E1C8264BB9CE61C958091ABD31
3BE2F40094EF4827973D91AB46F5A74BFF0E16FBE8A34B8C4289E94094366F88
EB1B1F64C0A7322D7A61A285EABE5C1F7B512ECF344C63FCDE19E3375F56EFF3
E1D34EE6461FD7C18708211787766807025D6334D2C9BFA5D0D5F1CC6094A52E
39ED1F7484EA1F0B1544A1A2E619EF698D6ACEA72128960ED9BEDBBC47F603C8
E5E072492ACB74DB2CC26341384034D09DA62D4BC311B5F3BBFFDF0290E19315
2163CDC72AFFB75DBB24CAEE27DCBD0A4A11A72A3BDCEFF2EB4E94FC6FE7BD60
8821BE92F6195A9873FD4F01E9CC2FE89393064E4F41339BF93BC215333A0DD5
D748696E083B901F3E03D1FC1CB82E5F8AED3FCCF5F4C7169F17EE6C34B3A3EC
2F7582701CF11DBD09185A8B4322F64065DC18624530F2BF04F22C2036A0B829
EA126AEB4F7498C35F2B47B8AFD3CC5F1A04561031EF1870DA7A2A306E1930D9
C0DBA8A392D62280C586E8524C541F7A5603FF35C1747DD54D4DBBCD0CA6F7B7
B176E4EDDCE736A398BE4F026017EE84F9D61A4B24CC6EF9E911D15002575BDF
8576F059619609406F03FCDFCAF110EA48D5194E309527733156C955B1A6E1B5
523D17302C60A398F55318078681B3D8C5239BCCA9F1DDE33854E7AD76EC3484
CBB57D1BA56356BE4AB1471FD5F0B177035D277E78080F358FCD4C1DECDB5189
69F404E24C582927E6F4368A555373323E5398D595BCAFA5649872B3B27EDE62
1642FEC11D02292FAB74E739BD1A797D5A8004AB04206F89E9AC84F04707CAC1
AFD2C7C620733DB6C61AE4FB536ED2AC67A84774B1A4F72DF54647F1063DFE2C
BE5F1E352CEA91EBE9F5BB7B032A886D05655DCCCBC9A7932ABA92BDFE518F8D
5A0AE6A6525D7C6F54BF76F8321B339A7ECB2369E200B09D8A6AB86F271A92C3
08D3DE1DD7832507492AE34743D1AB411353CF1F3A9DD0B53E12469A20CE3D04
A2901EA5AF1A9844167E62367620EE6BABAFF1BD7004DBEBD459D76EBB7B743A
052C6623EECF88E9FDCA487AAFC977D031A87D68B44195FF9C949643CF3CC6B9
6A01250FF4B389405C702A336CB4E518E009D47159797013B4BC3C662BF268D5
3A04DFC9433A96B8337A0D41B2D6959B405D3329D856BC6618BA25F758A2429B
E6C1D8385540BEB9654D5B14AC3AF86BE421479CD0764E20C146F6CC2213FA69
05F4C4CBD40F722B1672F2A2679A5172DE8EDE01F235BB7EAEA055366D6C8F32
F6F8598141C96144140006E1A2AAAE223C3D3201E7F514BF44D919853348BC45
8EC4303734A50A98E8ABD913D299690C971DD2A1FA54953F355E51ECB55F04A4
F3C88743CFBA3245DC2DC23B86E223908060BC9D7C25CA5B90EF9EB16D22
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 49 /one put
dup 50 /two put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E6544A8E490800362539DECEFDA209FBE1774B790CB6222E100903033A4CA73E
F0F4EB1F66741F359B651D485B87864B83A2FCCAFDCC861D7E34DD6D3E6AE7CD
6EA69488607C212ED00D993F9C24F612A61AD8C13C202E9DA91CDD15846EB4F5
FE15650CF4487A938A117EE85ACC8102EB37397718D4F17E60D3CEE08BE4BC5C
C93E8677D3A0A807DA8C72ECC71B26B24CD315BC351E053081BEADE92D2E498E
8A4CDB963B1104272310678F74491DA1572344FA5B2B920DC304A252193F1D93
5ED5268A6AC194D21A19DB87C73771A6CED0715EFF43475A0FD680DDAE896369
D59A6B8297CC9EFE00FCB9EFCA2D26256C58D6809FA22A0DC3112E7888A49945
0162B7373CCF7BB457EA8FCE8009D30DFEB19A02D18CA44689E5D8C34CC8F267
CDDA36431BC83D98704404C2E77DE570C7704166CD3DD128179D772063505904
9FC2FE5183581C921EC9198BC03CE04A0F0B2113C7B19A19D7E1DCF6AD566401
52A5010D25C836FAD8B8569DAEAE65CEF1295FF2EC1D6F82BC0428A071213C63
F9E6981B7A7D02A567FB66A67AB2E9556E6C9AE40D3CE74A353A702BB017E760
AD9AA7BD2198D8808551147686B2ACDAE4BF534FC07180E277C771BBC84A3007
94A6EA81739C1FE770576F4593A1DD7ACF15A1E166892EF94CCC6BFED98F0D54
D93AB3AE38D3F24C63EFD772D35A49E34D4359CD47A000608F799114BE5D3635
9D09FD6D5B025A7B766FFA65AEA58C77DC4ED68C27DD847573EBAD6AFB646F54
CEC76AC98678B54E6E3A103EBC0F25C44B4AE7D581455520DA75F0AA2AD71C12
CA19CC7AE1B8F62F15899242621F17260A5F8DB1B789A7340EC576E93E5592C5
03E4DA37DA7FABD00C06BE3B854DFA815E1F376539ADACED2F63269293495687
A19CF128855B9566EB6AA1B52455A825369304D7A2D66EFCE4E4562017EFC2DD
684583B0D2AA224818AF883C07E45A23A1492D9C0DE6CDCB4BF8E492E55C2617
EBB179163088E6B481229EEB036B8BA9E8074EA24C507E8E901C553B90112074
EEB735CD1C98C58167EAEF752FC55DEF59DAF1DCAA3D182F7DF29B86CFDA1EC4
1385F9AE611CE936660C98E2B7DC162AF244DCAA4DB245C979350D08DAF7FF8A
26FD13CFA616F122A713CBD53A991A9BEB6007C1BF991FCF900B93B9505F96B3
68D69A831DC76C8793D93F810756F903BD20B1D87332C22EE7921ED8DA0725B1
560B30D6CB3742BB96926D84F62647CE4117F0ABDD65F4BC4C5B3E69629B20A3
63C19F8C64E46E52AC7F288537E069B5E0F5297B06B0AE29969C307A2F1E74B9
E37524059FA24CCF65BF847E9B82145A1D2FA67725C19871CF8D69908B6BB9F3
C13DF933B18DA86668D9AFA525250C4D800507F81F660231D0F261BAB212A112
3C8237D6B1AC61113B4EE3E630F3E4E9ACB537EF615242BF1118C6F5B23B49EC
13A863220F48A387E54EAE8EDE3586980F9E8B253E05B839B0992D13A7CEA3A8
E167E8C0DA8A4C0126D2DD0BFA66F42F7BC4990123698764AD0EBD9F48FE7F7A
B234CA993D788710BE94FC925FA7F8BB8B5079C2EFA2739EF8DC360AB25C4DB3
8FAAEEAD1F6C64319CDF42738E078510807C4FD938F071DBA3D97E97722678A3
F50528571A4396CC4B2D2E951F0A31177410D5E3CC267167E1F0D6C3D58A3EC5
E7E1340F5A4A01CEF27E1F25F43B0AAA25A78214ADCD83861917B5602C609669
49B0BE0C95F4A64C9841AA22A015569E5318E651C12B939A577D65966C86BEA2
3EFCAD388D8766E59BE53EDAB3DADB7AF0EE76D908C2C14367FE2CC864CFC2C8
03E5C02E9DDABD9E64B535755E6ABA4046D8E7A7DADD0C48DE6F7712343F179A
454722A87DE45738A0D1D73AEFBC7B8EC7417B51699FE89A30334E76C71F0324
BC85217E407A14CC1FD99AEDDC4ADE3AF428769EF4084C77443B6621E98F06C5
4C43FCF304FBFC015E6E449CAE9536960C7A5EFC12BA93B576C638D810DFA628
4ADBB77722F948E58F1FDA38D8BF99D23678CCDC32C8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 59 /comma put
dup 75 /K put
dup 84 /T put
dup 86 /V put
dup 97 /a put
dup 104 /h put
dup 107 /k put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A90B8A9EE5C613CDB822F07B
115D4C174FB7945535F2F9C2875C9675143B8D98DEFD3898170FBCB19B4C29CE
1E6883E0F68B5D42751BD7AD09E3EB745F0A6338BA2148B769B5E1EB21109414
C1615EC1A1FEAD5831938F74E26E1F6BF51136E5C76F823D29D35078412923DB
B3A32176ED7935058ED16528D28E50E37BBEB1D1554503645DD6809FA22A0DC3
112E7888A499450162B7373CC8855953B351E8873A4D7DCC40EEEE5A8A2D00E0
EDD8CFE7153824BF94833ABE10FA64768E457D5395519937705DAD2FFC5E71D4
521F01213B7DF82426867DE914CC9866E428F614F18078B4367187426E2260AA
AD0175A790807954305301E007D82B7428552ECB4FF958E0BB83861D26C4124D
84943CC2883C985ABD538650F1F7C6C80A58014CFFA4A3A5842C0C10EE7166BD
8D3EDA572C8F1D9DBF8587666B3DED2064ECAF93B1D40D5CB1BDD4064E408CE1
F60B547041C47FFF0AC84E09FB2E97A24E8BD94EFD5105EE20AEE18AA782E327
489BB1B44B2F8CA7802544EFE32355BC5B78F7AA4FAE1C6DB01941C541665D55
E66FA98DE54F758C3FFD372A07092BA745459DC70691A0EF6D671466E05369B0
4BA00A83140B07BE19BBA8B687B034EBCC2F7BA5DF50A35A7075E01D8F04D288
A85B776F447411039BDBAA6E66FD92D34AEFAD55C89F22FC8115ABEFBF6A1A6B
8A84A49B799D9450F6492565875ACFE4B5E9A724CF3D6D7C57FC6F243C6B3045
2F257C19D36F0EB2462AD7DB41D1AEDF7FA1C335A04B20516732E08E338B7675
4F85068A66AF2BB4CD666BE8648A8A59E198869DD0EFF11DDEB9DA98EB9868C5
303EA7E17D87942BBED685CA0A4DDFBA209767D3875AA078212167692D78B3B2
CBF5AD4EBA47E0C5C33E9C2D426155DD6F3E6A3F5662C62CCB358FE74A84C839
629419850B0677C82152A2AB29FC91513B8E3C0EED1D79A67CC71DECA3D21A59
43CE039440294FCC329451534CDB7D2B7CDAC11604D61B5A25FCC09CCDAFE638
51D6E520330C3D26C7BED2AED9C38A3A86FFB193F4330A145379EFAC70686654
E994CD309C54ED321994AAC050AAE430E70788EED8A9EA9A378CDAF47EFFBAFE
6A04AAB0DBDAF1D4F030E713E1374D09FEA81CD340B6F6F23EE6590C4D9022F3
490E87E6D9B298D9A099CDFC9428EE7D2D7A2E361AC9F08A1EC7A00608CC18F8
DCAE069BB6873996D778BF4657581B8D17AC88386A791BCF2166CF5CAF390896
1325BB83988C742674B9CFBFAAD80B8A9952BE72A03434C505C7D52989B1E258
0677E4D1682CCA7DB292EB4C1DC783084B37ECDE34BC7A2D306CC55558FF1E87
ECFF68CEC681F8FC387FF7E1F86FA480A3A029B1D98359A76BB0F24FB471B3A7
9CA147DD6AB9209E5C74A2039C391506889446602840BC40C312B9A00102A372
8A05E5AADD2383F53210E625F756BD5CC175037FF71E9E263760FAA9C07F1043
AAAC3336EF7D2A221F98ED3CF379A8C6CDE2FEEAC619DDE1D82EA09362B46A0D
2D57F3D5903CDD0C1A25DE9BFE3EA928FA9BB2947669A8B20FB108D7A300DC8D
A0AB2AB95426E69B5B584EBEEF04D7E9E15FB14393DB1612F916D7D98FDD3256
3EA0D039A47B2518816E2080E0C37F115504F21E9A6D280D96A1942AFDCCB98B
C16089304BFB84A4C41CAE11053642948E7822C2AF8661E022006CDB62FECD1F
A049141FEF2CA16FED85D86FB6F61C30F587405566E8A738C82426E20E137B4F
7C9524249DD2A5152C2FEE9385957C077B7FCDAAD22275FB3FDC2B1EB7F40DB6
0EE255B1E557B715A5DD5742479AD7179AE09269E1E152A625B003C61C5ED1D5
B04CA0C3839800CDF00783086212D104DA88996D90710FBBA001DA4ED84A4F98
4910218E0E1F25418F1EF4A30AB4CD7A94A69CC2EB6922E1F92269802E4F6428
663DC08983155608B042254C1DCC28CD2F45F4F474719DDD0C5417CDBD089CA6
3088F5A79C014CBC5D5D5D47B7A92A7C3DFFEEDD17BA8FE36B49302C10D4E63F
0BE559BDC894DD452E7334ADBE04CB6FC0E76BDA962897D0CDA216E8EDDE1A75
BC69ED60076625E62430D6BD1CF0EDC75D0C35D83BE3AA2D908FCB7072FC7347
80171702BEF92F4F3AF8351788063B4FA4F638C7A721661DB266DD98D326C29E
F4854333C7FFB8ADB2DC974EA1FC27BE291840319012BBA43600AA0A107888FD
21E6F93F4E1FDA1057BA49BB36F0BFC8E0B3508E09BCF07F06EF7C527DBB090D
3D71ADCA8EE402129C9EB545E1DA050111671985CDA6A38544BEA9AA2400DC16
056554133F0CBD2BBEB667978E69361B36789AA3303B2EAE6A8B9468F170FAA0
99648BC3FE6E03C8F6338BCB621D4AF915C3C57DCF67A19EC00D2B1913D38752
73ED5F7EBCE7959BAE26B85E51E03794A1259BC1F0E2583C55AA3402337C6C52
E154FAB7FED661AF599091B6CADE8979AC32A7AD7184CF8C145196CEC5D81142
392CC734D3A2F2EE7E2202A659BC31AA02524012111D3007C9295FD1B542486E
42F609C33767EC9213386BBF14464FD9E036C0D1967AA7C20C43AF8784413675
6CAB12EF2314029313B1FC7C64A7BA0ECFAAE5466CEF499DA9557A4DC5AE3023
823650DC215A43E4037B8BDAD0287D5B5B08DDAE287F9C507112FE3CD81CC1B3
0337CA98A70930CEAED5835D3AC85A83D41F756D42375E474E5FC3292E633C95
201CF8CD09FCF62A7A6DB1D8ABEEC3A76929806223A058063C648CFC7865BA24
85629695BA6371C184C034490595BF3E6FB4D4CD43C4D490DF83C167EF40638B
0ECAC53F304668C46FC5AC6805B6C5D26E8D9CCE15A3FEB2960A28FB47171D46
54BDADB939F3565017B15392A1FCB723C8BCFCABA592FD8DC43B7173C4225619
CEC2D4DDB749B3F2350A457B674BF434FCF0512FCCC6E6361FFB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY7
%!PS-AdobeFont-1.0: CMSY7 003.002
%%Title: CMSY7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY7 known{/CMSY7 findfont dup/UniqueID known{dup
/UniqueID get 5096648 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY7 def
/FontBBox {-15 -951 1251 782 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY7.) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D9DAFF1B3EA76067
C5493B69F73B89C8B61804A34FCEC826343337CCDFFCE17BF343EA8034BF95AA
14C56862C2C052569AFB236E1F1795F05150C8F28DFEF6BF4BCBACB678D00036
30EE84FEB44B1A8438185EB45654E6853C1159B073E54292D135F0961A64E8A5
AAE49C4BA9C44156C123426212120F99F3E8B7425752A5FE384AAEF755A8464B
51F015F9E2967477D57B22627D75CEF8AAAF0AEBD504EB46D0289DFC8D86C972
F042BD88A90A53613DD93D8A7A8460E63D85F6C15C000C0AAEE4BD5130B6E668
8C9B3F3FFD804745DA1D5EC0AB85C96E1724FA67F9324C59275415182AB48D57
9722DCF602396AD4B5C075A5A89A5D005C9FE11273E5FBDDD1800F11BBDF6AEC
6711C5633A73AC5DF038BA521AC492E138F7FFC7C5438FFD32FEAA1128C66E83
0D3AA40665F05E62D7EF00B1B0596162C402A34B6BAE6300D43F3DFCC84860F5
C0F0F1CE28FC60642BBFE9BC9102E80146774CDC88F9C250DE762D24A3484BCD
1D26B6D9FE981CA5AAB2A4BEDC528115043DC18D7105735D7528C2C5DD89A812
75B5D7B2E5A586FBB0C061E708F92C1552F64A296490BD0F20243986A4707FF9
8AB3C917B8DB92F19DCA6B9D4A1DB57515E51DD85D5C9D2CAF7A036AA3F9E9B1
5B5E099CC05A9126AB274C17D75CB4FAF78052366D2F21EDAADF84B22A2D645A
3E65C4BC0F540B5D9609D88DD0E4CBEEF87C16447D43A5F98528FD45ADD10DE6
41AEC411FD6929308F0E4F48A8D9C9EE386E920D41C1CC98A52073011DF5BD28
5683F280B5CF7F27DC50930C81D344FF5A8A9258A207D2531AC21A735B14155B
C22C752DD22AA33C52D6D4D053B3E46FD4C9129068DFF52695A3A9184D04E8EC
93696A3FEC3AEB3814D9015EC14C22EC3ABD5070E8C28A3B42F5596D948212B4
AFB9978A0A361135C9E18CBDC98E0D1E8BDC17E25DDB3D52E86127E5AAECC55D
FEE61693190E378978EF1BBD4D1AF005D511C7607CCFA4BCBD3EC427CAD82809
B725B25AE8A03EE88F80A7732A571A2317E0B6A0D072EE8CE2EB9E033CDCC899
B64CF4FA1C708A885442062F08D3D8DAF44C066EE278714D1486EB709D327865
A483F62709E89D08291F044325208EBA758DD459481334F5D9AE3BB61B3020F2
A4538CFC2C94BE84C920BE80806FDCEE394230730E049333A7E16509207514FD
695B5E0AEA9E4A9737311AA0B33B15F6769FF865D1ACB63DC6201C3F1062A3FD
1B446C1857460745917A36289DD57C94FE6240F4A40FBDFC10E91B91B79029D9
9F1B9C74E8E5AA011A0ECBEC660230AD5929F01D0325D15FDC0040406F124021
02AE176F4C98BAC1706F03C2B5B40F325A50CA4683B2BB4605E68E72D0CBDC2D
96B3BBCDD01201B650A7E7744D58D1E36D81FBF72E0A875FF29B4C109A1950FC
9621B18D58806392EEE9841794DFD39E3C4E20D45384FE07F9D445F143B922D1
AB350AA6DFC51FCF767B141A392D6A8B633AACBCEC9F56A0CF40AB08020EE63E
08CC0BE01B40E86388A65F5869F2F4D022DD4B912031CB8CEDEDFC2473772569
5B28F66AB74CD7902A0061AA3547D13C7F0C6EEEA7B0BD316694A94E4D672520
EA044AB28D8D01076C486CE456EDA1811F7ACA75D27473080D27D3E681E35FC6
447046120C6CC4C17674F0F051570A79DCA74848F3F300B58B19018430D99858
CA5504084D6BB74CFDB635B6866974A9AF05DF201C69352B2663B0623E7828B9
5EC5FFA8D8F10A7C28000F8C679B180067D5481D6315BF1C4194EB171C8F3CE2
4CE319975B9E948D907F9F7EEAF07089844391555F329E331D52FF114668B8A4
80704B3C6AC0CCAA2F5D043CE44E65EDA89A0CA854CFDCB11D549B7FA72EDB90
D35353C34A771B1FAF96F83FCA5258AAB65384BAFFCE448690C1432A1F749C20
5817205185F973FA098BA856584753E75EBEBF387FC155202885F5B67117DD7E
70D1CD887183C5573B6FB607D4F6CC9F8B94B09B3F3AEC2EF1E6A320CF6D0112
63046321941D1FB3F2140B59370AA9387E24D579D389A166A10C989497FE9549
34E1AC2E546CC06C5308460DBEF3E1AEEB6CBB0FFDAC458E61DE3391480CF5CD
34A647D4DE15B81131B7D1F9EED4C6837A32E89B0EAAD6A05F5F67518655E5DB
224D4833CEC60D5DBBDB8A03FB1A9730589BB4F0FF56191D17E73B9562E0C356
B188882B36F9505F6F42EB2644FEE125C2A7D12227ABC8ADB924E88B0A9E8DC2
79762523B0B88DBBE6AC7968A46BD9E9F0C3F03F5F64724CA07782195F01F130
30DBE895C212E0EE20162D863F46A674D85232FA0DEE69A8DF019794AF6873AD
9CC2A5EEEF9393313CA519BF95C08ADF7A75B6F53EDCDC39851D20E58B97CA57
A7523717AA1821DEA94C8A9F8B82346B16D92D15AEDC16F0011A45A44B09DE47
08CBA46E8511D0C5CC83F952EEFA4ACFA7F3D7FA5E113EF6B70E5ABA6F1AD3B1
E4D3B15AC6D5C3BC70A3946F411A7D965D6FA9D7B6C6ECE19B2C29A2FF476251
EBF0CF3BF658A1D896323706172746F58B2DE49F8B7E431E20304A42694CCF73
11C4E9E96260CC442E2938A1E27EE6744C7CAB01634C8210CE40488B9CBD757C
4277B5E3E43C7560291D945F9128AF1F85924003418F96458ADDC5BB8EC431D5
AC9093D20DEA69B92454613BC1A82DAD4FBF8E56084494D9D2FFABD82A7C9847
171FE36B265B546F3072B0923840E6C6BB12CA53E05A99F0E8FD4F5109782746
7CAB9B35B68050230736AE624B7862D1244C7D9BE4D1CAAE21B123D1E8372377
F1FEF269A9A2EDF02CE0CC8BF92FD7EF09556987B8A3BF6D8C0A663DB6B9742B
E9AC61A449106AF1EA7ACAD40AC6F59427CC51865E6A90CF2AEED8D6037BA70E
4ADDAF622CDE877C98C3B2006B4721FC9BA18E30F0752BD4ACE36221F5CD1497
8FEDA5D643BE2EE007970A68E53D85975116E6CC09F0039A09EBAF0CA4B0EED6
A485CC0B69E526033FD1C1190BC5686739CE13D1AE8EBCABC01FCFF26141867C
44ED291196E546369129B9F759FDD7DC21BAF0A528FC34BA9FA8937813953644
C539F9DA4E55E83DB3D6DA309C562DA1330B157957B18F7618544AB738E25F16
F0517CD13C1F11BB8EA056BDC575D77CDC526EF497639DD89C2098660C5C45B2
D7CF715AC5E76847E0D3178360DAC1BAF6ACAEE72453B845B9F86621C166857B
029CEF5AFE29D1EDB4CA3AD7D008B7550A779E0066D7312DD6C7AFE1C0BFFF25
7B062B0DF30032EA2A2FE3CC46C96A3A0BA1888D1D2B05424A59ABE3EE928ED8
B67F507EFA78AE128F58B54634C7F534B3D0F4AFC23E38FB56EB39CFA425FD37
848545EAD03EDC5A9E796CEFB345F527615C785963F536972EBD9CFC4A6A4A07
5A31A508CA147FBB762ADD198CE36DF86730FCE2B643D1E7DF0BDE800DE7AF89
44A36B04193E44231E08919EE91A8B559646DC4DFAFF0AD891890A0A88FFA8EF
B066BCB7AFCA409C51889E7FEB33F19A3CB1268BD0EA74AF29C1401BABD16F87
ACF7DD65A8513DA9995C5092C36A774BC4260113360D29AF7ADF5D22B5B58E7E
A9BEFC33B9A91D2C397B27A81087376CB623318A8362C3FA9CBE3026675723C2
E711910DDB328E0EE3FCE219F44FE528B70E58B8E6CDB4AAB48237DD933D9639
E9D4F9EADAA8D46537D964D75C27F210B0C2473CB60D65F61BBD91ADE01576BF
77C49E31936138B0FBA066BE910DE1B1F0E4FFB5E81038E8656ABFF08DFD923E
6BA2AFEDCE6998BBF7045393C34811501586A4846E5B942C8E99D4C481D3AE60
2796ADBB5242D59F1116EBB828014BD903EF58B223DFD18BFBAAE4D348876B06
CAC10B7AF0DC270E6702A3F75D4DCEF872F2CDB9470AC9A1DC1ABCB55636D26F
9CB6BF27A0DAEB1F62AFEC12F55F78C9B59AC6DA9DB4B45444B0C582DB4DB8A4
B31EF4AFB77988E92FC0B257374B4408406490D9AFCC495316D6C08BEC9A76C7
12371E14417711EF802FB7151B3F6A2580C97527C9C3A0FAAB8D62FD992AA18F
EBEB36F7910186CD5F70A55DFE932757C299D9D2289796769A00A0C6ABD18F82
E0D4E95D6477E67B4C012DBBD098FE20E2F15C412DD2AD5471A65EACE05B3A1A
0C9C430BAEF4887F2CCE668116B87FFD9DAB4B9B3605CD26E6B12488058AFA30
8843791A95BB322DF5C47387F3EC72343855D6B23D72144EB5EB5157B8B238FD
6C71DDDA64C9539F66A7DD569FFF43DBE4A8F0608A3CBD354DD9BAB5E3C756DD
92C3C1B3E169D86A2230299432488BC04A87E08A80809F9968676DF9157B1C91
27C664ABCCBA9997FAD8966F766B325086899D1FE44581FE07C97688B3E15B0C
234A22646C32BB965B9BFD2CD34854D1488AAF021E169BF9CA9665CF040E25A8
16156C80A2F47397CD370AAEDA731E0D14FBEE1E51A17DB972D96DBCCE33F937
5CDBF1A650BF1D3536BA4CB7A1CACFD5CB457E2368A660A62AC26E64A631B2BA
6B08EBE42E02D9B1B2E95BF9F0A6B59C96A122968FD46A4D17BA3D018CCBA0F9
80BA3C1E6C683111AFF79303CF64F1D2CCBD7571C6E09DD9B27B8E101BE219F0
E075880A0E367885AC94143E777DAE455B990383100EADF786300602C2CE28F2
4F44662FDF03BD39A5181912D8F1243C36FF88882CFC4B34C1D4EBBC01D96A7D
9CE5303042D1B21042E4FEAA455F22A01333FCAD7E4AACA5D3A5386331985F6B
9B247EC6310BB07507321BEF3E4ECFC3B915AAA6E029B3999644C987640863B0
5DCF58CE479497AFAD1208FEFD1796E74467E9F7867C313A3412E6923F4C9144
C69EFA17965056DF043DB465BF2F1E191706D3AAB47E6AD5C9767E4A73B29F2D
E2E579D0262237568F82B360ADB6D0219B7535EFD02DD0688CDD23D84FC4F308
5D2D0010B1A9F4F0321A00C154672D21708B66B91ADCF98BAC7A2F94848E9A4E
86CC82EDD0399BD9F13E43359E71F80086B9B0C3B6D08831D4479ED83E7892C4
90C477BD1F06DFEBBF60F26516EECDEFE4787EEA8683754F2B257D0BAA607DBA
35EC6D1618C2FDF3881827F92D793ECF152D761F2423A96210F582DC9B90120F
26A33025414716A5E6F56D712E31BABE5047EC4855B767AC63D793995C9E074B
6E35C7E5255FBF4C3F17E7AD7B2A6C5F7459794FC94306B581536910F244BF5A
3158E821CE75F4B0565EBE985DF24DAA92F9C1D848EEC6B88E21FB6C51125872
1752F7352291960E5BD36F78AABBCF6DAA4D07AF56E4B6058AAB13D41BCDAA14
C0D63C6807FCD0E2B4B9CC892F224843173A75DC53A8F0FA396959C2E2CFE3F5
9B1C8B62797F34E7A0BFCF0787C73FEF98442234A617CF161829498035D30B29
ADFEAABD0B496E8A2E764D22DB7737F950FC5982F1C5F4FD414C1B0202F40FBA
62C81B8F0E836CD73D79366FD62388B437B81FC673442EE34BF27454F72A08F3
389E60CE28A050601A42FB4491C60DC02EC008E6B9DD2495522BBEC7293E2923
120584E88412DA7137397B41A28706B1CC6BB0C80709A2A4BA79822D245757A4
3EE454198942ED2316FAEB981F7615E642167620EBDDC5B271E273216EB119C6
4F2F0412F0BA6E3BA396217597575C6739194E1F839232FF088FDDFD3695A5CB
9A0E220389938596D8BDB183138E1F73F64512E4FAB5E1328F9B42364E3113B8
004BE2CA0B074EE271BBE0260D31CE555D535C16EBB528747EBAFFF253E659DA
3A377CBE0B296276AACF0294CF90FDAADB4EAD5E2F600E5B2A018DEFB86FF61C
84296480A425687CCE37D671472537E897AFD4B8C6A6175E1ADDF9AD24DFC5C3
A73E18AC2D9B28BDA2F17D51DB3521945850DAF0EE48B0FAC271544C1B4F3B2D
53BFC8DE32BA366FB1FEC0DD6C0B1FEA374CBE2B96F5B235A1D83A240DB442C7
1460980A3E5B96AE3D5784DE2C2DFFA671E0A856DB2FF4130E5905F3D5338856
C11A468D867D0C6EC585F1AD3E7164B8598BB59973B9A952FAE819F052A6554D
EDC342BCCB0525905D1D27ECB9EE43847B69AE116F494CB2DBBAFB2773F1A3E1
C75FBDF8D66FA5AB4005757D631A0D9424FCDA91A1D2AC6FCE7CC7A23E84C65B
3E92BC684F23467DCF8521E0E27CF1441C487EC6E3BCA0AB54BB137E83776009
833D772FD225E88A8BD992FD69819B3BA90BAAD1DDF16E4326190CC4BF9C30F2
AF7CA1FB38E6387D9745FC5E176B248B1581BF7A4CA2FCA8E423DF340EAE29AA
7E07A25FF838F67378F9A6A9A0B404E01E86E64FEF71DD3D540D4711AEB1974D
E2E0D485DAFFC74BA6B8E9AFDA245BC8997BB39BB6BD52B496A09C68F7A8E900
8DB3007643416040FCEC85B407EA0A946827771FBBEE49A3DA5542CC5173A31A
0280AB8E922C23C1BDD88D70627EF124633C318E7C9ACBC14AE216BFD41C0B6B
3A0161757913CA1F7B6626963C09936A52E73DD9B3D86DEEE73C0293A646FCF1
21D4C33DFF1671DA7A53E77E20233EDE51571549AACB7968602CD03EE67ACACA
B231661CA9DA2BEC5795A83DFAF675E9B052C8BDD51490F7874C91EF5ED2E0A6
BE9CBABB98A950F7E55DDA3823036437C11F614E27DA5BB8BC6D955FFE54B825
0201275C2C49A3908BEF1DB3D87792DDFFED23DE7FD9CFC284F6255C77E54A39
C2FDBCD28F2938E4CC135829AC1867CAA5705674062C9639FEEFBE49D6108091
7C58585B80464F7E69966D7933C7019BF336B88B9E0E7073A85EAF297B71B303
31EEE9121347A482D28CCE942AF53E94F88A97EF2F1860A92CE29A14495D67B7
D37E207D42F3891E0423F5BCFFCAAC057FEC683696ED6FEEFA65C8FB6F1312C5
24A1130192B4179F3B08DA1C951D988894E7FE7CFC28C56992A1CA82BF8BDBDA
E021F16E630FF67201BA4DF5F3F4D6AA65B8347FC1575C142C6C1868E8472BD2
CF191137AE1B36F32FD84DCAD50644AD55EBA2694C93BDF984A5C9E7C92B73A0
26769F00831537266FD2E711AB3F8AFC5F3FDA3C9E6439FFC48C3D1B5527FC56
1FEDE991E66E8465C0E395EAD0A22A2FDC001E449AB9C5E0EF187A1DE9B74696
BEB6A525DBF3A60DA2FBF1579150DEE1C5D1B6F55FF2708CE23289803CE123BD
C81E25DB96551A13AD713D5C7BFDD3F2E1D5C12463A195442B51909CC1724E50
A1F6F4EADB3B7355908F36F88521F333C4E7C70B094209D1F883B961DFAC32BC
8C5A2CAF77CA5E6AAB714CC0AF2B42FFF6F73301FC71AFFA9B33A2153F55C2DB
C1C111874DEC37CB746BEC9A3A9A37A2DD098CE7C66B0FE38460ACD77A47D53C
1550F857FFB733B5A8D02FB56790A09190B29CCB4F4A3058B1C82F0CC5E1B2EB
2F8E06F2DE531E1EB81326A8EF0F82843A4AC59D267EEE45730895752820BA93
A129C22A78C1AB28BCF67AD5DF372FECC9EE6719A02E499FD5CA866688E86089
7EE8E5912087E0C4588DE38428114785E0CFEDB1E2EE24CC067D107DFDF1E2BD
B1C4F9C6B740F3DEA0BD315581004E851ED5A9F66C4F9E95DE97D355DB06F482
A43B565F1255A85710B15A281E2F034B1C23FEE6CDF3A043780CB6AB18A016F1
9EAFE545CA5A5B5AAE2459D69D2151E99D029FB5C1649B9DA784BFDF7D177385
4D8B16B9922D149FFF6B4F99311D52BEC9A9FC098E7192180DBB38767DA9B9C6
E8CFC98615219EF3AD4A8157D14C72BA3F91C8B78381383E0BCA1A5319749B8D
07C9A8BBB76C74F0F05157151B418C385F2ECADE863C977BC1D0592216FF2843
DC1BB8509D9BB8356D008D7449147F456517EDB169678E28B2C0EDBD271BEC30
6E181064988515BD2B3AACC6D45DADEBD4DECAD9AC58CA06A6C9014B780C53D4
67D0FE46560B44CA4FF989A4D77F1B8828BB42507B524B622F10AC8781B19CE8
AA275F9FEDFB3036079F4F10ADC8CA8FAF5F5DA7088996FB632CEBD691C1F29A
FD52CB18BD258ADFB0B4B8B80F857B543BC64BE31FC83D5ED0A4866444501B5C
C98E1CF0A452E886EF57A241A093B769BB09B19B125F334D9D374A9C1B6CFFD6
FFED42F77C7624F8094CA624F45801B960F6E145D9623ADCB90F36C0C273C5B0
6E0AA4E0C95CDA1561529F446FE5489523B6E793FFF58C9DE064BC47635CCA71
AA72328472FF6822BD62A82B7765A73CA0239A9E28179AE7740477196602ABF4
2EE916B80AAFB638D00C1FB2A1EAFDC4516C7EE3EE4F5D3039E70EF3B07915B8
7C9C128C2ED3C27FE48D27D39B41E1ECEC46CD2209D760D75E743AD13AF1E761
A8B7F996ABCAEA43645546F42C87F6909258CC74419B96A39D6DA3233834894C
C60B03F867B6ADAA2C18F60040A9D8E70BAB12221217095DFC57117CDEB536FD
A09E11787D4F7B448F88
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585E9EEC4FBBE9CE6AE8532B2CD4
101F1E68B19CC8756AD1987CCFF2302525BA8389489E8AD29C974C5A18DA8F05
5671EBB8954C3A90EE42B2AFCC9D2F52165A0DF06D6A365FB88544455AA87281
8C323EC616CEC04738328542CDE8B0B5BF7C93F1B7E133F3A0518EF8DE086451
334163D1D60B17DA2A733E28DB0DFF1CC06FCE2B0B6A6F13323FAE6EAAC2E140
289A9902475E6CE9C732FFD0344F1C8772BE74E0705D0904CE66DDE2A0FBDFFA
E7A5D02207DB3B8714CCD8900F91C87934A7E178004DDA6D91FC094A714F4A8B
27AB4787F38B78A41FDB756A5F2415403C8F7A99A825C8A6F37CE009152A0248
5C3A78D7E3649E597C9A8068828C2B964A6F6DA3FBFC65D4012BBFDF33AC3C61
B4537F4691E0E9E35435337ADE3CDBCD9ED005AE85A4B98AD946238AA5374A58
19FC82CD1D8FF310483149F751148D88546408F670BAC88361FEB1C78A9F7CD5
CA058723131131AE570FD660E0718A7EC0D09DFB5692C21BFBB52A2C14CF9051
8FF0C15C4187B5842159C81908B75A212B0C9AE85B4F7B332E904266FCB27950
759D9DF1DC35FC7A9AFC287C5803B56F4058A19FEAC02F63B3708C71BBFB8952
BCC0AAB8BBFE5C889EDAF00C9C984618D80BBDFF30E18A42C47DD0FA1EE3521C
98714EC451AB5DA6C61D437BE1DDDCE4B5F3B3B3B71C388245D8BF61D12111CD
579977D630CFB6B5A2A31B660C7C103D4182195B37D993CCC2992E4434D1B356
BD56EDF5FA021CB377F65FBBED4C3200AD75E44E4CC080AED9633D2C83B9FA7C
FF6F898BB56E5C40B1D2D23D99FAE3036CE56EDDE14DB1462E4F9859384B1588
2C6B0E2212B76A82B0F78D75DBDCE36109626F3B1F10C7AE6C1C3C1F68DA9A61
5D5C324302FBA2249B673959BD6F18A593F77BFBB7819740EAFEC2140CC200EC
76A12AB14F7C8038B2E7918B2333582A040FC0FD4A74684637F506F4DF0B6F02
33299AB04DD08B1BE2BD395872BB098608A4A53AF681339A700B7DE2D4A65AA9
6832EE75FF4DFD75D4E3A686677434F11F2E84E7F31B4759812F5F0F7CD7D3FC
3B88934367EBD86676AF13EAB255B43E04EF1076D4422E27F4227102CF7D5683
FCD917C8242C6FB9252DA514272D8C9E56DC28C11D239283EE2AE166B7E7B575
33C5BAA292BFB5004B54A8639F5C4F7CAC9E2E4A12165BD040C8CEA0DE63434A
9CDC1F8138F8B56951F3232847CB0B75D327B46D9002BB1CFB8EF57EA14B7282
BDC153E1A2BF0318813AC496C7EE85DB54938BAE8172A7EA4B43D753DCCF294D
F05B9F11BD929F39DA31AACDA07AAFDDFABE9CC46A2D26209708B629A7AF620D
A6BF31B04D5116E26F9E9B0458BDBB3EE665B5F1CB0882B85FD78D63637A8EC6
67DA9257B27175C35D67C07D6211E2EEC2EA43DDAE940A7400A697D5215B464E
CD33E7409C8823E4FE4EE52F8ADD115F20F06C67342C82576295B22537611458
5CE6C15DBA777B4F896886A1E8E9466D521A028736786B06895FDEAB41F1DD59
BC5086CFE6D15CCC9541415F6A00A6CB3002252C1A0A68D12BB1C15565882E41
A9F48A86059AFBDA26595A4F5774A60C4FA6094538ABD2897BC9C6E09481638B
B586F9D8B00FBBC7B9465E49A51867D9AE62A2771727EDE15F129B3B2C868D65
2CBA1DD239CB84ACFABA42F6B83D5AB386CD5805B83284C5CEED31875A232AC0
A0FD5CDF9E9985CF7AF38AC94CBDB48126F8D07ACB7DBBB621411A9D95E33454
FE2F0A469B231B52E71981AB5685C7657773E74A2580B401580199DD079BEDA1
442A5DBB38FBE21315C0252AAA2BBF9E476C009212C2DCA867ADBA020976316C
7DC900294E1DF61A094DE6EE989B48B94474AF8F4723504C746D801C6BE04CDE
0D28488DEAC627374E68E5CACD173F5A11A8D4F968E95FDE6C8C6BA0967289BD
C897B141546FF52AAE119DBECF716CB1F596D84639D3DF0906B5619E2B15FEDB
0D9E4CA5860F5CE7E682B6A859D8A2077DB179CD8E0C0C43EAF47B03842EFF2F
8853DAD956431AEEB75F14660B1011F21A9D1D4E576FA755548AF865046D82F8
C36E317042DB81B91AB94A9BA97E44F330C5A7BBCA3B33AA16C6DC665798D240
22EEB47E42548F8AA8E800F222B9B735E1A497A1DAD552C5466C16D145A83D6A
0E7F5CC3D38CB49D3CED6542ADA65AD798266671DAC3E2948B24D2A7E6AE8EE9
097085871BCDD2BC634B4144D2C320C62013147CF69F75C1C940C0650C74D39A
AAFBF4978B5A3FB15DD74C0AB8AAE1358B0426D84697C59B1E9D8A69319337D2
9D82741FD53900CB1C2B20CD3C43FA68AD74D6F2D4425A1268D6A1959288FFB4
4BE8344FAA94F2C41CF57C40DD96722D089DEC3F264D15738C62BBA2C6AD31A0
D44B1E9FD3E9E8CFBC339929EF9BE450E41549B3753CB27B9E97A95759B84287
E29F0CA84BB201CF67868280F4C6D7FB2EAF256CEA6CA13A2133BB16AB4A3446
BE332D4FEEE2A188C24CE9E9CA5619AAF4F9FDD3DACB95DCFA181DD539CB07BE
9205E756A79A38623745FC0AE4BAA1115E1C0BC1B4CFCE0CDE9ED913F502EA2D
310C566EC3B082FCA30D2DF38F14A2979BB8F4506CF1F89200AE3DC81ADE3996
AAEFABC05CBD75A27A7BE9C6F2CCC3B6F5351CE5D2DF53ACAE9D1AA9ED4A315D
C2DE545CCF0311FB243E4876AD9015F71AC4F78C20D80F5BE8AD52615F5C4576
F6EF44CBFBC583BEABA6A577651BFC2364726B3BDC63E43DF565ABCE40C99015
A08DD468C1B5D5E0D724E35BCDB4FB7E107BF57E2A03BB4ACFE6940A2A8A5CA8
8A31AFEBF30D8DE5EA9254773C65920E5D01DCA75F6148263D3133C72082C06A
E154B41B197866E129BB0ED1195074A54D7F106D90F533A5DA8B4B2457E7A036
8EA512EDAFFA27D54D770B49494AE62C404CC88C5FDD9A9316E3F262F23F461B
9B6A625EC493292E587392B640443A4067D0C67C9CDCAA9D406A5B0A7BBFA155
B03865B4DD2E7729DAD4305D3B22E12BAB28E9B4DCA83EEEDBFF3ED986886487
30B1051FE2A6C6C595D6F2439E2D50DCBBB737A182802E49EDA9528B7DF9638C
76C3B270D3BB0470010AAD7AEBE3BC9BF2355EF3F59F2D27E7B7A64F7B469091
B4182BC30EA45B1E4219E876533626C36C1AE7DF783535DE7E0BD47DDE9C69E8
756703A7A2ECB96AFF77B784FF99195E23BC703CC3F17B5B412EE3AC440CB268
1CE619B7C542EF49F55BE0E5A55F1627995D93CF18C7D1D515F59BF4AF359E4B
5A823FFE2469892788BF134A684441072D6F945787CBFCEAA20BA78BC29D8E55
424EF20F1E31501B20811C18584A9796D33103F654607CAEFA6979C0AEA23547
CA9259A15772A4E6014E40B7D3EE26FA64B8FFF9E4D785C32ABB3D8F5E41311E
9B82067803399C4CD8F26E07CDBDB1F07F38A2C4E6744617685896EF530EBFE6
4FCB6708F22014A1F0E03422200C3C57FF9081AE55AB3EE576DA9DF54FB4A403
DC98F06590F446448C1DC3B36667BE74948288A9E7590A5F18FA107E3332A93E
1521169DEA9C78C5BD457BBFC5E1C22FFEB87683CE8DD80B9D64F58B2B254551
CEEA7009C6850C5FF174D0FDD3716E4B9EBD8CCD166ECFB429E32CBC2BC4F7F7
3F88DC77694FF30E98E47B718AA0C73632E7838DA6F33EAFDAB2A67681FA1FA4
D2389A98051FB0B197C58A46F17CB8D112701DB19EF60A69BA10A8E42257286A
192D221E3D64D048CEC65B928DFB0C8A48AC908EDAEB42502E847F9B9DE6693C
B6536403899F782D7CF3F6B3EE884DC6A740C70E1EB9CE5054717CCAAF6D21D6
9E56A31204776A715DE0C28FE1689CF57C30EA6F729C871D7D6290DD4760D963
105D26091C9B89611F167890C063907FC300CCD6AEDA14212642B1D281079C1E
F28548FBC36A41285162043549D78E56632B121A779FC8A6E1D97CC10D32BEC4
7EA16F7B43A4B13A3286828D7D8DC5D35314D3CF2DD78CAD3FA7AF5BCC5C8DCD
F0DB2B287561C1610E152790A6BBE57AE0E4A3F869D2AACB0D126EDCFA748AB5
90E443B1CCF8E5306DDA1ADB6A2467E801AAD1BD86BB1A34F5E2716F7CD13881
4AC0FD1E1B4FA74961407C1087071D0A53E4834D9C0D5676B05F1A045B3334EC
DFCE7ACBF1B97E6DF694FF59F93BE8656C41C17FAAF2F541F633CEBB85B1388C
C21E378245A0E017C3352B9CB7F2A1E4AA3D9A44E0611D3DC3022206061E0250
B09A05CF198DF82D4F2B7CA08C53CB64A7A0812D490A1C35149937E5B2316B71
F99DFC5A50CCEF0A26AEFD8699646E6FD20F7CBA4D2DC2085A8791024AA39979
DF76D66D77D6124D75B84C6F7503AFBE575D8235F61448F549A711739EDF4EB2
DC793AD90BD4F2A0FE83101D2376020A776CC3ED67FA02A3FFB714D5F2375DEA
85689DCCCEB9844FD0039F9F74BAA30A21C0FF9004CF93F3D815B045C9B64F8D
A0E28108B7DD2FF64F568E02198A5EDB72638D3F81F3859AF7A94CD485368169
D55005A03895E22F1723FAC8C149CA29FE2C56A2E42AD5727E326DE45F2E82E0
478F81326CA09611D1097F4C86884252483319811D9FA4D7C95033E04385C687
3316113088F40AD743FB51E378A80F44E7B14608D8E1FDF6293A3775378336D9
C3C2080344AB013FE0DA634BC8303F88931E1BE8D9D29D53AF3EE71A2C1C2758
596AD40E704DF6D525EA62AC3112B58FAB45A60654591AC4B148425FA6249D48
594DBCACC60041E0B94FB35684FEBEC7950132B8B91CC23095C8807A8B965A1F
20F8B81488A5277C109CF4DFD268DD0B3E6D2420849BD2609FFA17260AA25916
72EEFE245AC835552BEFBC734D04F335E256DA049D83A338FD0544703B100BE6
1C951DA5699297D103B20F969939DC8E969FB1F684291242494E52311C02C8A3
4C0A58A91AB56B724D32850236BB28D5F84CBA02BDDA2515089B3CAAA89039F2
494B3B4406C2A477CBD1EF75B103EEB3DCFE4783F5A3DB1C600AAFAD8D61BAF6
222C561711DB3D81E0400F776034AA7370C867BDF8F8CE79D75D5441E3A478F0
933EB1A9AFFA5CA56A94B4448A96BB921C5ABCB503AECEBF57CCBBA9E7BB776B
37107C4940E956AAA5E9B2B18340B63D4DAFFEE30018345E4157CCA3C328B742
9F86D24C04880AEA64B048AAE2B2267E7AD4B7355086B56767FD9C4800308931
C2F3D9AA87A3594C5EA6384402FEE041CD2460A3847DD783F5D32255EACF9988
F352A2AE343A0CC97AB54F12637D16FBD49F0C82F3D43465AC2D40F6CEB04035
2C1AEABF4B1082FA22EE57351F0EDE61F93CBBBA6C33C080F31718B37366694F
BD2AD81BF605115E460C3ED510D7A0EB781D2D8A08E66B611F543147D9297A38
272829C49B77DA5652495711DC1430834A83EE23ED2BF63A091BD099BF7E992B
460A7114E13F220D68E2E8898F8B8B1FBF8A64EFE7B8C6FFAF9F4CF347EE588A
A8EA72223051D229AFE8CB367997946E14E342028B149A4C76E8AAD74A3CEF12
7DB53383AA2F8B571EFB3173800E24EEBEA7E088043AACBB7607586D0572E113
663C4E8ED85F22FF4A41F5953A55A9320E6CCD701D4F88A57DEC80D3042F947B
D2E9D91933427C907D879E2C62726BE68F2793C5FB43E9F4D0312784E21D1358
E846DA05BDB5EDDDE806B5CA13B46F70AFC83DF4E6760D7B7A097472577FB471
7A7CAF7BAC3FF380A913E09ACDDC5818FD3DE48D4F7B966D403E0BD554DA4B49
B6D088DAE5A0D00078892C4F8F49C1FF104729AAF9B80ECC66E3E1F7C87E88A6
60686049CEB424A9AA895B2859653103444DADA77D0064CC43F1C629BED56477
02B20AAF2775CDE08BC714D173549EFAC82F8DA55DA367BE69136D6B85E27D95
C840BA0401708A58416E377D339FE821E202AF56F3070FC59AE1DC90307A59EF
912E6F92A414183F977187D7BF8CA97B4424C9A8689014F0CCDBE03C107CCD13
E259C8A8B729F90B73639521BC63A2252638E44CE1A18E156B652A99F4A644D1
78FD05C543B6DDF44F26567DC4E0FEE585C057513810E439B5705D8987D32CBB
9BEF29A005231D03B51D3B5ED98C6D02341ECB3E882708B39E90FD6AD32DFBD4
E8C89A9FA5772BD7C4C2EE2069931B83B3329DDDD044BD3C3C36FABC9898C885
68A720100CC4C8079BADFD302EADA542E45E04EB74F74371E704C8F7037F433A
0AB962F52147208D933B6867FE7E2AC972EBC0BF7AF09DB47C9634D58659E178
D18F336B09B980DCA7D6BDA06483F8DD04F89BB685D89C0E713F556814E051C6
CEFE7E83C2F379B88EEA2B133E9F6AAE0CDA18F2428EACE52EE14B5FE74A5A03
C11B130AB7531988FDC5064461993AA7285727B309458BEDA3DF529A995E2CE2
872E1D93AE15DCE2969816548F090832F10589F0FF9F1D8ADB0EEB099B009519
0A7E57E35599FAD0B8A522B4EBC6C5DB0CA94E944C0E1793A4F1113BFD0EB3B9
DF1D771CDFE332975768BC869202CBE64B5E73BF291F4E3B1141DE5C2E53D45F
CD96E8CAC6FA8B7185301FFC24EC4C4594432EEFBA8FE32C63E1EF0DCEE70557
3F36AA55A695E71C9714BF1C354506C4DA1CF00437BB056519FF432CEA503118
F0A2F57D33E98C6C36D138B23DEC0D8052661C9E566BC5BBC90E3E7D0770E0CB
84D5620D6033A76DBC8336224E69A1CAFEF12BF11EF933756B41CAA1A5264D6B
6437127400102043B2AF26C0FA6F8742178BE91BE5CE02246F5F2712E1746B33
E6519F368E17C255490B3A572DD68EB2B266981EAA57CF7D6AB5BF8BA2AF483B
79ECD718589D7D17BD18A603B8D969444BFC4CBE40BCF4C0D2DCB6BBCE6139BA
5BD1C0E746D733E315DD595F10F66D88C8CC45EEFA9ED4F6359F35177264F0BE
5B92C5F3775062A3FB2407FB95EF051751A50C395F7036CC9A304FD0C555D888
75305BA9278A75B8B18D8D9B9D2227C7649133EC6A81002AE7A158637B9EC513
C9F61C1FD5A30BAEFD5CD1420C9B9FC8EACDAF208AD152E12301D751128A7FE7
774B790CB6222E10DCECB0FD1649603476C3A1A39FAD11CD98B4643EDCDDD154
6A02AE97844B9C5596C5C20CA4E2FA8DB8B46E22ED26EBB961C25C31E73E232D
9308010F4C5C73CBED5DDF7166920DCDC1573889F3F727A986758D7A923C1C04
648DE68310F453DE21A97BFBD49CADFF1DC7AD838B897AD728B35D869CF7830F
1AF72EB669C8E4378C7777691ABEDD59398C4E75BDF581767CA619F9A8DB20E2
653E3DC44FCB1D87A4B25CDB534D21EF12F5C480081D82C4C8D317817EDCC172
608FB8B9C01F3E49DFD1A848E446B79D44E47929AA3264CA8CA72C3507F09B71
7C4EB37F464584B49759D4649695DDE2D9CD4BEF24CA870BC44A35C91775000D
3A9E4D23207DA5298A852EF80F2127117F01556C71B36A863349A138B6B4A5F7
17CA7FF04A79C81BD1CA055F34637BC855899C9039D5A79A804874F6DB832B62
B0A8D432B480C748342FD2E4D7C86780ABEE374FD3136E1406E013FC1FB07243
10CD36AA44A4EAB0C82F633A8EA1FC8D8F08D126BF2A289D9503C67C68729544
D4D93E1865BE294B4AC23C9FDF11342E84AD2566E91CBD3BF7B3620B1974E703
713C525D6B12C8BC41BF641A35D16CD267DE5452CA2FA3AA2CF780DADBD2FE7C
C925DFAD72FA86B7C18DCDCB5B20DC64095D442198D9D530581F1C40D357CF41
C4B6B38A9D3AAC9798AA82088BC87A918A3B685208F59CCF307F6FD3234563D7
25B0F7E0E5FD35ED2228B32E57CBE8EE9137ED31113238B640700399907D5ED7
019D5922EE4016C1CA97023320CD3B6F708259A607811F125399C7DBBE5338B1
4C93F707D6E90BF5A0A8BBD9EA92E3DDCA58799C85E5039A2B9BC50A1298B3E1
6C67EFE4DA81248D99C8951DB1F26A078B05975B4625D525B8D45E9A041166B2
25AA3945743E8B36371A3D40E679215DDCB0519B674BA3BA1B7D6EFFB3EF5D56
CABDEC4703BDB68C93F06DFACE91543C0BDCB9FEACA81B3AEA39690A6D2138DC
182FDE453514EF6EC570E792A95632E3B63EFC594B019FAF488F8A8E7FE607D6
6A0F8268D4AAEB2A1873E5211AF844712AF0F70D5068C5053EC9BB2E96EA3470
00BAD8764FD69135A831599F033BBEB43995414E9D3900929FCB722ABE66DB29
2ADCDBC18E2FF038C49DC2F582F41AEDB7E061568D598C7964063A82AC323262
F729899058EABA75DB406E8C1AA2D26A167E3BF5997B98F5B6DED9627D434756
25FCF8FDDB145500D77A97A8BF392606010F944ABA543E1A6D23E0B550CABBCA
69BBD062515E16F653C7F38A2825A7751B1867F2DF1CA821C65915C8F254DD94
D8FB8C5137ED0ECDF2560422F072C05B472FB014C1532DE7B779C07D892B4A0E
A6F381E90C7D35B222EC75374BCA37D773FB3FC7771BB92EA42DC608CFB0B299
3C44A079BF7919E818DD06C25CD94BFF5CDC07B9C8F7F33F805EF5F2DCA00F1A
7F7766787510AA2795A8B139325AFFDF8EE1AE0A7B82B7B40EAF7DA8E9CAAE62
C784BE8968101A5091DD3640D5411D6386E6DFBB32D316727EA0F825DC6C3012
F392AB12E18F4E7970D9BBBDAF69558A10F9EC47EAF2AE5E5AED5538D460D3DC
8C6C6CE4DD26AA443B6B73E80D05E6C8893BFC6098BA7171A0518EF8DE086454
4C5A6849B757F4F771336D985C868E6C05BB68E1FDA65B14FA6E349D722132F6
2CBE183CDB1A6302CDB6D90FFB8BE2F427D3B5EF470631BE9436FE027F5697AE
0BC9E790ACD133B72DAB5CAB8BC512F458C3E39528C30B879CEEC14F97E2CF5C
5A8B56B34EF4D98B4830897ECED38746841C5895D8335AC01507B67B9D3390F9
98031BD207C2F8A80B69BB84CF0543DC63A5740159B6742CA896684A4B7E64DE
5EB466DA9B3626E0F2F0E27EC89A5A0BA42751B5AB54492C35AB1D7538CFBEF6
2D6DEDC75D86A4FD34C53F4E21FF45D66C82A14B4AAD32B78F7531B7392D277B
7737782B74497CF608B2937568560967020310DF08DA3A579EC35F7F38C9A80F
29BB2E6146AA109B8F587BB786AA6415ECAAE9802FA36E4096D06B36932CDE7F
6D494C69BC472F5575B1366C832BB031A0167D93B10FBC034E376490F561BE71
948F64280100C3C5BA1F5AF093352509A07F9623ACC0C022965EFEFCA56FDEA8
33B6C59AB0195C0B9D8AA2604D44E97BAC3B8BB13E562CF01F47A1E8E4DF6613
29FC2710FF62DDBCF951C4868DE8656377754F314AC16BB1740CE8E0B82BC5AA
234F593178666DC14E05E21ABCA133CCF45ACDAAF015B9F8B0A1A0DD3C77474B
96CCD05758E253A6DEC71EE4823E86D2D04EE3F0E5191FA492F5F4B1F0A6DFBF
7E2C8E0DAADC4E383205950839B542D5DFFA8223B037DFDCFCE96CF2FAD39A71
66188D52CEB7118ADE0747CF1C8B7FE4DB2686E90AD0AD59CA4C91948B6566BD
816C96D789EC7EC381525276A8E3FBA0BB162E3DB3A32C0289F9A76332F90B2E
B023437E8A8E5969DB1907173D35F4DFCAA4551D0D1792ECA42FB60073D94DF2
3E0848E5BA0C0401FD2A2A8267A9F0061DC747308E1047D649B499C315AD89E8
37B881E52B03A837407202FFB54AFF34097DFFBC3E1C9E5136D5F63BE49DBC2B
87525DCDD5FD79C7255291B8480A2B2DCD2424AA73ADD3CD8EFB84018DB1E6A3
DA75B8FEBEA73C454B12960451CE1B0B1BABB9BF77612BE037A0C571095E2A9C
FE112980BF32756DF7F23E969AF4BD6EA0F1182ED7E2C1D9519273D121EFDA0B
A0187FECF672418A9DBCC0DEBC853C1F005A7E96C5ECB7291D191892E9469F81
ABC1D2ABA51862128D12E66F27762401FB02B8E00A31F1FBE2FAEF2A1DEB6E7A
B582DEA89AC314C612E2A8CD9765A71FF0A7F122216DF93857BB48951254175F
1F85E3E21FCEEFB1223CD1D937BC5122EF53C533AF3B23E39AE76E482222BFD3
8455BA07F8D6DA804814F4D716F84D4FFDA5E33975777ADB9AC60B4325D93C26
2AB622AA4A7DFD6FE310DFBC5FF4EBA54D4585DD227E463A58677AAE8D314491
59694228F4D16338115F95A4B5F518445A66CE164DB83505A8ABE5328CA1B791
35A79D2898CBF51387E376DDA456E1B85458CBF05760EBB01D27C346C9781AD5
2A369E8E8645AF878A1477D1AA17E3A97F8C922B31B19395A421EA7844776411
886940DBF1C74A8BDC4B500D0BE8A05CA56FE842059508851F9070DE81A4E319
63859D2724FF4E23A94EB05B3D0CC49BE3BA3702152BB4698C39820B1DED5FF9
7095E05BD1F6B603A8E68356DE2A8F5263EE631BE20CC10A2279766508C10029
B1B6887F570F6615AF3E140FA2C6B37A1F8979CA7E5018BF21D94DB467EFA5E2
0C38A99BFDD5D122FFE48C0D6DF5F63BED8C38CA52A5D4AD77F50114ABEEAB9E
8EF066DB542DB29FC2836D55649EA574000C3B97915149E62634B9EB64867709
84F67D491013922F4B19FA8DADD216454D1E92286716650CFDA57CEF6889E644
9AB834ECB4EA76569B2C8BE107A98C2D54E5C032BDB0B4906AF58FC1F1D05D68
100E7045B930267F0E6A2EFA21EA1869D15BD94DD8A5FD22D5F72B9C902E9F3F
411F157C6B3945F5898A69B018E3F9472E4AE2E03D60CE8F89800602AC250BC6
8B08592C05D453770F56571B7797CB716310D40682AB95CCADBC20FC9EF67C1F
4513E2BB52E666BED69A5B7109AD87D0CEAD27A2638002EB5B86A12385EE05CA
90149A6DFB2AAB2275F41C02B0AAB2148E1CFDCBF1D7F66D3470361880721BFB
2FE0450125085369AF3255DD078D0FF3C2BFDA466CD3338E518835365149D0D4
B5B924DDED8C4BB4813D9232935D0B13537A1FF73F6FE73832342917B787EAB3
3C9E17C97DACB95E7BE0F455DE58F95069B5B66DF4C58155B2B05335F5E9BDD8
C3A4A82C2E598302E5493842F596A098196B0E2E20CEDB0A589446AB52F983AB
01D8D64DEC1DBA9FD950A59116A399EDAF32BB5631E1797592F589AF8CEF2A27
7D9F0F8229E041D85DFF60479439BB3CF1AB9F24EBA197C783B2B6DAD6D6D9CD
9C8E87EEFB561A98851C4348C3109D0671951505993DFCEFAA29DE786963AD64
9C32D00F99B504DD1602FBCC202CC80469D2FB97E596363AB8F026A562E25D24
081C0B5B747F93C68D611B76777B2EF6EC79522E8C2A743A530180BDB086AA85
A875EEB3875928C3250C67FD0C622CC29FBA6204E36E7905E213EBF6A5D43602
141D990DC1EB709274A5CFC1B7449310894329FAE52852664115730256269B80
B12D648ED51EAD21D568C1CA8717E95B7597AD7C2C44A57B74332C4AE87885C6
8B94B27F43426B6437127407F86C6135B3DDF83AE423590F4F36824C3C3489E6
1FBEB5A0F54DDCF23ABCC1C4DD55BB8F82ABD3122BD7087025B8D0B9399BAEF4
93C011C3354076007F2F95D5C24FABF65D4971C8A1D41B86DEA3BB67D048395E
9674E70B3B5FA554D8A85A227B7E41ACADA8A54DD0385F33E20B5016F1E3A05F
05F21E123C6F1FB8130E05376AE75DA4CC31C19945A2105FC2D898DF5FA52CE6
3878A74633545ACC6E1BFC9F55F23D8B96BFDC81062044A6D3BEC9BE4B0CA0D6
14270C03E1CE6FB4EF66525E8F15F63E8A9F64DB7890533FDB53696DC105623C
29DD9D16904A62D35521EC38382AE63912A756CC045D2E919084C7D490D88689
FC1180B0D5CD7D74966B87AF047756C808A2F5B7E88AA355F27B3F6CF0CE856A
4417B9F66703DE69A65DE65B00A629EF39E5642AB1A2FECFD8B025C2CD224195
F91A18B8B8E0313123919C91898053E8C0153F4CB3863431FF9F94DF8FED90EF
2B97C4F4753E251B3988D0203AB0DA46893208E5970521A0F85893CCA9C6D128
B2FCE38477DD9E626B18EB64ED9168357A5B6AB898B25FFC0ABEF43FC3D0EBD0
E5B53746456C07D394BB1406BD933320F59478241B5C09044A7F9E3A95926924
1F653849C02805E1C56026FA7062E7E0FE022796E62FB435868B8E06FFADFC82
AD0F13369570F60BD85C374F605A85B917950AE14C12335C09CD87C6CA2963C0
EF298EE2D8B405DC63B46C4C29F49786DA0A8084D81A6A89BD3EF97149A68C00
E8B6035EF1D5141FD898304C6EAEF04E469363103B7FBD24DFE37E309860D1AB
40E8863E0F8C6C480278B9B632A6DFA87F1ACFFB2A19F49F512CEFB665516E24
CFDA4FDF588ABE32EAA9E88D0EBE3F004428A17DDC8EFA3F381D7FC74A0AB98D
32B706A177ACC1D0848E3F392AAA23BE144C14AD80CCE23A8EB6583580231B6C
03E55F0704D87E3241AB1B0AE52F898A234931F910D5DD06CE59CFCCD4D9D8EA
663BB0FCA9AF7097C51628150D34E1C13E533213DB6F6E61D7C305D7E74832DD
2AA8B85B982E83A0D7A93F3AA16385F40896D4A047C14C559A3AD36ED69EB52B
C90411BD034E11E6B81735AB30E65F0A080961CCFF80326873EBF3F736035F6A
C83E492596E06088E1168F4FFFD54FFB2E9A7112B39862907F487439C81141D2
EC1561421723BF5336F2BBAF1B248BDF58FDD07769AC431C1F04BDAF383F244B
E50373FCD8126A2D82B84201E1DC0DAE65E46E4AEA151B90859F5A678B1DE0E9
B87EA69EA69FBB406301E0DA4B2305E9BA211FE10DB40CFF125EBFB0D710C83B
CF6A989C96E69E411AD2392D8A761F7478509623114B059BDE45E06DBAAB8396
B470D398CDBA8A977F82C51263082991C3C58874284F722379866383AEA24BED
A70A1ABEDC08AFAEFAB484948D1B651704149E0EAB3B1214182E7DC6293581BD
4D767F5DC4DFB32BEBE54D643F7C295BA3C1AA4D03113B2FD8EB1352F664B2BF
E42F0A95B7D038CA6DDBF59CB2EC8487E1D3D98B15D682BFF4AF5EDB984442AE
D0520555E8225778C99C7EF356019010C431E2D5BD269BBB086168AA1F093515
AE7F9F4ACD9C3BFC338C93601858B76751E5E5425BCA9FB60CB4C8DF3A640E4A
8594A174656487656C1A822C24636E6FD8026C79AC276D5AFA036AD33EA018A2
270622DAB445F2876A1DE2884E34E80395394B15F722CAC04FBCDB9A55427D0A
015DA9043C18690ED62736D6CC78FA7B8C42F84452AD21C8971E67289171FF52
D9B99EFF6E2AC36895C02494F1D1E7FD1F133696463F528D5160C7E9F656D93E
B214E1FA04F018D94AA4B454CBBFEB1D3DC91299E2A85C3C294B28B874686555
FD056C8BC4FCB7D11F90A4930F07F4926F798ED5B85703972984188DE2567C4C
E069917BD91A9490CB8DC7E86D13E826FE8AF12C84338CC46C81DC2BF18D6ACF
86AF9E9FD0C519AB7192269A73380F9170FA9AA84F8F9415F903600E24BB4AB0
A0568825AA4A311DE3EA5515B0BFD2F8121DAC9C5A704B80DF768502E3066880
4ED494A6BA8ED2EC32B466D21C9B3B430930E60AAABD8522106772AC70750CB0
0EDEBFF06DE720532977E29008C21E6035A75646626A8F9E0E440370E650B2F4
7F17B9AA506729DFDF19DBD04C67ACFE6003BD8C6C444722508A7252806A97C5
502D237104EE849C898BC526CC48037CF9FBEA97DA04FB77B884E783780829C7
11256A05BF77E40D6D5666A2753DF6B24106E396062EAD81363C43CE5D84F978
45672EE0A627B3ACB07BF5B06984E49724449F5420EB33A86C6B028EDAD75355
52445416EA363C5C1F47DD5E23C01FF09929CFA4248BED5132E7E108C7ED6C51
599252C223DD2D58F661D063BE85B5994F0C5857042878573042DC40F2E808E4
59248A748F61A3C990F579FA9E43BDD4218A67BF63BA1DF906CDF03F164348F6
558901CCCD65DDB86B4A7497A34603D14AFF0E026B59537CAC6C3F051EAA3977
8E108A4D095A1D3423ED5D51B53B5D71FF3B1B2F9390A723C375D335EEE61A1E
343E7EFA2A024985324EE0B4727F1EB267AC6F9FA22AA5CE6879566C762E1B16
F7E17AFB02731CF07A43F5EABAC5680D4CBD4F40E13E6ADF1CBD423F1F8D84E5
6832A950D91195B3B0006A69480EA1ADAB86484AA90823CE9BCAF9176438E375
34867636E81276924A2ABA7FE56AFD21DB78C2C287675D7315D6BD3EF55970A0
A54D8779A9D9ACB2F6A688BFEB1893A21C5B26E391DBF8FB4EAE6DE4D6DC2D7E
D3CE482DCC9A0868209306F85107E9AF7E343CD017985CEABCA2614CE2D8684D
7FB19065E68E9E094890E62D62A355A9EABB9AE8A973EF8374B2EE09DA082CA1
AAEE0F30FBA37B055BE20640DD764414191ED367045558D85807602668C57F44
F4F993F60CE93C7192ABA49966E14C77783F523350CE47DA2E2651B7E4C95560
DCB1467F4BEE27D53526C6933CD4496097B113CB71E95A710E22F1F98824AF66
2448BC169AE19059738AE2A3F89A32D7D9989EAAE705CE65E7E46E6BA8583539
EE68C1A5EFF11727CE9E5692C0BB97A75243E6C085AA09EF89BE5BD53A170CC4
19697645D6D9C70F3EEA9DF9B42061D8578EFCEB4DFBB55814E4D30542809071
5811DE8FB222400E672C980A1252269042B29158DE2B14267A9B35AF02A58F58
E2CB4AB5830E80990361731202C096A492130ECBCF6108E5AAC8C1E1CB95C673
AFD3CBF049EFDA903C3975006A44513AAB8A995DCA76DFB5F1E4EBF2E2CC5973
8D355A276ED5B74ADEA0C695AD19CC488ACE007AFD78CE10F012B793130CB1A5
9BD1E158ACB73076B1E8621D2612A2352ACBD51155D23BE245C5D6AC91EB12FB
8FC8B3472DD8227DD3B1BBBB3EA0CB7C9786C3BE391922FE401A6C3925ACBC6B
6C2F5AF19E5C64F9C2125BDD22B310B27E098B65DE8D2B63D91187EC13B2C541
F47CAEC3CC2D07183E608EDFD858AD4C77ADA7BE5559AA76BBAFE01653FED6EA
EE76556F93DA85D3197CD8F38AE7364A23427C7F0308A95AD96BBC92CE82C2D6
4F3F6C1852797193604B1FE2A021FCBD6D9C947926BCF2321A4B15DEC4D4BCA7
5C3036E885AF0C579102981089859AA9A1C9D3C9289B6309C70006C5348B1426
5C5F541B728146476959B94890123FC6364C0A20BDBF45820181C3DA0B175841
C41F7216E2C0D3A09F8E13166885CC991B61ACB6AD78C508261DB7A3936574E8
4907EF50F367D1B39B14916C41E2EF71614A3A93D409E8E28A82880FDF547088
8C77CA830985A951C6B154E6DDEF650AAC0F1DF3556EC18DDACA71D213552A7D
22695AE85A5801FAA9C4655DCEAB4A055223A8BF5010E80F79406CABE46981FA
1657B3D1A9CB577D766139F8209BC23BF9A31F05FE876135625E719BEF00F189
CF836788696E893C684E5B6F75CC61F24B717CC04CC77E9845C70D0725650FB5
620DDB527B4C9474058334683E537E0A4C9634B1B397DDA05000D357573340B5
50A772F3B14D3AB27D05D2F2F53754C1F01A28B785F0A6A3023470397B596FA6
6131BCA2ABFD0DE18D87663F5B881FDEF88A7F04DA6EBF8B6F4DEEE632F9D862
9A7E9429767EF6DD8B63CABF95A2D5D1D127BB94D5629D6CA9B8398C2CF21C29
3A98EEAD93DF9DC9AD56D09F72185F3CC38621E339C2562454B62AD29AC1EF60
9EF6310A5111A25ADCA0673874B0FBBA0A49CE6128A36DB5BCD4EBC907C0494A
EAD679A99BC2C1E2FD6A6A5E0609E933B23F743623968F26426C962FC3FA0F5F
F58EEABE4D12632B310572111EA04AEC0BD6A11EA642DEAB94D04B225280E23A
8F5206C81770238406ABDC27A64A4FA6609DBFE0B6C4C0F8EFFC2E005C03657F
A91B0247578F96FF7FF473E57A04D12E1AB14647F6BB48A1755A60AE68490AC4
A06D5DF33C82BB1EA58F8E770FDDF155D70C733549D4E022EB5AA3654D50136D
241696018D57F73FF24149C7FE1EF0323778506034007854B997627862BBE9A2
4FB86C56CDB529981D54A1A4292F58A109440297AB758986C648A32607A64C7B
C6495AE9C085F33712900D10399AFA4A13204E6203B8537DD68AD356F5A036BE
3A24F4C54E287432D5DF4C3F8314D7791E77308658D2CDF1B239CA8CDF4B86C4
F4C61A98A67329334E22E023C21751C18F94645FA6E467DF364E46B82CD0B8D9
46C68C07B19FAC2492A7B54B6E2C45D3DC43EB3C4A1A3F391D66563269075172
D091B0C15378707E7CBF01539E5A1624B30795656AFF36AB2B69852BF87D9A88
E26B59337FEC93A9876160D904C73033A0115B43FCE47F3C02210603F818612A
D61CD0776567E413CD552D4629EDD16F5FA06D5A40843C5350DDD0BCF3934615
9DAE20FB4399F0A5C0D12FA425DACF3B3CDBE6435797F684E32B01A03ABCFBAC
0CC84611FFFB8239CBABCFA7D3A2BEE699637C76A8195592F81F8D31123116CE
FAFD2DAA3FFD0C873337BB21C0342BB1882390FA3F457F1EE2AECFDE61E2D17A
AEF000110C3F01C64A9C5D079D23B556C7A701E33F8696643D73C7954E65D8D6
5DCB4477B39DEE29CE5EBDB2CC3FD81978331A882523F601D34C74F7EFFC2E00
5C03657FA91B024A95B31CD310E373E9BD01E1F756F4C436D96D917825F2DF9A
DAFB6DAD389067320E5C609C556FA31A8DFD28A083A82D725DE510A9BAF2BC4A
47C0DA1454C21FBD763EE12CEB44D99B5250F2879F17BE055CACBD0CDE3EE650
2EA97ECAA29501B44E2D70804221850C9DF418F37BB6627C60BFFEE4C5B975BA
99031C915B406D3092CA1B82D474557E842705A5875210FAB53AD56526E174CB
F02456D14D9A5049651A9C36D62CA257EE7522618048D04F98492972693467B0
C25E135EBDB2D8EA17D3E6F909C84B73AE236A1DE9AA697807EE158BBA7F3258
8741D0C06FE097F8752DCE7FB3C9F61B877B9DA3660AACD8771EA57EE76F99CD
F1ACD909C304D359DD28BF4DB8B513D433C01EE01EF5EA9A35954EBD9577C29B
D343E98771F64773608232FFD316EE4CCA15CE5C1F4E2AA9ADC9F35C9CFAE82C
BABB9A5C2C8FA6937F5B0D6A690274B9BA8526F567F5F3C9D1485DA0BAE057AC
8723421A9FDDCE798A875A7D258C65C513151B1A0A94EC144DFE181A98FCCC9B
9630B0944B4B1CDCB9B34193EB14D75CA511C38C5E844F535460A1F9E45208D8
8B2010229016B8CF7392B187BB91BB0AC775CB5F90993D09AD5D67C7835EC8C2
4E0786EEEBC7BEBD30EBFFA16ED4464C444B3DF80F7A0B750FCC002166FDC9D7
3B4A3BB2C2FA5917955B5C66698C14149451B92E558153101B99CC4C7BA1FA31
E1F37090E3AF7D479E070BE7276AFFB8DC755FFAB96037C984C0E00BF017AE74
DA5C771E8414111E0A2044A15FCCEBFEBA93276C9A3697EDCCFBA9AE59D66C34
DB1F173902B4631A1666599EE08F7457BE6AA6034E186FF75A50660A4A5CC920
171CF92C35F6E8E3A25685BA8600EE9318F04824FAB750E64C174E9B28D3F9E4
528BFF82F6E53B72C27FD4459A51DBEACB39752D41C5FC018E78BE97E1C8D59C
2B6ADF6B8D4B121B2DAB9E86A42EFA1A137A15470978B9440041B766C7A0F87F
EFDAE7A774EFF21A2BDD528FA1E1EF3CBA5DDF99917AE114013356EF294801BE
9BA8A674C9DD41EBBC5A9E986B5D2D473CB65977FD198EE531A5B7D15B934759
ED28BFA76747F1D8A2A3C36C37089F4E108F2412D503750233F052157E0AC752
52E7F79E403F59FAC9EF743181CC35E4A12F4C579CB83B8F72817DAAC3C6423C
29468C7B674279634F657A99D22AF3A1A85369381940DE854D532BFAD38731EF
1E8CB091EFF7C17098F75DDA8042EB96F5FD7621E409D674ADC776DB8323478F
C28061DB4D2AE5101CF28BBFF9658DA5EFEC0DE62C06FCA6239DE5648A99D75B
0C6E56F5AC2A7FF32769B2F1403668931C9E21C9B128D3EB3C4C90FDD838039D
06C75FA4DAE9F61DE7BCBB306E8991D97FBABD4EE2D7D64A0E5EC569E76391AA
E04AC2F61E0E6E650097B4B91092B81B3293FA3773FC8F8D5188077986AE935A
243FA070D84C60A43D2FDBBBEFE50BD24FCEC92D1DAC886CF50E46E149E39E46
5741FCF3B85BEAB2EEE075750598521845E1F9D155055FA634C62ACAD5E780DD
C9D8C8959F8193E31B20B4F85C5C6E8AFDBBE5F26FE65728895B106592F183F7
30B818595970EDEB76493FC70C6AD90F780EFC2F7A05B454EEBEAC05CFC74F89
6A873F8893A0B3D4022D581BDC9AD9DF4202E2D38B017271B7C7769423231DF6
8B7A15F861FB7FAB2C703B97BCFFEA946780EDF44A6114E8743176BF72C80FFA
189F90697549D6B1FA500705E9B1CE5EDC300BE5F38C4BC4138C8AB10AD5463C
5C267E18CFDDDC78F50F2659320A1F84761CF20381B0D0B7DEB33EBCBD74D760
0A44F03CB2775C38537C4C4626851CFF4408B115A8D55046757DCCA229235516
262878DE53B694DEEF405E962653D716CA58021E37F34E1A35F64D72504CF7DC
E95EB562397045951A13F264D4DBE87C26088D33E0971B34B611E823B3615B00
3ACA8E6CB17AF2CB66D69562B03DE93462C197EFD76B2BAF101B4CAB4242F875
C2A2312DE686C1E0034506A4339747019BF3C98919B3210E2D23F61354DD97EE
669A79AEF720B46FCB071FD6D0BA35D5F77D9D16BE2770017EA25DA12BBEDDBE
0B1A4D153E91CA004193B28EC093B5F4EF4E07163C43024BCBD34264EF1344A3
8CB5F54E37B64CD845440AF2489397900887077EFB6079EC942FDD78EFE6E44C
D3F8CE7C37483508C5CBD97109E9E4E4D702687EFD43FC4DE488EE9E0072110F
841D7F1129001BE1B4BB39726EC682E8C883E4380BB488A3850F663869C3F5E8
21AF0FFFB16A1333477CB6D50EB70E010E85B9F753CB59AEAD34CBDBA1DD424C
A4679BC73132E565FE7C2844BF832E4DC1C0771EF3BDDE9E73C5A2E139DF9EE0
8BE04478EA0167949B911092AA74C10B809AE690784EB2D3BD05C51D41453079
D2A81AE6DD836D6278E622B49043387B7BFFF2F92268188CBBB8BAD6CEB61691
98CFA4FA4D3A52143BB8537C902157B5D31BAF4002980BD8FF1D4335C95FB57F
C3959325F57C0271AE267FFB931B4DCCC6519A88D1D153731CBD95F769BA5590
69F37A496E9F14FB0B13010D7440EC09646B2652E37FE1A0AA19E85F9BA55DEC
A4D3F81483279B2388E71F64B0A8C47F8D5BB97F4320B1EABF78DC050C3FF552
4C36BDB3789CF83D5C6B6440A2919AB737DA1F8C3265385DA602DC10B2903458
3F6493C833849D10CE5609592626CC4C8EC80AE3E14CD1A6FC847B8F2B8DEA65
6ABA55F11D655ECD2C4B461970F75CD63D4FD6AA9A1792FDAA2AD8222BAB1DD1
4585758D49CE07427C9639DD8630C7ABACFB2347263BEC757D1F64C5A344E91D
FF3DEB5A66D91DFF486617A0B43D6D46BEF713C2C7071599101B5471C896EC1E
BF30FA9F0FE9A52BA79E26CBA87103DDFF0E1984AF8352229B2CDCEE1A3FD54B
A7D098926F27C5383FB6CD2FFD2721E5F2CC09502D1C3295B806A6E54FCB810F
4FC660D8F077E59B819AC20FD35EAE0FF390ACC2B0E00AD902DB3C562D2B0096
5688FE12AFED20A18DFF12E97A297198F0782E3F1459F6287FE5D0DA669137CC
2EF838F2BAE92F6E7444BDF4C738CC1D316609929C16D8514CA4A9D66CC6237B
090FF289A246EF7141C95B94BD68B6EE5D881E8A9CEFC5C8715A80C61F3AD01D
7F56D4B0ECD478E877A2B49BE6CF92E936A3DB67D0ED00B0EFE404EF442DBF4C
918CB89090A520974310029C21D358E1590C38283FC1BBAFB868473B96705711
9B99B0ACFE97E6DA278D9A6AE3E6DB74BC93C40BB5D2F3DE365DCBAE3B8A5008
607C3A125FA912D9CF003F385FE03DBAA111C222DDF6E45A1CFD770F332A1C98
1258A2D7642EDD72BF6C1D1AF0DE1A296D1AACA754EFC9C4710BD8141F2837CB
81DEF83ADA70625B4BE0139AEC54426D96AF78990332522CF1AAEDC5EF6BB6C8
7F39D05055859B1F0962D79E031946A7D969F3186426392C8E960B06B3D27A08
DDF8CAF3F67323AA092C3E348EFD4A9B7692D0E37FD5D50D76F19DD2503FC657
BA6FDC0DD96FC239EFB1B48E4D3A7ED51C70E4301620B3C34A2725CA61522725
6A70FFC4846605EDAD3970BFDDBCBE84CDA347FF1D59CFBD1EFC705B60A69A67
CC66C318B50BBBA375D61327F6F42CB5DA9A445B1201483B3177E22BBBB1025D
C782136D52BF159502AAB8ECA492D5A5848A9D8BBB4B015CEBC2EE561C7056B2
C56C59D7AB8C5F5E25BE5045A8AB63A2F53FBD101BDF1BD7A64AC9D5549B7303
74F5251CB9317EE40E9DF66884D9948D1908C64A10E469FA281D72B2126DF4A8
3621653F0E9CF0DE138CDA2C18F5DD3DCB18F3D93A57565255F4375A6717E4CB
27B43D6FD8958FA546FC92AC2453A1CD0E93DD13209698D0EAFBB057956104E6
4696985C1C73D9BD1C4B499980F4E80A227ACF20877E6115E25CD296FB2E6689
FBE4677AE66702BD3917E348AE6E949E01B58DE901C0BE8141794459724A9111
AEC49C76F5AD1AD9EAD01765C1A839C97045B57B30CD445725E55E0BA8BCD7D6
11AF02F887EC95A1C6F443B222FDEC449899C61206F87DF2C1E413860D201227
55ABBB9D84918834D75E1E22017A5E0E3019941D91F445C13370B0D142712F7D
1EA21197D7F91E2B8F5F16365BA36D623F220672BDE2C5F770CE5354905B91B0
90D24335B9997549D041E16A2EC8CF0B66210D277D943411B41FB42295E99FF5
E068F5B7A53B5F63577657D9BEB1BC43CE62C3B3744ADC2B6C83ABACC80F7EB7
96BF2B95D23A832DA959D3CA8912DA59F014484DFAD1D2C87D68DED8FA8633E3
DF274AB10118A463B3913570BAABA00FBC70B9667C065F67CF74D4F8C2E3194C
6217B2B65DD5C32B9F0D7EFBC888A4380391EA8C571F9D1324782A12AC21202A
E90C34E9F48FBF1D8B2D828F8F61A3B5FC504E76C434DBCB15FBB684E3046D6D
6CAB0A90A689D49DBC7A8F77BF493F09E46C2316533476D8B5987B840E2F41AB
B7864F35EE9D02EB8B1579A781CADB63FB4504EF266003255693466859067A3A
4D1442FC53C542F192D1C03E973A81485810D5F1C439E945A1068185B5258893
BC6F149FF2F773F87EC977D849F4C55C2437A647B3757BB433F8EAFCDF006BB3
C22750ECDAFD6353141453290BCA6DF9244877AF8F41BFA9AA6381D4A73B5C50
14F50EF4E66B978F8A277E0815806EFED17FCE2CC85BB5DAE15E1750F3989DD4
459D7C14608CDD4929BD219307D31FBB4F5087DBDE168EE6E13392E276C39220
BAF09D6765766D9A4E1A4D2E65D196F374E635A8DD86189DD1E89CD1DA0F7549
E5995A1A1B23A514BA00B678A6BE237EFBD39591A6CFEBCDFAB6FA5601A701F9
AF479650BD6609D8DCD3A82DDA0A2549ED9576516E069CB90E234BE7FEDDEC9A
9EB6A509DA1BF8FC2FA706C01D4144F165E78B6FF79F7D221E5725FB6D969C85
EAE060A4FD875BABB6B9752FE2AD5700D1C03DCCD95BA3062B250CA60A473009
5C6CF20FE62AA181034AC2FD0AD73AD753165D628299FB3408F338B1D2FE2D76
3D65888911D5803F714C46B4A8CC7C06A6715A17936D88C50EB797E9DE0374E9
754A65800B98949BD58AC4AAC8DE8E97B3FB4454FFE425D81D3CB4283BD044A8
8475402A667B93157CD4B58D929A4274D37555531D8619A5DA79D7AB6BB91ADD
30133085DEDC478BF74EB4C9936AB4F82C07133B6EE04D5E0FC2B3704050735A
9E59ABF7AFE2CB6A6308A74348F6BE3E4289E79A0D052D391FE0B58B5B9126BB
4BA01BB116BEDD9FA607FCA17BDED9057DDF30FB31D6AFA8CD27A44CA11BAF1C
5FCD42F170D724D56227AE33B5DFCF627D9D4FB303F36A853DEC6AB5157E0123
2CA7D4F460AD9A2115DC6F5D0F9912ACB99247FC6F6D216675A0D42818BC74F5
764D8041EF549EB696C998BC38D9C4763E3AF47885006AD9BCE6D74D11AB2D2D
8EBBFC1E84C3E3ED7DB141141722204CB7D97CFB764E9827FE3904C4627773F9
6E4C020B8ED3FBA4CF46645819B94D2250E20F4DF69E742649F8E43F1E5A7BEC
D25D9541EF67AA0AE1D5E377DE871E33E2D20659B19BEBE032F107242AE97464
EC93ED04184EAD9878970833F8BFF081B6899FB60346A5E1862BFD41354FE825
6E0FDD36AF5E6E2741DD4D2A4A10CD548086229ADAC49583F9196C0F2E6A85BC
B081D235D7506F5DBBBC27259DE16CA46AAF5177BED1625B552FD03B85E0D029
E3342CC1A3AD9D01AD131E5F5148A3FB17E22F5D6CDD01998309FF1942956306
210767BF96276501C09F963B2205242734293AC5B9FC7428AEFD5F7098244041
85312D7AE9A52660A0AAC0F3B41D14B601CA7A9D9730A5DB968315F69AD8B749
4A5B82E85D147F58BD70339FDFA877C0ACE6241A19A02ED5B8AF20A4FDA30205
FA226BBBCA8F7E3E1D4F9FC7397EB2226A687C50AAD99F63D5C2A384738AD3E9
C868D531D6ECFC79412660D71EA6CABA7C3FB2EB7DFB23139458BFD5CAEB8908
346F899D1D382795B6428C91706B947E15A6EE25DF630769C01FDCDC65501990
DBE2A24537C740E43DA94AAE384EABC0C090C1D5079D002D7780402FE3CB56C4
85BA395DCE3CBDCEA66DF779574BEFE2B35C58847F36B83E3CA0986989CD7762
204774FBD2666ADA601C6F272DD7CD5F89CD3AA1C1993DC58AAA8ED0AF899EEF
9F5C3F9C1E9D2807C4341C2D560BE5E8020AEF4389017F2AABD305ED661FAFC7
AAEA0B54FEF1CF5BFDD0944AB7FDBC97C68EAA7AB08C5E6638F75B8EE90CAB1A
EEBFC555E5C0A43BB22C670FB4BE37C16D0B1431A8F7AEF6AC4EE55AC9471BAE
11F063441FB2487F9DDC8E3DFFF751B98EF3BA2854926AF17D19EF7C3C152558
0FD58BE2B239E1A62C8865D5D7683CDCBF8CE02D6BBA07807CD74E6A3F3ECF38
A39C2DC6C4F959B139745900B386D3A95643F7F0D5DCAA875B41CB1125376283
D021282233FDE06699788D94555F652EE7710F5F10BEF20723AF5148F8A29BAB
B2432074C090E7905E1895D3601C85EDFF861B5EFE02EFD8FA14D4A9CAF680F9
3BF118BE2DCD404962D130D2362FF40DCAC3BE6C329306032BBD63F62E0AEA38
F8400664566284BFB059CD51A34693EFBE5E08064E58C89164E4F13BE57D0F06
0BA0D5F142BDA0F019FBF4D35CD5DF58229F3354992014FC1BDB2AD3E46D70AB
6DFB94B0082B6BD2C86D3AD2DA8588B6272F79AA7E3F78A4351927AF2E76F972
082DE983AEEB4E5A226804A413E1CC65036547210504E4254BC751F0F21B8132
383ED419E8B40B7BBFFB400FFD62847AACD0EFB7D5C877C1D951060DCA3DCCEC
EA1304282B5118938FCE42CEE88460C16041C338D4F0949826FDB5650281DFA8
F4B6A861BD4B99E937A543304C3940DCB2C9FA550B119A10F35F9869593108FC
AD9EB1F56AD35E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-MediItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-MediItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle -15.3 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-MediItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-200 -324 996 964} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E1D5D732CFAD353E3B2D8
C2EB95195919264C4622E31A19D91AACFCBE5948640C6FF2ED865A61A34D5621
EC8F97345E25F89A2E3CDC64953A73D32C60044ED8C5175D7C40116E16BD025B
405736F8A4BD8D4070948E532BB7864341D6A02CAC612A639B6C94EC233CA648
C252709BD9C80F0E8CE48CF2F94766DF957F078F6AF4A7E5204102810F649186
3B67F9B7D04E783DD36176EBB99E92785F84225B659973AB97B63EC6FEC3D6AF
6C347303452A654C465952A3F0AFC0A74C9276CA0F262DF3ECE72D0E56057A6A
DDF6B9B6D3F64BC46336C8F8AB296E0A502A1B878052317E8F659881D1912278
082486870DC26891FF364E75D72547966C4B7E6C131EA1F71CD02B64104F7513
BA1157E65EFC56F23EB9E296D425562037559648C23DE28D468F61843F23F63C
10081F3DEEE3EBBD10B8E7B4B1B317B6B2116698542675F81AE47CF56F910DFB
878926D16FD18854090DB163B6C3E719A33B542AA70855DC846B98CD83DAB916
91691E259F7AEEE5B3F25435146E8EE16B5E46EC7F62E5B4298AD064A0D66991
3290D798C4CFB5499D96004311B4707DF64CF43724242FB88A88C5E2B53D2976
7F749D893DFC2D5A4280C4992FD60CC672FA505469184B21C6411C916339E7D9
64BCD55D6974362B0939449BD1355F7B99F07D6F3EE674328D1C485299EEDF90
5D5A5284EAD4B9606E8A9E381D623E38C74FD6F93EFBA70FBBCFA73565884CE2
39A5B4864E4852B6EEA8D2EAD8A396C424B4D318BAEC8AAC9CDE1863337C98C2
109A91C2EF30C929EE3F3BBB33E361EFF2812778CCBFCD2E7FFFC7F1F4406F15
BA868C0A90877010683689700681F7EFA9C6A377022865638E3B3CE101B3AF4C
FC4A583B396FC778023F828FCDA979E25395FD87AAFD437C2043CE2D2CE8E377
29A8A22744C233F003CF9B1F0AC9F14D7A187B8768DEE153BF971E35DE1AEAA1
65AF023B6737631A91A680833A0C7FFD06721A0A326E89FF25FEB234CF6ED023
0AD073B3113F6AC4F73696A7A7276F30506AE63589ECEE47BE4421A95E6B8243
746EBF74813266AF9200CCFCD7E26DE76469479963BBCA39FF12A6C27A30BE99
A9B3EC41E1C8BBEAB1B8F1A8F435FF1FD34559C159BF9A9AA6112330437DD1D7
A5ED804CF9A76336396B5AC85F52E32AF95D1E8ACEEDDE05AD35C52CAD452B40
C685E70C394F249E1B6D6A84FC6F1A8F543F4B5AEB3E479FF99FAF492B00C314
1FDDFBDD28C0A28631FDB74874E8DA9CB1BC175A67966F527F478EE6837DBBFC
4ECB03BE50630A9B04301E65E270888A77473C84F15F2BCD2249D705EF92A998
7F3968A74D112B40A94279AA581FC4FDB124B11B683BA5484CC6C201DF87F0F1
05C79882D616159788638F9ED604F7674CD3E28DD94E7A08D50778A512758365
EE6D09B687A7BAA7F4034FF97C512C2C654B255EE2633E3DC186ABA08FD02E92
95A42F6A8BD1210ECA5B21F8B1DD842931D78BECF34BFCF41D02C7EA3B045826
9D67C83EA6B9F5351815E66185FEEF6C71C85056C324BAA2C7919C7E116629E9
63F00FB88D12C366F63AA2D015BF620BA53B1985060B8735BBAF525623E725D4
1D2B5EE0C3F03A603A161713216AF978415F2161F6EC1BEAFBCFDD9C8B335E02
5A19848C2D3E35023D5E0F563059F9959F021413C8DC613D035FC009AE6042E5
8DAF96ECDB80756FC73220A36FA8FF561CCDD985665B84CE4B056D177D9C8AB6
DE487ABEF81C2D25BCA2B4E479414E699B812685A5890DC3F95A7F404E59340C
A51DBFEADFF2D6856FA15A36EEA17FC8717EA1205C78C5192B323E14154DD5FB
270ED7448D9B930ECC63475BBB8CD1B142632FADD1D6C3D2FBCF4D729D7E1313
35C212B30BA91220BFB289D60483C490B04B0CA0A969E41E3F04FA629E2B6649
661C1601E0BA8BF96F5B965079BFB307BF0331BB6CA7811EA76AAAEC1C8ED1C4
2A4C6D58F0683E9AE3BA1773B6162E2D45F7EF6BBEDD9A5A3A74BE4EB0759ADD
DA7C6072F77720ACE22C9983B434CD778C286374763CB7D04CF075F70A8BB95B
F53E8BA3FE48CD123E24A0B9129A29DFA844C6B2085D6A445D1F877635AD1526
4E82740BDA38E755DDF36B38BC481B7EA2D35D3357B8BFA2AA2F95E479422525
34868BC0BDD3AC613B116F84F6AC47CB3022D3751E6B7123FB71403E15415250
B8E2DD8F082C1C06DABB32BCFD7EADC3FA5A495B3BFD9CE4573E0B56214A781C
61DC5E6AC9128ED85906F388A239D55F0B521B7EA7D5A39787EED0C73F2F2634
1622FF8A2E7844FB047452524DE681D9A7E3C878B09D0EAB3B1214182E7DB08E
59E004E2255DBDC4E70E39A3CFAEDCDDC84FAFD1AB548A688C4F7859613305EE
91B9C549CE3D9E2806607E422732EBC81F6BC24689162EB4A741E46AD71C3E2F
92EF983C0CFF9F229ECDF1387960FB843E1A31E4F20296F2B4608AAA26931A72
3A236AEDFF5676ACDE6EE71DC9EEC113043E75966AEB09E1E21DCC69BE4D9266
BEB9644731B8BB4E547F476AD6E7850D0E405AE6523DC0CBB360402425AAF41A
24D9B74A0FE9BAF8DF5F77D27542FE42474DA9CF3ABC86C9A6F2F09DEBB95E39
230C890D911C7DFAC3C36287440EF394B79E4D83F7B26EF4C31E59943A7BC0C6
309835F84EFD13BBB1D2AE839915467572445BF85B73660BC2B57C89B3CFF6C8
5E86E429E7D556DFD365CDD8FF305059420D0B8BC23400D87B75338691E9EF41
59BD6A9E2AA51F2D946ECEC0B542ABE3C6BA2FCED5B84552E1CB2974A831C3C8
28168D14EB24E80D9D8EBD3A689757EF551656B5EB87DF86DA93133B80BE910F
A9EC0FB9C24870C2BE00E1F189F9A635C2B2F371B1559D8BEB245FFAA7955250
F08E8F5DF2C3D020E853171B0D1612A3DFA5264D6B64371270C17FCD8E02E18F
E3DCF62463AD80181F8034395A1FF4E9A4006AB74F8BD0EC6492F63E7E365442
CFEA7AEDAE9271978280C6753045C840785F033D885B728E80A1C04C71314D5D
009BEC8C2C7800410EF399B3909557B418C5C43605FFC8DF9C2D5213CDB00250
395A3EC2D3098ED38FB215797FB89DC38BB03AEE9A29378A8C51C139D72C5A08
7D4B8A3906733A92966C5A8E3CC08750C1E07DF9BA49AD5E54879DD21E4604CC
15FB4B8FC0C8944004642195117E19E7E5B72F4E5BDD99A633C74ADE69492207
BCDEE16620A8A719294A8BA59536C0C99459DF6874FC81FBCC04F0A062C1FBE5
9A98EE06192BA71DA0DF161C797477DFA90D28273E2D9032FEF482A06A8FD0A8
79FDCD3702F72D06E99B9CCF5CB2D47E4E7846106125FFFD68154FF13FDA74FD
C78AA6D61473BD8AECCFBBD8CD7CACEB0333188AFAB1AEF392775B7A50361D74
3D9904111524616DDC2B199CF790ED6262043A642D66A3C815F95D06470E7CD2
B15183F5B3507D7032AA640FA5751C40846188611E976891A2BDFC66EE858D35
E16F84F07033488B1949EE5029CE15CDE30FA4BFECD72111238F2315A9E94E8D
31831EC6E569358F9DCE259542D17B627CF1C749FE8F1D3581BBDFDA99DA9966
71D9C544D7AC4EC43D61AE55987BF22378DDEBB657D087DE8A6A3C971A03327F
EC53F1F43913282D7DD781BC69FFA69B14BBD009A0C0F023D4D6706CCC054637
BAD9B23E06267D9AB0480ED8F243C7A7491600143BD6755257F03DF774EBF4D0
C46F9C2DCC30A54D68D3C20766D3626CD8D71DCD638A3E49FFCA7473C3649713
E087DF8DD4B02241AB3B1541899171BC12C8AB82C773B6CE6C90F7420DB2B423
364F9C248A2A6CE0AE8965030219D48D74707A3F95C1F2139425BCE18BF47BA4
6E09E170272F09F63FC3832A026D05506B499942E56EFB616989B4F2356FF60B
41233F69173CB934BB24B4B57712CFEC986F70A92E81D8411F9F6F0C2122967B
AEE2DC4078ADBB8DC9F1C8A6D8A2EFBF153CA4314449D5F2A08EA1A2BAAA6D39
100EE7E9BB2E1414250DB37082F31D78B3771E97A57C400F062643A5C70008DC
13655D7241194A25388FEDA8896ED44307E85352CB995B47A4712422DFEF01EA
631F6E5F96D2802E32C10DCBCCA358C9A301777283C08EE112583BA315FF9A90
DEC4F7AEDF1C70BCB7143D09AD2065B672BB20632C49E4671C9168366BB2CA30
F4D80745D05A5C944E26BD2C0F0881E7DBAD7A9023B62FEEE1CA7873DA692889
A66771DA94EBB0ADB9C6FE530F3DEF0A5947731C8963554083117746434DF37B
1069E18F80846530A88228B1F44C73E8CF8FF1E99D5CD630CCD73DA84322E4FA
FEB7AF69C96112F0C604165BA33BC813AEEF3795C69DE577B10E82DE60DC2DC5
55E555B8B0B0525195E05BD1F6B603A06E3EB2251E384878E4B6991DE4A7682C
9CB7C10DC55F5105EE4FD6735E7500310FB2DF47A90AABBAA588F9B7C4195B30
8B21CB22FA77B2D478DF4764863F6C3A71144650AB011B2E3FB82A6E4F4D35E2
BBADCBB45CB76EB9F5980FE597E88FCB36AC8C692C4EF24B249173FAE067B8FC
1BCF7EBE0CEEADB782FFA929E83E3A8E4FF1964DD14294B591549BEE2F1E3CE6
C90749A121D50AFBABFC07FDBD0238C6599D01A6FB853266826B73F230D87DCD
97138CA55306C8D08B02E49FC5297EB6A2C747CF71137776BAD56AC7BA2DAFF6
44C5B1F7664D4A5065B1A52E03C895572B75ABED13606850D0F74078414BA221
720F45E4217C6228614B410488AFCDAF0F0113CDE862CD44C84DE8B28F9BA187
6FE4FC476647E18EA5685EBD0E3ACAC93C4FFB1B9291E1C7FE854685BFCF6826
F5171A145074B300ABF3FFA25947BDD7443B08792A50891349D26372D42D048B
943D50B008EB213508DB52BA4CE21F7F926C39C9EC4003FE965D010A72B272E4
7F6C843DFB862F8937A09311B192024EC9A4F9885B12685B287397C160721C0F
C3859F19FFD4982EE96A09215F012E923AAD13492E0331638C051B0E2BB14EF2
75F8799E1F0636B860AB84BA38CBF2AEFAFE0FAF9FC1A29C864CD7B4C336E164
94C7D362360B253FAF05F4F43D1827D3335E93EB4AD4C003F5A2A5ACE5D8DD28
27F92E0C01289A6551F7F2D72184059987AEF34F092B087784AFB136DA90086C
F5BD3152AEFB36FB8C449F9B6B4991F41224FE75C6F26BB1D0FFA30B34F885F2
75EC54B4367A8C2F91DB16C7CF60C67D47DC0AFB6F061D629AB2CA1ACDDB5CD7
B1CBFAF76EE833E519C3715CFF2ACB0984544DB1A80833D0831D0F1B5FF1501A
1E6B6B303E228B8D77415431379DAD60BD2BBB2E140158EF0916BE9323C5E472
70675DBF3F913F8098E22CB56EF8713FC50C0EED1D70D0F14165FDEF1C9FD31D
710AA8EE40F64D6406B67512FA8954C3ADE73DA70B31EE43320D248676246284
4699747B347C32F39F6D1FE1B51822E9C6092E959E8B01821462493942C21F78
C8B819E4BAAF7D3014E517795362D302EF1A8522595F8D82A4718D8F3EE21D9B
D24B48E4B9A10681169D4194CA64ACDCD46BD9A3308325DA63777229669B1743
A91EDD53893F1F288D0C4EF04D652D8CDCA3383CABBFD0F52026F837C6102965
2DB5D5BCD94F72EC249FD3EA6532DDD0A28F6CAC9F1170EB398F530D567A25C8
CD36876A5D88EA320838C6BAA4E8CA711546C4E770892173256A11761910E926
B2A78A15E0CFAA7BB7F02FF7442003BC0C19324F10DE20DE7D36EB69263D6644
0880B9309B6B5FE9CAD150605836FFD27D21F892B9AE92E8480F5B8A2AB1B87B
F3688A86C3D98CADF1E924E6C6725EDE1262199758B2B39792C7A013C8F18B2F
59A440D1EB1FCA7CE575BC41EB676A612DE772A04DABBE688CB3CA04563C1CDB
F1A2F0D275488BD6D6FB58E25B260B776E9BA0BF1ED2E7C0E662632C8CD48063
76DA32B4E2DBC2EF904CD6B018C6D1EF51F1DDD1747C776D97661B60E4C5A035
775D41F7C23232C49FA04B5F771741F0506457C942CA9A9F8B961EB40012EAC1
C44A14B34BD89C64976596C7D5605F2E37A47448866588E1168F4FFFD54FFB2E
9A0BFBE8E821F155094A287D707C5EFA4885FC8B1E1ACB7012BD178A77A4792F
69C2BD82179973677E3E6A05FFDEB96E3631C1BDD2C8142EA8F65123B23C009A
110CC3AD0D6F2A2126D25B8243675D3BFE715D0B609B53DD0CA5D4C0794B38F4
566E584276782414176891A463FC198E0937497813B8C7A4C8CA500356DBAAF8
A8E02DA36BF910BBAE25891046122CC01349D678876BBD433C708CE18B2C1A19
84D23FBB639526E2AB1E075EFB0A1A92F620B700727015D60D9FEB1D41C1B9D6
BC9C6BDD82F37DE3C71CA2D01DFF083956E8BE31694283F29B78B4EF39EC5CC1
33D14C2E464C13F5C41C3C5F83F897DA1B1B82FD8797EEEB29846B6DB84DEFD0
C7F2FDA496A28720AA4043D3256B939B48F07A9C883103BD3AE1758769C16C55
084EE590D2BDD152D70791189213266FF29CEB006708F32AEC52E3A4F818C026
958D2D36622695EFAFBC424FC5AC5BDBC7F358542A751F86FECE854D892CA826
EF3D181AEE474468CD698C0A059B2528B1B5AA3D699721C6CA259C83CF881DBC
B6106F0A25D9885CA8B9E118CF80DC3134A088A64881FC5C7F5336AB0C2577FD
A14924D55E9F1372BFE34009EB2940AB6D3F943D6130E36D5A8C44C80BB787EA
EF3CE097AEA2277DF4CECC6BD9A028B4B53A9ABF13F7A9C468C7780B0F05CB4E
8623072F9884ED79A75221D2A3772863C8692092402C43865262C00410BBB31A
89AD23AC7B57D7EA81FE1DA580CCB52FDE7CBFA758E990A77EBB853406E63A95
E4064CD4DC5903FA1BF5CC34C891A8CB597595279C07CEED888552651930635E
620D5283C7C7C67065D8053907081825CFBBBDD51B9F39B587A1B4927BF82B28
C5E0E314F947ABE611D0116A4040CD614F18E9FF184F3ED7F9F55C21A04F1A6D
F8168FA2286D8C7EBD994E7150D0967F83E13EBBAB33588541AEEC0DE8C53857
43844F51FA314E48DEADBA1FABE0BFD016F19EAFFBC1C6D138B23DEC0D805266
1C9E566BC5BBC90E3E7D07737228915966BD921C486DFC3FFAA3903870ABF407
D8209642D27FCE2CC85BB5DAE1FC5751649009B86F080345504ECBF6A26DFED9
BC3104B7D31460E3FA77DE5FE2F24F7E876D3A2E7E499D9D4104762FD19BA052
6D38D1F39C9E423553C2057392837248E0B9321CAAD83CC8A0D97FE34C50128D
FE49F75A1FEA7FB038BD30EB76410D03D04413B317E6F789048BC0373F3DFEC0
732A013ED4C4912675EEB62758BC4B5E16C9D274DAB5FD497380A30FA985D91D
BAA8F8DE600D7A0506B431F2E6897F39AE5562FFC003AAFCCF7DA4C367EF0752
56650181E23BCBBA364BDE1B3734804F72600587293247C5DB2C5FA1FDFA24E2
7A065EBC126C816B00FF5AF1029041682E2C574CCC244B0A88652F5A1EC5546F
D4DEAA2A82A209E241742FF4447273969913AD25DD44676FBD2AECD4004E6A35
45A294F94CBB55FCA7617F2744370D43F5E2B9EE5BF249171EC037B8D0E4544B
D0B9F026702E30198E883D00DA6175AB87E1A511A61643A607CDD14F0BF896E4
F0B07B725846606A8D52B84515E85BC8750AD38664565161C1822CEFCA1E3718
899444E897FDDE59DF545F945D2B3932CA8DC82512E4336F1034DC4571DE0434
D2C6361B3B709F506BB003180371CB0E112F8A679D60D3386C1290AE4EBFBC53
0B1D8761A740F4EE508D19B02F8BDA71E85190ED5CBC043C3A91234019D2E224
812E06734E9D298FB3B1EB9C376E0E7362C778BC2B8445EDCC440936907EC358
06FE41D2C107DB6BFAE564C9A13E3C88F26CB6454C57DDA8DB5784B1CECB1B85
33C6841C325898A18007940224D93ADCEF1102BAAD478BD034B3176A3CA153EC
85DBDD061D3DA1E90B4ECD6E129C444C8E705FC5071250D082C39901E543F74F
56E4ABC42E346250DAA186DD0C099EFC87217A1AB75F5A9F744E2CA4A0DE16A2
E610730DB2CAFCB79818A6D66025B4F4E462015268D7B6D2706D1A68EDC9E588
4E2CC5E25A0463994429512E1EDE7B30F13B95C4F152FD5488781D88A4C60F8A
2BAD376E2BC035B1FDD17067459BCABC2C43BC82700C962B53C784AC3515CD4C
822953885E58E8E599CBE06E176996DF56AA238C1AB0FB509C4636C58BF2E7FD
F788815C5944B65E7DD4445E0D49DA8C95764F615C5C019F77DC95A55B11DB93
4F2F8E0A5CADD20DEAC352547FD805837A9C78D4DF652EE54D48274F2C017973
B3B0C457343418F83A747F3E7D95D3B0BA66B9D50FF2041DB05B3C6AE7DF3B43
FCB4C9DFE7137906EDC1ECCD91DAF71061952482B88BEF40EC71A8BF3452401A
AF897C921255F872CEAA54A7FA7B13EBF14F586C7AD4490BBCAB5A86455689A6
CC061173685EA46B945D2BD7577402C87FCB7FAE9A9E36681C8D8AE007395692
86CA35E558B9E1CAD17B70DFA1C39CE3B99B12703B78F2677A8A6078B296C893
518DCC71761CA7D1B748C7F61ED758E8518C5A5FAFE998E3552D6A7C8D7B35B5
C85AD3F253859C12AFA5CFD4D715BBC24339A389105FEBA6E0DC21219F392DDB
EA3C652A375A70780DAA4D536ABE914D61B19165DDDC8CCAC89D2FB896653CB3
D93E4E7921342B9878E1A5ACF78B8F23B9667BFB4290E5B169FBB604F4498021
5A1043298DEF2334B86BEE080CD73AE654CBD9A0A8864EF101EB3F11AAA6AE25
0F2DAB97521848F0F4550A407A7FED6A1A58084DAB9F67C4D69068ABC9545784
CC561ABA2B12D46F28F26B17F98454BF0D24057DEA409B4DC7494631A7819615
7C4BEDB8994954514FE7DB2996D88933E3E5A496233036C69ED6147D77E409F9
0C2DCDAA8EAA857E0E41BC1CA625972AD762F46325B06EE383DFDE0884BDCF69
B3A6A5E05BB23B82F3E058213AC52D899B55FA51926C2C5B7E61AB72B76FD062
FFB520EFAAFF95D7BC622810143BD614965BBBAEC53EC182D502DD3F178750DF
7E7961AC02DFDB8F6E1432790936B3F1C217363F543F2CC3CDB948E2902EF213
A594FBF348721C2FC225B9CC6A6318EE9455AD1D77E0D01921BB89FEB4B84CC0
A3F6CD4E1806F3851A580614B9A5E4C9D93503CE66FA2814E5507DA4249E88B6
7A1903E46806EC233643E64DD7F81D3E7E9E110136E32B2DB2D2D5705C46CD3D
8E2495C00057AE34A3B610CCC8642C9CD8BCC2A5F3C341F78EBB50BD2278A693
25C8899662EF3EAB9FD22B187AAE3B568703D584AF89B1B072FDCBD6ABBD2132
B7A8AFAD079EB7F971BB9015C22D331C584E70C4F649DB5F39A6626196A0787A
CF533199341C9148FC61795FEBDD932D6CD36D93432255A8E56CD95A734347F7
A266608E419759560A51608236772ED0CFDF5039260CEE4ED1E507E2E0B630D9
95FFB314E8752EBB121C79156E95BD94FE166C2C209E60651AE829EBC532967C
FF1F6C05EFD9186D290BDEDFA2DF22181C7360575F04B55D8500E95E93C6CFC5
CC0CECCD3D9DF0EF45D57F4BD7032499BCA2013879145D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (PS_Vorlage.dvi)
@start /Fa 138[37 22 1[29 2[33 43[48 44 48 65[{
 TeXBase1Encoding ReEncodeFont }7 66.4176 /NimbusRomNo9L-Medi
rf /Fb 190[30 65[{ TeXBase1Encoding ReEncodeFont }1 49.8132
/NimbusRomNo9L-ReguItal rf /Fc 27[33 105[26 1[29 44 1[33
18 26 26 2[33 33 1[18 2[18 33 33 18 29 33 29 1[33 8[41
1[41 1[37 33 2[41 3[37 4[48 1[41 3[41 19[22 45[{
 TeXBase1Encoding ReEncodeFont }29 66.4176 /NimbusRomNo9L-ReguItal
rf /Fd 148[35 107[{}1 58.1154 /CMMI7 rf /Fe 141[37 2[42
46 69 23 10[42 97[{ TeXBase1Encoding ReEncodeFont }6
83.022 /NimbusRomNo9L-Medi rf /Ff 138[37 26 3[37 1[37
4[19 54[33 50[{}6 58.1154 /CMR7 rf /Fg 194[65 10[42 42
7[32 32 40[{}5 83.022 /CMR10 rf /Fh 148[43 2[48 6[44
10[48 1[49 8[71 15[23 23 58[{}8 83.022 /CMMI10 rf /Fi
240[34 15[{}1 58.1154 /CMSY7 rf /Fj 137[37 42 23 32 32
3[42 2[37 1[23 42 2[37 1[37 42 42 11[60 1[42 9[28 4[60
2[51 6[28 8[42 2[21 28 3[28 41[{ TeXBase1Encoding ReEncodeFont }23
83.022 /NimbusRomNo9L-ReguItal rf /Fk 187[171 68[{
 TeXBase1Encoding ReEncodeFont }1 237.472 /NimbusRomNo9L-Medi
rf /Fl 3[42 5[42 17[37 4[42 2[60 71[37 37 24[37 42 42
60 42 42 23 32 28 42 42 42 42 65 23 42 23 23 42 42 28
37 42 37 42 37 1[42 1[28 1[28 51 1[60 78 60 60 51 46
55 60 46 60 60 74 51 60 1[28 60 60 46 51 60 1[55 60 1[37
4[23 3[42 42 2[42 42 42 1[21 28 21 2[28 28 40[{
 TeXBase1Encoding ReEncodeFont }71 83.022 /NimbusRomNo9L-Regu
rf /Fm 3[33 31[48 97[29 33 1[48 33 33 18 26 22 1[33 33
33 52 18 33 1[18 33 33 22 29 33 29 33 29 3[22 1[22 41
2[63 48 48 41 37 44 1[37 48 48 59 41 48 1[22 48 48 37
41 48 44 44 48 6[18 33 33 4[33 33 33 2[17 22 17 44[{
 TeXBase1Encoding ReEncodeFont }58 66.4176 /NimbusRomNo9L-Regu
rf /Fn 190[36 65[{ TeXBase1Encoding ReEncodeFont }1 49.8132
/NimbusRomNo9L-Medi rf /Fo 3[42 23[37 76[75 3[37 14[37
9[33 37 3[42 25 29 33 2[37 42 62 21 42 25 21 42 37 25
33 42 33 42 37 6[50 1[54 1[54 1[50 42 2[46 3[50 2[29
58 1[46 50 54 2[54 10[37 37 6[19 25 3[25 25 40[{
 TeXBase1Encoding ReEncodeFont }45 74.7198 /NimbusRomNo9L-Medi
rf /Fp 138[42 21 29 29 3[42 58 5[37 25 33 1[33 37 37
6[46 24[50 65[{ TeXBase1Encoding ReEncodeFont }14 74.7198
/NimbusRomNo9L-MediItal rf /Fq 138[46 25 1[30 2[46 43[61
61 66 20[23 44[{ TeXBase1Encoding ReEncodeFont }8 91.3242
/NimbusRomNo9L-Regu rf /Fr 138[100 55 78 66 3[100 1[55
2[55 1[100 1[88 100 1[100 88 12[122 18[144 65[{
 TeXBase1Encoding ReEncodeFont }14 199.253 /NimbusRomNo9L-Regu
rf /Fs 169[42 42 36 32 39 1[32 42 42 52 36 42 23 19 1[42
1[36 42 39 39 42 10[29 3[29 29 29 1[15 1[15 44[{
 TeXBase1Encoding ReEncodeFont }25 58.1154 /NimbusRomNo9L-Regu
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -248 -307 a Fs(PR)n(OJEKTSEMIN)n(AR)18
b(R)n(OBO)n(TIK)h(UND)h(COMPUT)-5 b(A)f(TION)n(AL)18
b(INTELLIGENCE,)f(V)n(OL.16,)i(SS)i(2016)-248 -140 y
@beginspecial 0 @llx 0 @lly 540 @urx 17 @ury 5140 @rwi
@setspecial
%%BeginDocument: ./pics/rmr.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: vorlage rmr.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: valansel
%%CreationDate: 12/9/2014
%%BoundingBox: 0 0 540 17
%%HiResBoundingBox: 0 0 539.0625 16.9922
%%CropBox: 0 0 539.0625 16.9922
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.3
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 16.0.3 x691 R agm 4.6676 ct 5.2594
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 4 8
%%BeginData: 2627 Hex Bytes

%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45818181808181818081818180818181808181818081818180818181
%808181818081818180818181808181818081818180818181808181818081
%818180818181808181818081818180818181808181818081818180818181
%80818181808181CFFFFFFD05A8FFFD0FA8FFAEADA8FFA8FFFFFFA87A817A
%817A817A817A817A817A817A817A817A817A817A817A817A817A817A817A
%817A817A817A817A817A817A817A817A817A817A817A817A817A817A817A
%817A817A817A817A817A817A817A817A817A817A817A817A817A817A8156
%81A7FFFF7D7D7D527DA8A1527D527D527DA87D527D7D7D52A8FF8182FD04
%7DA87DA88180818181808181818081818180818181808181818081818180
%818181808181818081818180818181808181818081818180818181808181
%818081818180818181808181818081818180818181808181818081818180
%8181818081818156CFFD0AFFA87D7DA8A8FD047DA8A87DA8FF81CF7DA8A8
%A87DA8FF7A8156817A8156817A8156817A8156817A8156817A8156817A81
%56817A8156817A8156817A8156817A8156817A8156817A8156817A815681
%7A8156817A8156817A8156817A8156817A8156817A8156817A8156817A81
%56817A8156817A81A7FD0AFFA87D7DA8FF7DA87D7D7DFF7DA8AEADFD07A8
%FF
%%EndData

%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0

%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2014-12-09T15:16:46+01:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>8</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgACAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AlmeVuI7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqzP8r/8AjrXf/MP/AMbrnR+zf97L+r+ltxMi&#xA;13yfq2pX891a+Yr3TknXj9XhJ9NKRNGCg5LQ8n5t7gUp1PYtynZeTdct7WW3m8yXc4mVVaVuYkQC&#xA;Non9NjK3EkOzAmpD8TvxoVWH67pfmXRbmOBNW1/U4kMNq7QrMxRXbnFOXWVOY2aJzRm25SGhGKuf&#xA;TfMenabG1xqmv6m2pQTLG8LSB7aW25BZaI8ZZZQ/JdhUKPhriq63j8037T2sN3rsM03qxLdXXKJI&#xA;y0v1dZY3jPAsOQdhw4gV4gH4wqm/lm513/B+t3Hq6m159aljto9QVvrCAOAWiqCfTfkzJQmg2FKc&#xA;RhdoSnHBIwvirauaJcl89p5iS4ljhvb9Yop7W2joWIMUqEyybg1Ib9rt92X4MfBARsmh15qFXSk8&#xA;x3OrW1hc3V7HZ2r3BM/xK0io/wAAkcj4qj+zLkv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>210.001652</stDim:w>
            <stDim:h>297.000132</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>True</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Standard-Farbfeldgruppe</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5

%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -16.9922 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 16.9922 li
539.063 16.9922 li
539.063 0 li
cp
clp
0 0 mo
397.334 0 li
397.334 16.9922 li
0 16.9922 li
0 0 li
0 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.5 0 1 0 cmyk
ef
539.063 3.58252 mo
537.471 1.9917 535.077 1.51611 533 2.37744 cv
530.921 3.23779 529.564 5.26709 529.564 7.51709 cv
529.564 9.98828 529.564 12.4609 529.564 14.9336 cv
530.802 14.9336 532.037 14.9336 533.273 14.9336 cv
533.273 12.4609 533.273 9.98828 533.273 7.51709 cv
533.273 5.86475 535.271 5.0376 536.439 6.20557 cv
537.313 5.33154 538.188 4.45752 539.063 3.58252 cv
cp
0 0 0 .5 cmyk
f
527.711 7.51709 mo
527.711 5.32275 526.421 3.3335 524.418 2.43799 cv
522.416 1.54248 520.073 1.90771 518.438 3.36963 cv
516.804 1.90771 514.462 1.54248 512.459 2.43799 cv
510.456 3.3335 509.167 5.32275 509.167 7.51709 cv
509.167 9.98828 509.167 12.4609 509.167 14.9336 cv
510.402 14.9336 511.64 14.9336 512.875 14.9336 cv
512.875 12.4609 512.875 9.98828 512.875 7.51709 cv
512.875 6.49268 513.706 5.6626 514.729 5.6626 cv
515.754 5.6626 516.584 6.49268 516.584 7.51709 cv
516.584 9.98828 516.584 12.4609 516.584 14.9336 cv
517.819 14.9336 519.057 14.9336 520.293 14.9336 cv
520.293 12.4609 520.293 9.98828 520.293 7.51709 cv
520.293 6.49268 521.123 5.6626 522.147 5.6626 cv
523.171 5.6626 524.002 6.49268 524.002 7.51709 cv
524.002 9.98828 524.002 12.4609 524.002 14.9336 cv
525.238 14.9336 526.475 14.9336 527.711 14.9336 cv
527.711 12.4609 527.711 9.98828 527.711 7.51709 cv
cp
f
507.312 5.6626 mo
506.288 5.6626 505.458 6.49268 505.458 7.51709 cv
505.458 9.98828 505.458 12.4609 505.458 14.9336 cv
504.222 14.9336 502.984 14.9336 501.749 14.9336 cv
501.749 12.4609 501.749 9.98828 501.749 7.51709 cv
501.749 3.67627 505.547 .991699 509.167 2.271 cv
508.227 3.26807 507.645 4.33252 507.312 5.6626 cv
cp
.5 0 1 0 cmyk
f
447.189 9.67578 mo
446.478 9.67578 li
446.478 13.0254 li
446.457 13.9277 445.929 14.416 445.117 14.416 cv
444.305 14.416 443.777 13.9277 443.756 13.0254 cv
443.756 9.67578 li
443.044 9.67578 li
443.044 12.8516 li
443.022 14.2051 443.721 15.043 445.117 15.043 cv
446.514 15.043 447.211 14.2051 447.189 12.8516 cv
447.189 9.67578 li
true sop
0 0 0 1 nzopmsc
f
452.094 9.67578 mo
452.094 14.0234 li
452.08 14.0234 li
449.572 9.67578 li
448.596 9.67578 li
448.596 14.9336 li
449.23 14.9336 li
449.23 10.4707 li
449.244 10.4707 li
451.844 14.9336 li
452.727 14.9336 li
452.727 9.67578 li
452.094 9.67578 li
f
454.063 14.9336 mo
455.771 14.9336 li
456.248 14.918 456.754 14.8828 457.168 14.6133 cv
457.916 14.125 458.258 13.3027 458.258 12.3047 cv
458.258 11.3066 457.916 10.4844 457.168 9.99609 cv
456.754 9.72852 456.248 9.69141 455.771 9.67578 cv
454.063 9.67578 li
454.063 14.9336 li
454.774 10.3027 mo
455.814 10.3027 li
456.533 10.3027 456.918 10.6016 457.117 10.9004 cv
457.424 11.3516 457.51 11.8164 457.51 12.3047 cv
457.51 12.791 457.424 13.2578 457.117 13.709 cv
456.918 14.0098 456.533 14.3066 455.814 14.3066 cv
454.774 14.3066 li
454.774 10.3027 li
454.774 10.3027 li
cp
f
465.048 12.5586 mo
465.334 12.582 465.618 12.5586 465.824 12.8008 cv
466.061 13.0625 466.061 13.4922 466.115 13.9648 cv
466.152 14.2773 466.238 14.6211 466.302 14.9336 cv
467.063 14.9336 li
466.879 14.4395 466.822 13.8789 466.744 13.3535 cv
466.666 12.7637 466.579 12.4297 465.959 12.2754 cv
465.959 12.2598 li
466.559 12.1152 466.93 11.627 466.93 10.9941 cv
466.93 9.95313 466.037 9.67578 465.176 9.67578 cv
463.338 9.67578 li
463.338 14.9336 li
464.05 14.9336 li
464.05 12.5586 li
465.048 12.5586 li
464.037 10.3027 mo
465.211 10.3027 li
466.003 10.3398 466.182 10.7031 466.182 11.1191 cv
466.182 11.5332 466.003 11.8984 465.211 11.9336 cv
464.037 11.9336 li
464.037 10.3027 li
464.037 10.3027 li
cp
f
468.648 12.3047 mo
468.648 11.1836 468.947 10.1934 470.25 10.1934 cv
471.555 10.1934 471.854 11.1836 471.854 12.3047 cv
471.854 13.3965 471.555 14.416 470.25 14.416 cv
468.947 14.416 468.648 13.3965 468.648 12.3047 cv
467.9 12.3047 mo
467.9 13.8418 468.648 15.043 470.25 15.043 cv
471.854 15.043 472.603 13.8418 472.603 12.3047 cv
472.603 10.7695 471.854 9.56836 470.25 9.56836 cv
468.648 9.56836 467.9 10.7695 467.9 12.3047 cv
467.9 12.3047 li
cp
f
489.438 14.9336 mo
489.438 9.67578 li
488.726 9.67578 li
488.726 14.9336 li
489.438 14.9336 li
f
491.796 14.9336 mo
491.796 12.1445 li
494.168 14.9336 li
495.172 14.9336 li
492.615 12.0273 li
494.916 9.67578 li
493.939 9.67578 li
491.796 11.9551 li
491.796 9.67578 li
491.083 9.67578 li
491.083 14.9336 li
491.796 14.9336 li
f
411.465 5.27686 mo
411.75 5.29834 412.034 5.27686 412.242 5.51709 cv
412.477 5.77979 412.477 6.20947 412.534 6.68213 cv
412.569 6.99463 412.654 7.33643 412.719 7.65088 cv
413.481 7.65088 li
413.297 7.15479 413.238 6.59521 413.16 6.0708 cv
413.082 5.48096 412.996 5.146 412.377 4.99268 cv
412.377 4.979 li
412.975 4.8335 413.346 4.34424 413.346 3.71143 cv
413.346 2.67041 412.455 2.39404 411.593 2.39404 cv
409.755 2.39404 li
409.755 7.65088 li
410.468 7.65088 li
410.468 5.27686 li
411.465 5.27686 li
410.453 3.02002 mo
411.629 3.02002 li
412.418 3.05518 412.598 3.42041 412.598 3.83643 cv
412.598 4.25049 412.418 4.61377 411.629 4.65088 cv
410.453 4.65088 li
410.453 3.02002 li
410.453 3.02002 li
cp
f
417.715 7.65088 mo
417.715 7.02393 li
415.144 7.02393 li
415.144 5.28467 li
417.537 5.28467 li
417.537 4.65869 li
415.144 4.65869 li
415.144 3.02002 li
417.658 3.02002 li
417.658 2.39404 li
414.432 2.39404 li
414.432 7.65088 li
417.715 7.65088 li
f
423.13 3.70459 mo
423.088 2.69189 422.125 2.28369 421.258 2.28369 cv
420.381 2.28369 419.627 2.60596 419.177 3.40576 cv
418.914 3.87939 418.734 4.47607 418.734 5.02197 cv
418.734 5.76416 418.935 6.64502 419.504 7.15479 cv
420.067 7.66455 420.658 7.76025 421.385 7.76025 cv
421.969 7.76025 422.561 7.63525 423.152 7.45361 cv
423.152 4.854 li
421.271 4.854 li
421.271 5.48096 li
422.439 5.48096 li
422.439 6.96631 li
422.111 7.07471 421.763 7.1333 421.414 7.1333 cv
419.939 7.104 419.541 6.36865 419.482 5.02197 cv
419.455 4.03955 419.911 2.91064 421.172 2.91064 cv
421.721 2.91064 422.254 3.07861 422.383 3.70459 cv
423.13 3.70459 li
f
427.613 7.65088 mo
427.613 7.02393 li
425.041 7.02393 li
425.041 5.28467 li
427.436 5.28467 li
427.436 4.65869 li
425.041 4.65869 li
425.041 3.02002 li
427.557 3.02002 li
427.557 2.39404 li
424.33 2.39404 li
424.33 7.65088 li
427.613 7.65088 li
f
431.918 7.65088 mo
431.918 7.02393 li
429.524 7.02393 li
429.524 2.39404 li
428.812 2.39404 li
428.812 7.65088 li
431.918 7.65088 li
f
436.955 2.39404 mo
436.242 2.39404 li
436.242 5.74268 li
436.222 6.64502 435.693 7.1333 434.883 7.1333 cv
434.07 7.1333 433.543 6.64502 433.521 5.74268 cv
433.521 2.39404 li
432.809 2.39404 li
432.809 5.56885 li
432.787 6.92236 433.486 7.76025 434.883 7.76025 cv
436.278 7.76025 436.977 6.92236 436.955 5.56885 cv
436.955 2.39404 li
f
441.859 2.39404 mo
441.859 6.74072 li
441.844 6.74072 li
439.336 2.39404 li
438.361 2.39404 li
438.361 7.65088 li
438.994 7.65088 li
438.994 3.18799 li
439.01 3.18799 li
441.609 7.65088 li
442.492 7.65088 li
442.492 2.39404 li
441.859 2.39404 li
f
448.08 3.70459 mo
448.037 2.69189 447.075 2.28369 446.205 2.28369 cv
445.33 2.28369 444.575 2.60596 444.125 3.40576 cv
443.862 3.87939 443.685 4.47607 443.685 5.02197 cv
443.685 5.76416 443.884 6.64502 444.453 7.15479 cv
445.016 7.66455 445.608 7.76025 446.334 7.76025 cv
446.918 7.76025 447.51 7.63525 448.102 7.45361 cv
448.102 4.854 li
446.221 4.854 li
446.221 5.48096 li
447.389 5.48096 li
447.389 6.96631 li
447.061 7.07471 446.713 7.1333 446.363 7.1333 cv
444.888 7.104 444.49 6.36865 444.433 5.02197 cv
444.403 4.03955 444.859 2.91064 446.121 2.91064 cv
446.668 2.91064 447.203 3.07861 447.331 3.70459 cv
448.08 3.70459 li
f
449.144 6.11475 mo
449.115 7.29346 449.898 7.76025 450.974 7.76025 cv
452.014 7.76025 453.061 7.33643 453.061 6.14307 cv
453.061 4.81885 451.772 4.81885 450.824 4.50635 cv
450.376 4.35986 449.963 4.32275 449.963 3.7251 cv
449.963 3.1001 450.654 2.91064 451.16 2.91064 cv
451.673 2.91064 452.156 3.11377 452.186 3.70459 cv
452.934 3.70459 li
452.934 2.68604 452.071 2.28369 451.194 2.28369 cv
450.232 2.28369 449.215 2.70752 449.215 3.8501 cv
449.215 5.02979 450.625 5.22607 451.473 5.41553 cv
451.9 5.50244 452.313 5.71338 452.313 6.22314 cv
452.313 6.9585 451.602 7.1333 451.017 7.1333 cv
450.326 7.1333 449.906 6.85596 449.892 6.11475 cv
449.144 6.11475 li
f
464.258 7.65088 mo
464.258 7.02393 li
461.688 7.02393 li
461.688 5.28467 li
464.08 5.28467 li
464.08 4.65869 li
461.688 4.65869 li
461.688 3.02002 li
464.201 3.02002 li
464.201 2.39404 li
460.975 2.39404 li
460.975 7.65088 li
464.258 7.65088 li
f
458.971 7.65088 mo
459.682 7.65088 li
459.682 2.39307 li
458.492 2.39307 li
457.039 6.7251 li
457.025 6.7251 li
455.543 2.39307 li
454.268 2.39307 li
454.268 7.65088 li
454.98 7.65088 li
454.98 2.91846 li
454.994 2.91846 li
456.641 7.65088 li
457.31 7.65088 li
458.955 2.91846 li
458.971 2.91846 li
458.971 7.65088 li
f
467.084 7.65088 mo
467.796 7.65088 li
467.796 3.02002 li
469.52 3.02002 li
469.52 2.39307 li
465.359 2.39307 li
465.359 3.02002 li
467.084 3.02002 li
467.084 7.65088 li
f
471.31 7.65088 mo
471.31 5.27588 li
473.752 5.27588 li
473.752 7.65088 li
474.465 7.65088 li
474.465 2.39307 li
473.752 2.39307 li
473.752 4.6499 li
471.31 4.6499 li
471.31 2.39307 li
470.598 2.39307 li
470.598 7.65088 li
471.31 7.65088 li
f
476.155 5.02197 mo
476.155 3.90088 476.454 2.91064 477.758 2.91064 cv
479.062 2.91064 479.36 3.90088 479.36 5.02197 cv
479.36 6.11377 479.062 7.1333 477.758 7.1333 cv
476.454 7.1333 476.155 6.11377 476.155 5.02197 cv
475.407 5.02197 mo
475.407 6.55713 476.155 7.75928 477.758 7.75928 cv
479.36 7.75928 480.108 6.55713 480.108 5.02197 cv
480.108 3.48584 479.36 2.28369 477.758 2.28369 cv
476.155 2.28369 475.407 3.48584 475.407 5.02197 cv
475.407 5.02197 li
cp
f
481.229 7.65088 mo
482.938 7.65088 li
483.416 7.63525 483.92 7.59912 484.334 7.33057 cv
485.083 6.84229 485.425 6.01807 485.425 5.02197 cv
485.425 4.02393 485.083 3.20166 484.334 2.71338 cv
483.92 2.44385 483.416 2.40771 482.938 2.39307 cv
481.229 2.39307 li
481.229 7.65088 li
481.941 3.02002 mo
482.98 3.02002 li
483.7 3.02002 484.085 3.31885 484.284 3.6167 cv
484.59 4.06885 484.676 4.53369 484.676 5.02197 cv
484.676 5.5083 484.59 5.9751 484.284 6.42627 cv
484.085 6.7251 483.7 7.02393 482.98 7.02393 cv
481.941 7.02393 li
481.941 3.02002 li
481.941 3.02002 li
cp
f
489.916 7.65088 mo
489.916 7.02393 li
487.344 7.02393 li
487.344 5.28369 li
489.737 5.28369 li
489.737 4.65771 li
487.344 4.65771 li
487.344 3.02002 li
489.857 3.02002 li
489.857 2.39307 li
486.632 2.39307 li
486.632 7.65088 li
489.916 7.65088 li
f
494.538 2.39404 mo
494.538 6.74072 li
494.524 6.74072 li
492.016 2.39404 li
491.041 2.39404 li
491.041 7.65088 li
491.674 7.65088 li
491.674 3.18799 li
491.688 3.18799 li
494.288 7.65088 li
495.172 7.65088 li
495.172 2.39404 li
494.538 2.39404 li
f
485.068 14.9609 mo
485.78 14.9609 li
485.78 10.3301 li
487.505 10.3301 li
487.505 9.70313 li
483.344 9.70313 li
483.344 10.3301 li
485.068 10.3301 li
485.068 14.9609 li
f
474.141 12.7129 mo
475.55 12.7129 li
476.321 12.7129 476.497 13.1133 476.497 13.5293 cv
476.497 13.9453 476.34 14.3047 475.407 14.3047 cv
474.141 14.3047 li
474.141 12.7129 li
474.141 12.7129 li
cp
474.395 9.73047 mo
473.443 9.73047 li
473.443 14.9883 li
474.84 14.9883 li
475.365 14.9883 li
476.256 14.9883 477.178 14.7012 477.178 13.625 cv
477.178 12.7715 476.705 12.4199 476.139 12.2949 cv
476.636 12.1563 476.986 11.7168 476.986 11.082 cv
476.986 10.041 476.143 9.73047 475.28 9.73047 cv
474.395 9.73047 li
474.142 10.3574 mo
475.317 10.3574 li
476.106 10.3945 476.286 10.7578 476.286 11.1719 cv
476.286 11.5879 476.106 11.9512 475.317 11.9883 cv
474.142 11.9883 li
474.142 10.3574 li
474.142 10.3574 li
cp
f
478.933 12.2422 mo
478.933 11.1211 479.231 10.1289 480.535 10.1289 cv
481.84 10.1289 482.138 11.1211 482.138 12.2422 cv
482.138 13.334 481.84 14.3535 480.535 14.3535 cv
479.231 14.3535 478.933 13.334 478.933 12.2422 cv
478.185 12.2422 mo
478.185 13.7773 478.933 14.9785 480.535 14.9785 cv
482.138 14.9785 482.886 13.7773 482.886 12.2422 cv
482.886 10.7051 482.138 9.50391 480.535 9.50391 cv
478.933 9.50391 478.185 10.7051 478.185 12.2422 cv
478.185 12.2422 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5

%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.3
%%For: (valansel) ()
%%Title: (vorlage rmr.eps)
%%CreationDate: 12/9/2014 3:16 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!T<kB8=:Zf(aFC\]!d&W@0iK/:n8kA6;u[P;1,$/^ehRX'X5JU+Lt.<MV[:5"&Ygt?<\%+T*X<%:n28m5?<[0Ng;U\0abs1K23
%ba9R]0i^Sj-"H(uKn[4[7D7k]->f37KF/W36'G8I>#1WBU;/:5G'3:[DtVGfm:s>dbI<u.DJq+ms/4Y0h:J.@p0Y(0ZX!GqA[D:!
%CT5^_QeL9aE^(mCB`URikqtD51i"Ikmn1:*(=Pqh_rXs)gNB^t;+EL\G7<)1pV.=(ZJP&FAg1b^bsMF)rfD':>"kal,p(CT]j;^&
%m=*SicUh/_\(q&r<.OsH9f4L?JfHQ\0l<9ZCVs0N]@/>*l]`B8)Yu+[:[U:pME6NNXU8c.&d/Mj&J\"p8G/ioi9F$&Q0C@grT\kj
%l@5qTcLRdc=8Sg,-!Ib3^MNfQd6LYF5p2fldD_b]mp<IAIFJYQ@["HRgof1sW53WlV.TOUp(c+dJ'ns2jmGXPO2erj*:t3;elp;%
%Yb7+=.fWH9E_&qep"!.?"uf\Jjg6S^C/!0c[&.PP9TFrVlFnYhTVQ"$AkWmr$bL)%;B/LV<6#R70W8VtS56bVO%*oE[8_Y3m5A_Q
%i9O:b+<S*PBnQ<?AH1+J,80YGobQis@_DUna$rDlplaXHqF&Q[.Q7nF7EL?70g%[@FjuR@\R.gSeg*De=8t@JqkmfiTn`^G-d2"Y
%C%,i*n<qTY-mF`]TC>gGiMeAlVg+`bCRPIH&.pepKOUAS`AF\r@[3B/PVGl\A"nJJFjl"QV?t6")gjuWHle1,oC-KY%o;bA-rVV3
%do&cdnEZn`'I]6f9;Kt2aeV?.-[?'&ZKEts1Al]4cnG0I@aHdZ>Oi1`"eSTq3X).cmu/7IA`sqX_Ct*eHpUhd=JT]q'R\oS_\W;?
%^AodX.;8esK<E$<PUVjt`^U7nSktm&P)p#7afD63U][FgUicf)DEJjf<eUC'@aIX?KW<*YP+IkMFPu'b'SATTOX?kI01-i?'7N4P
%#p6r1D*3@,'8f'tiKFZs@2D78dK75+GQBapE=s3OdR6EK-q9$5BL@)A3e//FRRSup]%O<M,4$D9JIXFVKb!+o8^GLgkTbIA0uE8'
%7m\$_142D+kTG2BEB0L[KR<n-iH3)bN+j-diPlOs+\]^!#od)8IF:;GH\.Xs%l^'h%-o!L4qqN%8bJk\nsoWQN@,C)E&JS\66K/p
%$3)6OCsRS$%XO\j?@/7u@bL@'E&sHj2CIM9D/Nf=h]?W(CO7n29oPV;FdjYX\ZEm]1T?bS.Z+<,#Ci_O'^7hR,*2**j<*SFph0UQ
%s3U)38jN)Wnk[lZDu23`B,K^=@9D.kqCe<aO6jXB?S4itgOI=0oQm2r5k\RUY?3'bmD%_S@/Zj@*l\aTanV%VlkfI*I?]u/U)G6T
%:DiIPH@=:EpqQ=pR'1gFVgM>Qe?"6$QJc\iQn@72#'l^roW05$=cAo!*U!J&Q`mG.IQa`!J+Ng?Vb0#8AQFK!m!mM`r0KO$rZ`ma
%Lb?KtjDi`fL]2,J`Z.&1qUg`_KO*.!0\TYl[KT>0"+!PQkloN,I#7b*]8H^s/K%9XrIl[Vi[aq6T_t1\qHufui95Ne7"uKV,Muo6
%TJARr4.c'P`E!GL9DUO'rW^]AB3ChI]kOo>kYq?`IYQ)!6&1oW)";k"7P?T%@,0'*EC-67Y@l)\HFV^H%m'Tip\)fQM/9;"WQ/oA
%eUG,g]Sp%\[.4V'8B)8ijm)#!rBKsEos7Xg<c0ID]JKc#b,3@A:,8VSA92t\1%H$lMgqJ9n*i9Yqh=l.ne^[##^#N,es0jRhHG=E
%oZI.4I(*mD-@/j3rE4'I47u^d<K#\!]:C>ucC3iq\JrEs(^@_2fRBl.n!:`bNB^q1AV:a43bnSL?7[>t7`'[\RLZ&1IL2?\@LF[$
%4c4omh#BbpGJ.#B=g_mH+&*Tk60i$:@^mYYI$EnLs7rh)RuQ:6<B1Sp^.2ug,&?MO7@N!PoKHbdm<6sYq0:7R"ZhWDYMOB/)Yp`#
%]mgb@X0<BQQotC#:uogEB&fXjmX-pm?<@^%oCk`1':I2DOgqHLLWU"jAZ,O"7_.c?EVQqk*AYciZ!shdA>bJ"#V:&m=1M]:N#ac*
%h/]u%&"0ORf^Ff#%5mcud-0(5,g[FU.j+Fj^&O]g'$s1^Js\hWPdhOrlIAt3DKp<0\f.S^9_&T9=8dW;&0T(7[b?5=n?:I_C>e,`
%+3E_e\+Z>NAPUD*p"0U$FP6HW2!\0k+a+27jM*ACHGP&gYs\:9dYE&H^omk4m2(BQ'bc;REU<3uLt-+a6hD-^S*k"s"W#gsopJ$R
%)5LKp$Z7W_,M1Z=DP&(@J;/t=kH$u]G_I*1EBWNi3sp767K;Oe>ZQiZdIsNdlT=>kg`o^/bcqicnrO-$W9Sjd33(13ots%!c/P;D
%c?[Yg!":gaCfDSS=RQ/U!I)RS-gb*nkOEjLnb776KaOoUajY*+#09P2!\9t]fl":s?Wt^=Y]/^(T1Gc%_;`8,Uf[iS,5,OAkl9,2
%e&R<a<q#_-EjrN<k0t]od/%^IrNk9!=G>^"c_k.Y9h8HJ[\i6cq;7cCPm1RV&>N&/OVHL#-^Z4maMes&q,_[HeSb1?h9jV^]D>O2
%7Hu-K3_cK=S.K-`+ejs=UKhNa,L)/qU\k(=n4+9%CO\ei$W-QS_;rth.^J-ihu<cJpKLdB%@M1V9EH5l"ANu5rNDSIW'UHlpAFqJ
%Q$_tLr<rDt^O[[!2&k*GJ&JjqO^/flMgDoOd-K#(j5VrD'XWbs/&\nHRq-_7=9nk@eG>f"qF=3X/%TB\U'^/B5EWPNcbH8[Or;uI
%^SAoDIn>EWfZCPU62ddiqoH]8Wk\;McBLlU)h.$Y@ng>cH.a6\X*))Jlec,G+>*>kBZG>1?`kP6CC6%U-Z7.5N<W$"nJkUKK*7&R
%2SNb7ol:hO.<t*#pT2gQ;i0bM/u1qPUbi"Oh.ZJ$]+]E&RY.d]W^<K4BpScZ/pG'4+!+f5U>C37rh'4Erl2bR^2>g.W:d5^SDu.U
%l#N*'@![FldhB67>h#6Em0h>Fd\a?oY5s'eO!Ui0Ci`tUG=AuKf^EC`rCX]WXVL-ij[#)SoPGXWAM@7ih]ImurB?rU4dI*2!rVND
%T_7h;9RuKD.)r?u(gbmRdB.3WDX=G4OkU^K,un>pb3kb(j*L/MG#<u?NQ-Ijd#j^/XcL1?$]\:`#Q;r@+8-<d<Nl*:Q!5>_njbid
%f'Yf5HGu)1A;t$bP\W.g>!gp2Epq1Gm9Z^HGF'g=)b`ff9Us]qNATZ,$ECP(?$eJ?pCYgMD6&_?GHJAVCs']1>4(TV)q!`!K\qF)
%2@uG%rHbOHX(Z/LLJ+,A::Z"sY1NFi1s6k1-&\R2XPYV=HCZf((tF*Ig-uMd\!j9gMI^[[bETbN<S6[VP7[9c2f!f`7BPpO>IVOO
%B]6*/#1?IN<rIr6Hm;#%nneXaCpu^[A4*e_1+ph<>CVrcQSpuqa&(bUebufq];knea6PD?8u()'s23fnF`P[1YS$OCFS\G>k*dL^
%;QrUA_CQ0g:j;HQC:RJkZ&$$9Q*!*%SJA'iE*7,IQ2?@QGThFKd,Usc?eM24C'7'F7qo]U(&6C2g?q(geukm9RdG:mo_lI)B13Qc
%ckW15iR5?nkUWZ?`Ba?!\Q[#]gl,R.,l1LMjnY>Sd1k&uK(OVf+O)%-MB4r>rN`7>=9B#iY/?Q;,SH1_m$CpVCGu()Dui.*naF2o
%[s@-1/03#b\6.%JHia"n6k8jpUhb;';"=2_GO)V7Y1f'hW+'!o)@tc#DC4jk#e%PimGOhP&::l#/X$+X7]RTr,FMr=9ttH7ok*gD
%>H;FBS`Nne&OZDqbS4.\q=R'Xjp\i)m!`ZqCbj+TK+K2L6Vepb\(C)W^FV%TT+GO23[c0J&fJ9I8)=7kK]HM/*c):#\+]UT67<At
%/?Bbe+U1WtS3tVJ;PMl]FHC*b&F&(C1OL>90li'OB>j<.FKnuQqBt.R'W[Ifgh\h^)+t8fB#lZ2;5=?W9%[6F#LYUZP[CaY9F8-,
%XEQb1HJ0;N;n<iH9ED7Lri:3tQW:UL16DgL7]u'SghQIF&VoqBNRKSN19Qr=$8:/IfPf=*Ip^d-m8e'*$#YkPLV7^5F\J'#(O;s]
%l@qcSSAs7C)/`_Z$C)OcT%+$>B?V<?]Q"lQ#<Yi!i)\_lH4==FJYKO5iMn@5iJ?f-*WK9_11?s_i&:]Vi%It0?<`13=52P7^#ia<
%`A/h.^@O>u>t7GW0HY8Ki8pno;@N@H]A7M0!DWc6=<sJBTW^iA3W_U.WlK$dRs!pH-S@,S4M)RR)0me82OA4V,\n<>DE4m9[lqfr
%FfJ/Tfg&nV6!r>p'e_dkNHpW[Gq/89SFYNBp69=698AfIr/+e5\mMoe&5n7-Or:PE2O8E_%+/)Ke1K+D&WG($3lRb6(s,=>&SX]A
%LD.p8cA-/1:dhV:)VoKKH)J7([WQ/_dD@pd@Q0m-;8?_efYQ1`YBD4O.kEWKbfs\>mBIOTU\mtZme_dO,CVM*'^L0)3Yb&M0:2<O
%Qg<4"pNq&H;E(C"ns#WP>Y>JqS_Pm&cL]jq\,9g1pd)Ln]+&8?$Q)?Q^XcC'rU2KY5XQ,2,)c6eSWE6C2"Ecp[J'KERRG_pX5mJ+
%BDN+'pS,F/qE_<F/Fa_X[&5OkFYSE(5k6r_LGP_dKX03JVJ@HEL`+,Lb`H7bpZMuikVpXWS_?#Kgh]Dt=/QhIHEmprI`6*P4.RuU
%(Glo+&8_C`rfneU@7Fi('gJ4%m9A#Dp?Bh6W)Nj3c-oBt,=F'8Dg*D5PEbKU9aGVg.IU[#6t+HEI`AP%ogT+!#"5:WX&8?ZK1?.r
%CH8cB0Z'iZP5_;pWCSLSo<Fp<lJ1KU(]kMkJ^P*L=0)'6+"aZmX/ALkd$:fM3cW:8H_]g`._V[+NsN/W'%],t_gQHHdkGQ)MBM'f
%.>9qgc@\.\74mV(JKl)7OLf)pDCphfHXo7)4]V^@-/Xi-n_*@0`ta_\([KG%Q9`I*Ld0>(bX`,H]kF.u>HA('<NERTJq&OIZrcWO
%X8`<Y0N+k'l34IN.b$u6#JYH?dn;N.c#P053G?7%%U`:<Da>4!:fKfe*pb,4`lkkSOmUq7M=M:J"oUpJSmQ2Y5KHZ(,k8\&F:"rI
%FWOS^g22&Nb(-&75W2D?3J]`hOIQZG.g.N,@8tD*?I4cpXccM?j=&jIq\</!=%X(K.BXs/9%tqS:mc0Xf?APZp!^<\LdWMB3o0OR
%.o73P\_`ugbu351[!J[_J(B72G>tBd!:)RWd!P"XrM.Rg^AF,rG6XJR]au6:Jk.Q&6>C:n:g_lcAU?4#0AZLV,Bok'6nKfemmH<E
%L"^1g_m;O.1#5JAr7sq+A$3,qKbkKi%QOhTdc"3u_on\A.S*Pd([1T3>Iu!aZ%j#^.PM\iX9FiZI_&=sG,H6(EH$b@d.$'.[=NPg
%_06uQX+h2W"F5m<#g*8dHQTVp6!QbadBJDF3?]:D^Jo*YX:59gmQ)s9l?Q@DH!;e]D^4/M(+YsD?=[V'p6=4E4H52\VWb)/RNr0]
%;_l9-r'j^1D``95USn_`F,a33)rd=-8jW.IT:cGj=0gZ^X?/=-=AF70Q&dq,Eim]KC2`c)C]%IVT%1IAFg$spjZi(OaAZkrRe<a4
%Eaj`>L/q5Wje:KF6Y/I9J*f+.>YK;hY/"W=\MDC%X!I?HU/L@:bT@^I^k3b9OhK!-mi-#8%`=*<:2QtKH><>SOqBIKj42ZQB4$C3
%P-T)A-<h#+X`+!N]"EIAcP><]h64N&Mp6;$?+AdtSk?!,$gfaAPkR)rX-odlKI3;EqV$`Q:EIaTb%Cf>H[AQ/;hML$pr`,4+hfEG
%91!7^5(W7)nU0n4kt/Que@NM`Z@2SX-0G]iclTR_LQ0in;Hpo$Kpqs>fR'a<Yqb)&en-5?dQ'>?3Ac(e`nn^P]$u1*DMm8J#GLW`
%]"]_3AiHdME`R*U2"LQXSHGUKrcPhFI-'L%5JCm6)Y$caI0oj-!*5&^][kSWZLQJ(-i:FYF=t[Z:0G,XD`Q=1V_%8WQFSsSbO-!0
%K6u.,5;*bIV6/F&X&M./1NoV^\\/gOF13UJ(@MX4,=fFbGJ/4LI;0[U6:SL2FL=\ohH[RSGKpj.5Z:l$0elGj_<X;JQZpmKOYKCD
%mD]t0_8'0<p;LUd&*lm_q=X@-L"5IJZ+Kh/r[`6r:TQ5'_jMUt]t%`$oAGUN,Q?>b]=C-.1nNMdhd"l=b<I%m@83k*Pmnh:g>(K.
%_hmZqMU>hMb5Hrhb%[cF=D(:AN;8dPIcc>a.(r^VI'G:rb'fCG:QOonpGHB'[sRT"f@&!QPeX66\16m>EF&EIUKGj.Q7u?kL(:?@
%]ubY2XGAY_7H`#]G+T.$B7Mj"bYZHgdSF5RH=Q@/*?[0k`&:Z`6s-)Q_clHA(uh)Fes#+aglF?Q[]q#52WERu-WflV]!j9!`!:4^
%9(G0RhRl&B`&_*P_i]a-`;It'T'(L*C3'c_Tl0a8]mgbhmAh`V/+eQ`]K<m=GZ=^Up;FOhDVY$\F`B:1VW1j-qC4KPcR`U+pQfu'
%H@U6cW4RD[he^I#*B2QErKClOomSdWlDq(bdgn?;i&&0[%lrV4qcrm8\j&81Np`s&-e?aYIEr][6?AOnl)],R=*[IGQUa7BDle`b
%b>G7G*V[Ku[GTWGZ,5-Q&RQSp=)WOi$c7nm@X;NI>+N:*]e6L8@0L(\o<R'@mI!]Crn?n[H7[jSDWcDO(/q\(7Q6C5+uJ`U5-/#&
%pgX1ZHZbSE_>9r6cfMX#(KTJ$fotaAf@n*`MC4Nn?LD-JZ*ruQM%;hPa22'NW.;-^:34b8CN9'NJ%kB*[G*iISYK:;Emcgj;W`!s
%-<SHtrEU?m2E<\TCYaQ3(BF!J&D#=T`6V*HD?jV+m(,(#>5Nc&@f8'K?!%p"+(sIc<eNrbh2D/*=`GT!:EF]\lft]Z4BZ6a-f9,H
%\6/Zo-<R_j`>'=B8E``CrEQA!W.^>sfCF\l\QDXE)CLSr2)C1k>F=6ZhqLM#&)o4CE@H,.M6Z'F=Z]Ek])/PA=o9IG\$(jQSE_,W
%q:B6ulT8PDm4?RJQ29BXBrtBT4ggQ^1g#^[[I9.MlUhdaSh7A<pU#i<ijdt=PaEH0NRK(#0VkZi2MInH=i*sijo***E-/@epcZk/
%8$t\n5=K6J$KQp$poWNLH;QZ(mU,`PI2+C+?[^O)cE__#&MA"ai]aP1VM2(Aj+Q;g<Oe(hUqNC<`8NDXmNA[]!lIoO:UmrqDj%$D
%)$`qJKU\%QD82u=_X5"([>6_Gi'b**MKutgc\.'6rRpZ(0B)`p@G1=<,MJ>64TB_7nTk)T'OIroA\Y-)_Q3BFqE01[_kG'AntG>I
%TUZS<2sJuXBk:&`/\[JISmI;0kHbEm7'!c8P:rooo6Mu;hZ#WAoR<gS['%t=q@C;.PBpm3V;qZc[1^R08aJHLG:sn2n*OqRVf!q3
%opbI\jkuL";^M5B_Ic133;4rmSD%*F^>PUF=-kS=;i%7(<[UbV9'+d?'-bQ,2EM;:o2^7=kEtITq/9@\G.ZMg_G6uCPV6<ZlhB$4
%/Na_+dKh1ao!rj"T?h'Y;s:X4%Xm_]TaAu+#so-pS@h6`on.2B%paCJO1#VE*#l"+jCd<YYWme/mJDY"fZn%HS!>7fMR,b4%'?'\
%7!EiU>1u)CA^8ZeZ-sHg`!i^C\\,-YDgPtomdL(YcB`2_(KO@J(1NtZPrn`VMN$]H`c9ZBlWXA?h,Vp<$e,q.kA76UhHHpl@?hj8
%NBQCko4X\'h/,2$4Ib96.[T`4NK(G0GSAQ?=>A.t?pu+angg<EYq#L/`/Wag4,Eedq-q=GKeHKr.r$tCk`#[ah&i\;Edm24'oWi6
%$6qB8VnDkKpO$XfkLNZ^If,22qc[r!/8T"Iogi(4:IigT--o+BO;l+_37=>e,f_/_%?NZdoU)P_TR;m>L*;[8N4AT:h[rqm`>._!
%Oc9f-1h]"N_b[AC<"&!$i*pn7B8^V?+B\K,41pLRr!2N(!rd]n]leU9'Z6p#U&oS+-!Z<N4P6O)WSQkroQ,#'I[':.[L;"#lCl(U
%"gRjXgSHVDg1RS9>K$dBZ#\VH"<nlf'@(bC&0L$T1uq6#bC%kK$c(-Q0B12m@6_8)<Y:r^XV=jX#:6@jKb?B^QOnTWJaiGep(4k(
%Sio2ogH?h9F/Y;R`s(oVH&NoP^Q6:Pn9'9;.,'(.1:cD@KXInD*d8$4FHCTb4Z+Fsr&J57`Dr0D9F50TDk>k"mf`6Kc!6L,rV9*2
%(ME1]:d:?>fG6a%&*)6^1MC(`,!?m7E-aO@:qAe8L$i#'%LcD<;>#HOKFoY"7s;F(X@>:I:i[0>VXO/i?g7HrLpdGCHMg(NLI8Hj
%j=<FM\>L]-a1\AunVfRk[k/XB7Hb^/)npf^cE5@qGE.(#cdI_US`E8\S'8KWhdG79kU3uLMkj_:4TA:nlFjCUi%F!F$kJbaK<WY*
%)BjI6qsNF;bE-pe)B,_EAfA%%oiKqqRsP)q6TN4sB]9#;elM&2f&g0OYG@^&;!\Tb^l%atU"<VWcfl%7(6p"O[3%)qYCe-3"<OaK
%ilQ7Y%i$^`Uut#R02otLGjdGgn3NO>U>NisJpQXFLQ8B8EXCMJicoEZ9DQ"jGgE90ICa]MmU_sB,><sV*#@XKBNW!-DQqOsQ9l(h
%LAH&Eo@$[1etgcZZq#Am-">!gFD@hsK3[.GbO\AR&WA3bj:K"jBRsK%4H*U9PsfS\YeuKi-062l"7Ki)AtGWskA8UPOS6%O0S2&G
%,lO/BZo7'`49BsK6YsFJ`Xp>#o'>sjC(omIl8N$LOg,e72Q)-5D\t,gLMD0CqRN(:d6\8U;7cS;Q?\c<d9P+:A>7IB(lR)>[shT=
%Xd$GEnWcU^bLneCWT\H4pLDOKr.AfkDk4QHX#k[E16&cW4Uh\HV6AQd:!Yt)K/jpjSPK$?jp)#fjSAJdUPT6jmMV2$*5Mc(9h14&
%"SB]86B!TtYF]'[h%Jjp"?.Z$*e^s)0B(a#8e[E-<rh0E&;GB(O)$u:3ig$G$W)=Zc6HX6ASr1lO(1)RG)nqqlo6t>dB@sD&'DlT
%(`_KFVe,JTCW/f+,^pEgf=oEDEB/`Hc#U1j58R<6\@1u;c+X)?L]X:VIdKWA"i3@gVj=uA#e_+Dn6sn#Rrak'XU(H@]:CAB`T>mY
%dM.#[qij(@1Ko=Ya)slndI,JE01XA3A9<,$:3J::iEC1?HC/"`:3HlUS23=Qe='mQIigWt]8mmI)N0dAf4JY?"]GJT%c7KlY2F7A
%Qer*0b\eV]."ha4_?7>N8[!tD'1Ps8&*3,IX(1&4@:9ff$^'Vs+(:<t#aGGr#gH(ji\%dL/0DD3NpA][l<rNan<&>k%XeGd;+D"\
%pr%=c>d9h"L7[uH8N=u]mBs:7bKQ9]Y8?1NqHH$)""ip!ETeC&'P"J'NK^cYYJoG(U"`35du/u`0/Do4'G6=4-$KiiH?%/SZ[KNT
%S:o])6['$r$8H!,RqMK'o=.^2Ea>tt';\>0b*\oRkHr,M%60(j5_O,k5%kVaW9g;WI*>h<OAkb)kTu1B=h5ZsD[E,/>N-E@dC25i
%-,.9Dc-8HPnAF)DR&_0R^NRr;q:2Dl)DE;H"gqK1g>I5i+\IZ-$_E(",W&19ERHO)N*J-sWl8VI0YF.AOdb=D_N$-=9r240AM[1P
%WtCdf2o#R^6<m`@!jubTNEO3AjKRBaG;\p]"=J"^D(a.ND"Rl>F0$9K>Uf<AAo1D&ZBE2$*%jJ49=c:u7SUIi)hP1\0^n/n_FfW0
%EHaRNFMhU@%*k"%q]P-XWq)6hFHa\BCJ^t<OeeJ-!<iL@H"&3&lh\fRO93<=.f;:Y[%\u.,e+Vq+*p)-,RJBa`n0t*%XU:Fa`qMJ
%'':o^WLu*p\cN0[);B+M7QH:I@oET%U1O(j0a*Ci(m/u`jjCD_hhCEQ(>IZ)/TEB03VJmqW\%K8g9JpWTmIGq6\UlFZ),8(I4*\3
%NaQJZO`PE-neX3X(&8dI^9tJXVcD-?].-?'QJ3FmO<7Y'e3-OWc4o13Lhdq_aDEFt5!Zc6FRa7kXWP`m7hL-?&Drs:Km1#TYl:9m
%pHdH/H=Zu1C(%EJ]p,:!j;)JLe,&7J<Ld'eU=RJna4!n$W1qDA&P9\rSp5;hDN93Wc`u4W]HYa)56`W.04?*NY)]Y,"-hhL!q5Q#
%lc6EOLe`]N7`.?'a^a4c$\W?@ZF>#Pb+l@t^WVM6M5R7uB)4+<+^\\P,M6Lc!7s."4SN\0T&d`HLEO_),aoK2Ra+pg5aMcdkY2cg
%dq]heG7*d?A)@2HpAEX_Z%Y!b)*ZBZgc-a,GJEE@;m+@^OlFa%DVTZ%Rc:frJP>[f*Tnb8mdAOE_&d<R3Fau9q/hGa'Ql>M<2BeY
%bt-#B:g42YNt>!IEqcnuUY$UTNK-+ghrDLWeCo;IIAQ,7e!EG>F%5Bm9ACloBX2uJZ*A:;N;2Z-$-1eb?9PifNW[S]gH,;gD;LLa
%$Zi^AZ"2/K]TfS-cAFTJ&##Cd3aX?jQZ%UO>+-k1O5HWgSBEk/+(Hur3aZhYhi+,;3*A9aLXdW9O5Hlu;*&''0&I)0\i<8B?Z7Wi
%dt!l0SM)shDh_%nS0XXY31"R'RCYA,3aZhY+'!*?Vt1)TnmR9E7QOmq/g'K*B^'oi%F>+^GZOaX>/CY'q#'a!INl-J8q7a9.r;Ea
%EBDfnVqVgkmT"eB2r6_6S;+:*8V$SPBr(^n!@rkb"_U)8$rXA.[\5OMiN6o+V^s5<0Q>4-k=T/JD.1&hI!Rc:YnA4:06.SY!aQHN
%r\ZZTQ*cD&T,,eTYWu8TRlW/@HIVl+&]Ds&*,INQ^_&I(ZlcrqKK:.d[[7aV=l=?<:q1ugLUU+CT&s:KoA7b+RW^XTrXuEE!2SG1
%*,-J^;B[(.N=&=jMnZsE?Z[LGG\f)Pb=fY[*Ap\Fap,&OMUZg;'fa&m'9\.h9n$*<6"hquEo(SWp2r9@0KbP*LEpsj32:Mi5T>A.
%V4[gn,GO02BQM03_$F@e7T=P^0LaTZOU6'hr)Fc0*Z$7Ic00r9(o-.+^'mJ'GR;G?F;SOpq)>OQMi2TNkK)2%PAo;hG1b+;h4U>5
%V\`B%3b/Y3BMN!gcMQfcKq=d^BD@G`&TS4a;9pqV+Iaq[CCA8RM:sZC8`0:r_2mBrn7)krWQfq[@iV4sjSt001jP8<SFL'/=JfRA
%'hQ4K8`,A8k3fcI`?%TDp9]mH\ecJJHn)pA'BThbGqOiolAn(]J'_uWD$5?m^E&Jb@b]FV"oOfGY%)JD3ZJlNo`U=s>[/na2;EXk
%#trtC)(".Lh&BO"$#nCAe,DJmX\0"S;C$9*_DeJ9QEW<DmsOI>k`XrjddSkhVZR^!6BEU;h3kk#]oTlDeRuBc0;jNg_pCrBNYLDB
%o&a=NY$Qnank[FIg71".Sb?jVGOF4,hN@r6Ul%9Q]s]n?SG$`JZrg-i#+KZK#k>`mmhq5u_K5>hD47^>3V@4>8C<oW2W7@Ge)@="
%kfo'/i`NR"N>B3I]2?k`nRgZ!]n*Ph8YS-`VgTX\*5.Ktf+R[]St8=%7._r=7ZZF$`s'0f-B?rUc7+U#/L/[7i?Ca0AqJ<Z_YJ/7
%7W0Ce:?I.ij6fQ$L_.7no-Q:qcp)gi.6GVVCk+bq,mXZl]Z@Skko#fO'p9ISacJ^Yh/b;,8quE\H,r8IH4IhS]&`6o4[Lo>KO`=<
%m9R<;4,>,(/fBpIEBML8;%FmhL'UF^K?XtQ=Qc&#Ic1p+pmrWXIShk("(s;Z`!hIN7G2k$&]cVAl=+GARI&W;L]lk'HU/F`r&KAd
%3#95M0m70#b?JJuH.1'_$f6%i[EQ9[:7G!j*f1@:-0L7o;/g.(#b,6Maird^BJ);`g6m6(:1;Y3OX"H""`:YV7d(OAo4Ib*SNQ&p
%PVVjoc?jbUhR#*1I)]dPR<]t4Rbt^'mS/$HM>s7>6M@TQhKk$Y&gLSN&[l#?g8&FR!CZP&#`E#\V?+Hjnp234#-MNN+7^8,`OI+i
%M]LLkc^50EB]:6:E%Q/eo%K:3jV_cj[I4.:SicBcD6ZQ2qUVs!4r0d]_).s7#:%I5qhYfp[:5]q94;JG7,J?bo])N/&S.@!<p6BP
%a9f!MVL%*7\&?ASFu,tiNc@KrBAl6uEH+Dlc:;f\Fu,EZGiPhEq3XlE_]RK2)<kPMPUgA+g+n5*34**#?mE;>4;qiRe:mAebY`)!
%44PV0gSlOAhG,Lkp??2s8[@@Bl?&2";+8r*P(ec?:QgE8VNN24Blr;=?+]h@qPKCKM%XbACo%#&cL!_:.u*6ICNnbl(_nr6?J`VI
%KtNT>*,7(J?6Nr?UO)[if_@N&;b5'kVC0X3q^kBbj85Dm-0=q-n#)V=7lOS(Uh`_qPW+4jL4'BZ/J1.U9$^R.&`]1@$dl8`S9lm*
%:VWO,DNFB+AG<p^@il"IM>#u?KJ[`-)&h*#[/7kJD!p+L.#5!"bkS'X6TSM+25$V+LI&.WYR[2nbJaq:\otL'Fe6.-/bj27_:r74
%CHdO"+Rq_<?RVPVR+L@KT>*#;2L3@pL5XYjj3*5D@XP"kE=3Sd?c'eJ=7PCQX9RS-TP-O'HMFKIRCb,C.]:Pb(Z/mAT5n837l%r+
%hp[^2GErhc8im[DH;!jHreaikg0LF.J+;Wim&),$K$s'n<dh74S&g#^C3)?nCW8Tlmj0CL0!>%\Kq$.8XKol0L&MBt)tE*ACZWic
%/i]r8/+hbCmMXnm5P9)CkB=DrQ\or.P]ldE\?O7<mjWY@o2#'apr_Akr32IhYjMj6:92j7g\>bBkDM4s1oFXV;0XB@fl+=+^ZZS>
%R('+55Q8Zc!XH,(j\G"(XrYH07;#CTit8<X%UQpFe&J*5[Y\b>e(>p8YHK3V3]8DK*5913fXO(Kr-%PTGK4.48hQPUGC"CZj&Fk9
%(B6J0G!+*Fp>=9ZT3N(V7Et>uR:gV\ZKq1RD&ToCpeU4%4g3h&)R__3R[k]aP7%pd(;auoEU4\S\D,8VX^6[bh$>t*q=\bSr%>Xd
%McQSEE5q3#\?WAL,MfU;Q1,sK:Q-uGK_H_Q.2&WT32uq[I'us5[DY6^mpjk79n^GK0/(.'Cc>4#T3#'cY73XD@\6^9OTpW>RFp\f
%eVE>4F;+PafZ.0"RpKQrJ%0j*M1&^b;`G(HXi.s#SWM;lm.4EDnQEi%,dGZUXsC&$?t!X%`'0enghA/0"_=].1U/Uu)-mn&p2U!.
%XfO_Tjjf2#qn/.,M*OcmZ-TIFr6k>(')T>IqHQ+nVNKNo229\pR9j?p=&j(AG`%?+?<M\_)(Q@Ip5MeRd1Z>nLc2*J5-M'%;2H&3
%Z-Or$DoO0RCP'Jg0:R('Sb5-k@\9"RiKWuA')T<W>DV`.e\jXa"cK',m[/iZ?=WB;YVLB2+$WA6AL9t*N1&>]j*UW#AB_tUNZ=@E
%3TH`.2Juur=-mO/PEYq2<G9s:4sJZ5Ygsac+%d56m>di-2:dRjqq+F"h5KkMY<q?*bN,&1/Uh+Ta-:K3g[_kkcdUs27]OfsJ2pXV
%5tM%!nj6:JU[\Ah5X"JZhW8FgpZ\l1]f5]k?+Cbp=0H8+L:<+,Z_C.[88VgBBN/CR5UpUR@H6Z/an+Xr`p#6!\6YujND8i.R?-h$
%])Q]mj>f<Gm(:RjU:hW<nit-._*]pHjaSPu&U+1]`14PU*"bB^jaWek(3':\oMd93bPt$@6B6?eT6CjpIK/2\q,5+ss31rmGj]_S
%h\\FGOIG+1Z"H'<^70-FP38^/j3]lWcC*a<Ct?lZc6bR\hVVa[\.$XHo@i._lL&O,pk`nq3qV6B4L>,9o\)M/SKX-Ej7&%V+WKX>
%D,LK$kg:7$pV&B&qFNFslqToGTL8<2]X<k;N$,,B3PR+Y90?sh&faOdAZHR>#c=rY$D1$H3N"$h8(hGg,nY2*.k.tDLFMQ.!YHq$
%70i[-*.s-gRYjJ?+@"I<Dar$ZkA0ZR,VdI'p$QYR?hM?6[dUDGphEe#"LMP/8G=?UfR4g1aAHftOTZW$b^?C8ftu6t0K-SM)72AW
%XLR4@gGe1Qhr&Y'8AW1@d!h36'4\2CHF`)/oIb@#G,8#o.g9hE,8p5>DA9gCDA!o+XsJ>ikU70?i>;Ypd<ITt48g+s-t#!^B\R"D
%7.EgAQt3H=fjr"l&]$S-.)lSMO)aW\kKXe@lG#(:,?ND0n+mO+pFi8?53]b1bZ+>MqJX=%+.mo[7Wi^k]_B`>XZ<TaS"sCY0q6QC
%lZ:YnId`mZ5TH0Y44_)pOcOG<IJT?k^C43E=a_G@Da_qF'k][898fK6bOuZ`8%W-b4.$(+Y=H\2#Yi6JWV<hk0Q'=AJmTZ_\o:*%
%Ac(IjM"[?$g\3VqCqC^h4\*W.+54+9knZR?A`M(4)W%k(Bk5i3)U1&Hk-`M>ofcbINgN@[LY&R(eXC\7<D^,/`BW'H3A%OhO)"QN
%YU@ich>9lA<81K-kntY,l41H$;t<(Y]>8sqORMG/Ut-1CJ/siI(8EthJ=74?9/W`g=<S']DDVV]NT91E;6Ip0"RfU7*@(#2TD%0b
%B+'D2f9u@6R;%kTW\mJWWEk6]l.J_?^8k+./Xq,kO.]!U,$lC:pDX")<8Z4SHr&YL0#L(o$9VlFEo*o]NOREtQ7#![#Y2RG=6`.j
%'MTE,0^g18n-V@&ii-\h!)a6s36s91+.;`On1D5-7_^s(jLRKoTke/W%.1]rDH9ps]ef7<Af#kOo=BR`[!t7^T\5Djgc+c"m&TA5
%DB6*ieK0=J&:]Nhs2L=[pjR8JMfhlZGcggNXnh,#+Z)@B,^7@Qf9ml8S,9;aA`akW><h`:<aT.#GtBV1E5oIPN[++ljGR"dRDOdk
%<c)aRi`ga!_MZ]*G6?88B1kD,+7&@;gPml;V0YK.j8rWTPe_APetXNuXPMb+<nn'56:2@tGFhm>*(*ph)1MLC%Rr5R;#?8NmUbnD
%EX3VVU>"DK9C_F,ZqC"TEZ\;OOJ;?2Fd]#[-B#h::^!XPkkaTr9CkU)SOjiFNtnM3_Gm[D."F*SE\2Tkm7%GmQ-WkKHX?"R[96?c
%Hk*?F3>;K4]Me5:6;`a#Jh%*hj)HeJjLEZK+nPsUDSp$>WCGRN'p]oMm-B1]Q6,4u'6M6:#&tok)K?:Ts/mO/@H^2UW!S!q-4c\,
%d1ZLI[`_N0/R#LYO6@I(hQ6TmUSZ3QhM:E=^c`2%,T!.K_p^"<T<fIoEdPRLT-P37,[0a&-?tGCe4&ldFI%dO=6HFl:Ff3#&5(#6
%ACGeCmpNJ8.>^oSTJWJ0S!"V/"DP5j`9;J^@9uY_E"?'XGa`\(ME&7.<0;W]HQ?8APY4sIUau"PPei0;V-ffWk2b+_G+K9Vl9b+M
%3;B*LF(Ru&J$]L*QdKg1X5f43qA:Y;jOg!L4?I*%q<3?"$#SILA8O9XU`1JNbo!t?ail#u?BpVI)!p`1&Y8oHG5aud6nm.3#1QJ6
%FO[rkD@BgOP+LhE7*[@n^%H#O%"3=/I2Ukf<2%AQd2fLr-E><LKm(JIDf(`m7V;Q@U4m1mNC:-fSWAA;o3DA;MeE-ZEC3mQcGect
%;\GjoNI:`M(b(<el04h$39,#V`s=,Nc:7Tl,L3geP9)G)0krlr;ZsfuP$]6)>r:cQ[PgHEU6!qGb"))EfLJJ($s,<8],sL78b=1j
%:d1VsJ/U9k0p6nI?=%btBr&tLOF0HG:\s_;]3f&R<ldpbhfr9Imm[cJ2GW_H_Q`OIPV+Jn'g]A-R,G8:[nQZnQPIr1lF7W47_PnM
%$JYO9b6fu%6*l%/AVL'-qqlX$Tm-84RT9*pFqi]]UcDk]>4K'B>2.s^^$q,gWqU@cU[GS^^$p!2;m"'LnBeXcdl>n#^@6*94]'NZ
%4:FsbS=.6n<qsPL.@b,fjheoKq487,G\@c3/*Ps2csp@+\.s8C+m4)DG2_D9$"`.'Gj&`IkA>uA)dp\!n1_@n1P,:INc<rcn83p]
%Z-L`L4:LWj1"E1@iF1q^f]cXc(jmbLQ"cFhGSiQ&/Q:Jr!]B7sLV]G*D5WAAiLscYe'MreT)Qto(ENeLbMos9:Nk]*KN++K>^.*5
%gS(H^-GAnf`-Vj3^$sBOMu0s#i;iD8(EWEk=/0H+F5^QsH46'QP@&POQlSQfW_Y-Lc2Y4>hBSEO_Sb;S*c)3Xj2/^l/`+4(gJKUd
%oLh[6QQdbM\NmQVL_5CV#YDS*#@2R6JeXU5_F'7;4E!;$MV3r8iF-[W1VWSt:7cLBh0(b\.`o*%L[J>_Njc>S_M*c]HY@&no*)5k
%38T@E_'b;rNlQeh*a4D-Sf-9=I*tpb'WBsu%jT0&Bj>m"I,!W@VE2E[E!kj^;(atiio3_l_F%@^\&UY-ejd@B0_C7>!+@\'KnhsN
%*`##MpRM/u6Vf&8DEF@^VVO^!Ie\'3M(Un!2L`0l&!L:DBG9/O20dX7T^RSiUZ^WsFlB$,/X@dpc<(tC_SbnfFEq,93,Ybq%*am(
%pqfD=HlT`bOJ&#YKnh4[cMP%;.ao`Zn1])#'esU(E8b60GL)('[DXTagC?`0FZPBA^@6)hhfGS$&,kQ4\a=?>>86\F[iNc(Nn,<L
%_Sb<d%]RQ)q1XU?8\3bNHAi4BK5Wg[ZdYWrkm$!fa9Nk9]'sYYb@Z\@%t-q]0*"#!^4U/.\aV<$^<XhR4:KdU32Gh?(\Rd3m=o$J
%\q6r=Tku&U31*i,_Ya"0`Z5X\YQ/qj]\hV76qL9J33MPV6=+>UcLSCDE3.Nc>!*C9IY*i?<M"'h.7mB:Y0BPAomF6\Fj\j`oJ[8c
%U2bN//T&`JE"U1Vg.P_BQ+QR?Vpo/qU.4[LQbC^iHLk2r[D)<DVDd!YmSd2HYI77YrlPMc?`Rs/l0peCMP/I:*!s7?k,NC-J+>'/
%ID:7;Vp5(9E-X"(_UX+q7_%l7^'ckd^F@sNC^u-QeXM6]Y]?9KSh%.F_TU-Y]C:+ipOtR%DFo(7:7QO?h.!89HYTa.#@d!'U$3%n
%NC7\V?N`ILU(>qS9<4'+hW`mRq7^qAr9t;*?<k!%RlAof\V7B5h1N\mYD(Y41NS_HCK;8F'm&oPo'<H_Z-8@Dj+EVWEq4s?"fK-Z
%2">DHl=rVPYLa?\XR.H3kh+gXf3St#>`[mF\U0%B+HtZd\<_3`$PNo([X5`c+GpSVKXZr-A@HokR^0Oee5mrAQeIOfG(`c]0IN+A
%Ws?N0l,e-fmR=0A12WO*h"iIs2N<nj+]E]Hc]ARWF.miR^Z,,$L!47Z`FX]_Vig!h_mdRn*MqjYB58aH(*NFfMt,lJM%X1?/DWQ0
%DuoNY:ZM$MUBKJ3n^RANNoU8>R`^ammO5gI1Pbg1r\5g:PP[eF'F<*3EB,\T,;f3c3?plB??at]ia"Z3V4r'JTPp/;ETQ4j$[oY_
%_=#("q3k%<fB%;L].XGHF9_aJ$(7IDIase4)gb/.n9sOK7HVj$MF,l,X711qr]F(l*Cq7DMq,!Q;okp76MA$>eB8oihEE00co5Z#
%\+HKp!;D%-fE=%dZgrKmP<I*mg(1"7_t>p7Yb/0B+Ih^Bb9!12eq4bqBF@NXZb*c,@=SQt4SIV/MHufD]t9n+1gaBT]'Ur#.[j"&
%cb3Zfo\`%M.u:q!hY)Y^aDnqa.]b008r:7[IBi@*8e[qiY@&i:eTlS&%O2Ut6o\1J2ao-X_,ijYea7c%Zu_ADEINo5KnS*<3C'-e
%KP7GRkG@7>!eYI"$>;!/;K@+s*RLn2gK4?3>Vl>`S3<pe*u,:[j-R21@YMVh:'L+JHfq3c?>5%<CX]E[r+OQZ1oL&nk3E;tmdl)$
%OhDaY2i8-R1BBNcVM[<VHS@?raG,2tTjr0D+u<!/;E,j7[e2,>%(Cm_V8@L![M7M//>j'X5a>EB@<L[4V"VBGMe@&L^<+qbL"&t)
%s45QC#?p5)[0-U(OC@TA#hCpH2[?$"/UEUe)QZ@<1=t$b_Ugo@11.dqesco(a;uKbD[984EhU!P-=:rIKq!?oJ$D,q)0WG/pHdUP
%9?05oD63;;neC<aN'?ZJ+]J/=[(]+Z\`42(@#?8Z*%a3)^"qK,$Rm<'.M\"_$n;nehl9MVXD,JUBmG/;j/qsBI!jj(!&,"%J[r2A
%Z&KWk'p6+('lC?AUpIQ'V7":NU_I`g5;u,[0,Lp@>4j^`.Sm*,LMM6,#aRR+PC?8F$P0*1?"'lo.$i)fb9&8L\[=;V$d.QDQ)Ihq
%#u>P!N(DK-QO-6/,':)R6%io]p2&+hU-0jsd_n)\c6N1b,`-*--BShQ"-BpTLjB1JH#L[]l6l5P%?/A7)Z*U?9dl!R7,mW-)Rehq
%AUKfhp&mM6plObbHZkd,?,/\aMU6ZZgip8%UruAZTgKd4[BfqJ#%R&[#Kp(4XW53253/)#>j:;QKVi^md2%H?/.qqnoT>AL4Zl;E
%^*1?'FT_g_;X(FU<o!)D_0e@2+8X5grp;4?7tS/"_h+.T">B?>FWANXZ^p2+-6fj&O#Hfn+3qYM^@ciLDuifGd'b=le3d[MP]$j\
%pHF,"8TIi:d`Ns-'rdFY-^Sm)E&%,\4P=Cc`E-:,:[h<`9ta8]mbetOBPMp`'UI,<9S;@@0Z,A!]7o*9IHTa3F2.A$^PWib[+!@L
%lcS'hp@MkT.!nrjjpUY@]aN'Z^%h1s6)ZBB$Jk.4_jnmO_e:$GK<Q+p\^RmUk>FTGhm->L^Cl8!8*p;5h8J[*`c`eJ)8SP)bh*o\
%HnMcKPm$XJV;er`U8!sRYKK#n:S4hEoYk#ns1[0dG]aj!:QI\,Pu=<%]'XU<aDiZM`n=#lRE^))(No8IoOF;&=N_i;;-N>Sgaq:[
%m'QMuOH(?LgjiSRG2n;(;<(qL=8ha-qdO2U:!OP)`U[7+FX4iA$B5osp#!W#a:5$PHT8J\&CHnRVgN%;Ta>FLatPd>%4O)MY#e:S
%*^6o32n.W9]%R$KI>raA5C42:`H$5QNO8WM-_?P.NA2R)F8;S$2N^cngee@&S3e%:\#s))MdTV!lrX\F]AmuRTc'j(A$R%lViAl;
%<nAXnLrFd8BA_GoRf$2:[oi<eWBu!oVfPLA.e7l96(FOdQTEainDG!+kr]7+bP5gQhL^e,8Ec?!]=g1E#$9e7n[Bh.jNYWlhSo8_
%ecMcJ,SC?E^A,+bqT6An1oL]spENB/p<)%)-D\s$b;m.@+Jd?B*CfC=1LIBH(MRG6[q)82;=uAt[,#L/ChNI3"&>=ng-qQR^]K]l
%q$:^UeCr!4I<;l78V&=[18ChVYtZ)PXfYkrdE*EB_`#+mDepjekt(^FRTF8G;_7f/&Z8c4*/Mm*6S=7PJJ^._J]`Dm3e6VhiNV/3
%LVEJ0G&/@8:YS/W)nFbYakR4%Bbl\Z[&X\T9B6dnJciN2R,(^$h>Hk1iA+K!p7Os!V:^3!HWbhXC2N>rDsj2nO[ih-e*DBjcOb"4
%i>d`c-#fb\.6-LK*d1S1:"`:;S24\CRp.tcfNB`U)nE.?ik2dFee!%SZC,N;s1?Z/'q/Tl`WDDl!tPJ$NRU#j^L9%.]tUo<l?IF#
%SU<Wq[FBLPV"LRUbJ6AVr,%CHp2b[VXQtZ5Kr;fUmcG<(B)-'Rb6G2^/;pGr'k-=J9ZdXh*UB2.qKsQ"NfC't/L+cR4DM'tV:J*j
%TNmq.3qtG[6$lAGW!GkP=^Y2f@WZ&URiM.8XgS)e!H[*U0:3\91%g/jn'j;A-;6-p&EL&_@.9,EEBj'P7o$ogbin30h@JZ#UOups
%kL'Ej%FQKq-eXcFY`l2\T9K];.J4gqd_6J(KC\1W;EA_D47?7Aoj[[+Ek8t:hAA5r=P-q4b,).UrVh$*S'aZUATBKp4!gMB<.-PG
%lM5_$AUbim+/U6NL&%(5#hkTD>!@W0?_D<]W]Cb8%dS23%`@:ECXm*E"`E\FR,8Ib5pF$!T;%g=Hp\17ikL`cl1DtI19R7gSb7W=
%$bP_tDo.6U1<U##1-dY$arR&%amSS2KZsQqe#g<GkLl5dbdDlkGJslDAD.0V(=6JC:(*M'A+ggA4@Y`O@nndT:(*G%,>L#,F/&RW
%0Ga02*n&["accrC,(]M#oGg9t:<:cBE__Lq4r#^oMKf7Y_*`I/L(,Gqn?W80.G!K/2_P5m%Q`U';[F5NXZ\d)dgafRR69'klLZ8=
%,6q-k0$a6n&b+!u_l*G3DGPSY&IkqH@ho=W+&9ku_:s7T$=AgH59Ou.p6*7rXZ]EAD&gP#)qkDkZr\R0/oHKCnQR6I6iN?p4RHp-
%r-4YW-Wedmk6'`YrHphfi6-@*1;nnWRdo,Kb>6fllX)<-PRd[nHB#i)^C!iLi6^037n9(hg!]1fF1INPQ@D>bEsN6SJLX9WHL]78
%2Vmt$r^i0Ir0J&l7f4u$Jf@.S/::Y:[dW3d*u0^(NlH.5DoAJu5Q@]If-=&!T+p)sWd`jEgDRMciFn3_-Me#F)19'5mi6cQ*2qaU
%qY2#_rU;m=*tLN=_!`:l4S5:bIdcL\TuW26D]Sdr<XQkaI6@.($N/K&a$\2NS)61$Gj(nA[m?cb%=cKDEu*Fa1<LA]`_b0KV6?`j
%F<F8,8)E*]j.sDkd\+_F/7?H1RJCDEDP97pAo(]h[\0-)cIlB$2oW6>=0SrXa\k]$*W&V_BkJHYe2*k[d^A,\,I0[cNjIOW+/B"A
%s7dq4il3F\*LkPu5$Z.D;9.PQ*ks@6\KlC_d/AnR-PE6.,E>mZ9>S*E"iJrJ19c;C?)!2(:NX_H5Tu8=E!]S#_rZT3p`"F>&`\ks
%6tQAW#n<?/M]R]0g`S.u\#bbKqp4%ErJgL=$Ysq']h.?+9,G*%iHYN",<@`njC*r%^U*[)T)EfVVC/ph$FXm4(*sXKO%kY.n8SPt
%BX3*`7B\A-#,48q;X;l^A&o%FF^=#16s/RR?(]<$?+Ii9YU8(GJBNaT(`f-uBtYr[((jkt,"Ng=((hTA&XX9J/`Q$AhtdYV6[)A`
%33e;_5;ksJ-A(mFX/'U6AC6=j>4ikt%V^7sJ354m,'7o#O1rir%Lqe6(k3(U2BCdLmr?aL_d*6um%2ncoOM#'BH.Eq=N>!rX,[H#
%f_u>jidRCY=9\IpDXV:*[:e^IJE5_s)DT,bM^Rfr^+(mGIZs]!i/Z_P[RhD-3T*<gR&nhs8#QE`5_,rIBgnTUhNRm(^26A#`i\:#
%1U4/EHh@tQ;+K]K@e8+X-(7mU%mb?fH_D[i4E";OKh_QEmAT&d6In3p)Rq9$L_d[aG!):`mKkX9P%:[U]!JJuqes(V@IO!*l7f'+
%/BN"[F]^%Tml=99mpA/=3%_(9pQ`f$aQ>='*VJi2;s+(Cit;Tp7A'JO?__TIoOb%^emQ@TFPR#>>4IF*OhpDJNGrmk_q\ML[$,f3
%Frg+LRnq'VSX#)1!1KV5LdiRXV>`8_,A\Z3q4*PS.UP>G[c!Emd"kY)rK2c#97gRu?28K`TSNXTS?b;@'*Lms-F[nTn[P[97dW:i
%ML@n%?(Wl*HZ.HW"1eTD:E'YKoQL^[K\C-%>ink.rqd""^^cK*HEXVBWn/!F&^7B*PVr-5#=#>4]"KEU>CuWjp"gK[9jOWaVrB74
%qQ[LrJ*,3fPO>9Lf.o>'C51er50;P<SK,f`<>&PcC+YQM@h7.V\K',YbM!/IYd;4.TIt('D6X>B1nRhFb\&>A*H>et4T=0E,kfH,
%e@Rdk/dIY/]j%ek?U9%u]:TZ0-puJ4G#&9\n5JoUg4G2CIR4):@c_0pbS%\9;^BPndLj;S3a];7E*c`%9#0s2k@pB@WoXPbWTO?)
%euJ//Jr=hJl`E?5MDUt#^6Hb[?[b9bj:rO;.B0H"(tPa0E$jVl[Y,#@M36+k]ZNW8M=dr^L7NCD.MDM187o$6Oh+lfC0T<48QL>D
%-"q&Y_e#@8a5&sP(A6RdFN-Zs3N.@/=f*^pI*][d-EuKHRO4Xjm#-Pa$e80:!=I(eM1-C+^6"G)0j/t%hkUc"aBOq,RQg('I1L&%
%>mua*O^=MI!dX`eE'Z"(9AY)#=f)h(A\)4FAN`kk[)37&S%%-shNd",%.02;$gH"E/'$8e3-61XSs'rpqfRYd3J0C;01sh'aZj-;
%IjC8/FG7\#fufA(Q>+a9n#SV4pb[Kn>UhRCX4`E3Vkmj6FlsP$d0=W(5M9T2G;PIQ9*-95=4P"=0!gB**LW9SDUCC=lcXsC9:M9k
%:h0`f*N4?#k*J=O[XD@2A"l9;I%#p?LeAl\6uJ:Q,ud>`X?NM7N4QR:dX*-YIcVEP61\eMlJp1Leg*D&7P/2acQ6$Z"ZRL`I)\57
%R[k^YAJuhdVHr0ipD&OKg*:LB\8mf8!H>P@'1"i@1G#Gf8hui0Dgk!:,M/H&Q,M5KI>bL.P'gHrd;59F&BQSmKuYkk3mDk;U'j9s
%!mN;#O[X=a:C&hs4m`Mk!NU6FFKJGIb5T_hR6Pf2<+:S/9!QUZTNU`TFrMN_<XdB&IHHSaG$bre>IAXR>H_Das6^]We\QICeW6iO
%1>0kKrk>'AlIC'[*hri0VH`%uPqi[U)tN0e3&7!pQ?qNGh#5rr]@\YNhM(hYGQ(N=hV3^S$QsFs\&&@&l*0a35gS<De+(pqm1OMV
%+hfEG9+[ci4I;(dP!<X;%i_QfV7(h'$T5,1]WKFNG,98#Y]FLO[Z%nZgN9FnT\L6n:CfeNTlbcag<=G8&I7Y"nQ7>@edTZb?%+C8
%YX.dSlOL@/'Zh\[<Fb,J^3l3r8:KntEi/mA`$&3"2(S-H))Ai[j's\qq<;ZL9ZLDB7"LuL0HG4CL-Nu#b@6j!\M1p]Zgb:<K$8qe
%4Sj=T606;f0cap&'GO]d9S7f^YM,E`:.ZX.k3OLU9-F^fa>Q5o&7Df%1m.\%Nms!L9e/q6XdDm3RGkB27l/,V_Jt'oAn]74]_Y:l
%4o_LH:30->cL;2.PM4e^VV92qpD4^NqQO?H\&rK;S"A6$C\d>iiqcmY;a9VZYHfa]P"[>!\GUr&.q<(_H=n\:/(m,3Jfj'rO_nNm
%Od\ml,M5F'.jDKM2G(WJB5^i@2d9"-6'-GTpMc9B@]597r/D[lOK!W+Ghu9_kj(9hlIZiRiso*ejk0e4`gqMJ<OV:d$9iQC`]@u!
%lU.r&W_b^&@f*aD`tl0+<XY>d`o>]BC[&F;;,i!aCHl?L#jF'MM(pS@A"O!L[)"P0s"T/PPX$hH/sC4mVh5]Z`jNJZ+_)?N7Y5Q=
%p@,cI/A*Y.i!@c%NU8eRH[$o'7aa)u[<Bk0e2h:p/7SM&.5:AkEY>)n^Z&^ndkf!85caG)m`uJ*od;nLHg;hCkM8Ihb[mS7Qka0A
%j"_9\QQ980qu\GK^5H)t8\jU$LqVESAWSGTVm-0$%Z@]5oFKS1E:cq`SGRBb`dG:L]oS`Z1U2FkqueW7>JWFgC#&C1`#NTpXJPD8
%+7f>Un\FHYA&S-iLLd8b+7S2,U!`BVTC/J+YTVZR9X.&/dZ\fSY!qR!Tm`(lc#H.uO^K2B+`^?BDXL">_1@YGYWJ/Q:;X=(;jJG:
%O^B99o'GZn3=Z<:!e^ua?c4eT>:m[scO!shI3oN,O3[52iWUBPJpC[FX'tb8@>h/HN3^^O@Z>5#l#o"dMo.'2LUZt\NKh2X.'=lB
%\K>[-ba(BK(>KW5.VCukPTl/'bBSF+Sup"W/U8i?r-#J:[9[fS+R_PK'jQpS*NFbF.DusqHr,,pP*4]_*K9]F\GPh?^uBg+_TG*d
%'_XDR!gR<>W1*%>%cB2!EOpHdf$Q[JGA`bjF<)rH0p+F_>kl9R&WMH^rRT@/UT^FQ(=CRtM$'?jVdr3JOZ=WD2-rlX-"@ShTn*u-
%EU/H("XkAu]h=7n:HTX%O/Ea*m[Q[InKJ$HBEoR=Sb#7$d\4=%lCc%`Irm=&3o7;icjO&W%:TN\&-UmUA]O(n+#>I1rA.\dEl:s\
%]\/$Lb-C4Sa*7bgJ7IGeF]ciR_)'!D!bA+&m+%B+3l847:^$mKP9)VD5tC:LG!"hLC.H&YcU?Tr^oak&l3LqHn4"[JhCN%@4n:^2
%n@TW5:frUjWe4s1EJ.&<k=ntX-!Je18RV8aBZ.5a,=i"95/i3"T)Kt?^%TucFY(-R_=OOVYG`Y$dLk)3OHFdOm^Gg@lkr'IJ2rds
%GuN?G>ZOr1pT5U5-#G7K8ln$R^%]ju.[,uSc-`^<:.n%fKRq'9#&maFDGAiT2U]6\&1sn)o^)q1Bb"mh3%_'R2Q)NeJ1.<ArAZAa
%25;Vbpep)8SCSkV?CZ-h]*.*6NEC?PBjY<P2^3hf`(E(h*B\\/_\UE*,s@h2>Fn)OA!\0\XVnDQkh'>>#tObR^`cVei+MMt=&+r0
%3+rbM.p\hm:>Y-Hipm?pVsODK,Bi<<!I)\(l?=5QMc1i?VsODK,Bd_$,N79(]@/cL(N5nR:OqLnWiu&Vc*J&Vd".PL3GaJghJ:d0
%G[qrj4RJjeV\p,FK]DLJcYJXG-:rUOlqt3W0N7bN?+M_\U-Z<d,F^T0%*_<t/o)&S`ONDt\Kd</;Efda8a);oB:_4NBT.#]fIcJA
%eZT>W[EUZ=ADW0oq76ED@C#\i`tgn_$5\oeR&k=#JrnJ(Y?YQD9dW-e:(SpGqapGI;5=f&b)<W<mNXqP;^ooV>>;qVd..(G==%rZ
%3&D`U]OUKsY=F.lHZ>Pb>2c7A?T"6un.M'pl,r/YcN61;pKNOo>fK[W$3o6,mU1#6cAq!f.DPL^"E@MuJO!FBAD_-F1poqW_tq+^
%YAgu)^F:`^\(:5Ae_0!2g[Tkeel*AlHb+1#Rt?@QB8oA;8F5oWj]qh/+)!`Gh2a[X1MqONZir;844DdT5[0=adlZ%0pHVrk>Br8B
%g'/R2gOg5934BFL0jfj@)S_#`^^CEi=mlk^\;:!MX+)s08*,6ch3gLG)#6rms1tUN`^Iq)8ZIYsVuSu\bl!SO<pHf59MEHdi3J'g
%9X`\/1ogLD]2e:u'3iAY]Ao[PrBb<P7S:Fidd+.@C6S.EMPE[5]R9P_/Ua2c6\o=4j6j+=56gW='RccWg5I\8OB/&!s1kf?o^*HH
%r=p!"fQ$9J=btU?`7WnbbTDuc;^=MC)N#1)T(ta9['VA72QY$:6m6E9Op!I`c1R9I_tEVLk)X;mXs\n0JH$p*REL&gdJAYFEk-!$
%NPIup?\Yknn#E7]77@btR>ZC%$.L\>qqmrf[i`f$#H_/_G1$*[m*jCG),g7.rm&Y91?s^j"r+ddG?A!&XDG&qn$g'f!sZ-P"&bWa
%6]37RZ+F4XnAo::+[gs\C.;CR,ScG<8Y[o*0J:^t72L%K<.X=\9\#B7T^-%qL.BW")*oPG=;*MI<^lJUB%iIP'3Ct[RMJh%,E:Q4
%Whm'Tl7rk^:b;s)?XuD6%AKhY>VT)MWtJkG%O.eS<A57Z6P'\GW+odFOJ.pt6qU*5Agd"8)p%<R+fl+gKQ!k"PgZ:>C7$W:/s&8c
%LbK+/VA7beLmZb9K475B/]slVVFjZY:Q'r;&/hkVd;X=UnsGhF<C>9RKV^9rFoYBnRL%D4GT$H;'n&qZ3NW:,cmYlNV@]2Q#c<_m
%<"KO>1"!eZ&r$\'L5&mZ;$RNX%S]oEr19W,>0As6%+VM;-=7Lf>;_uHA.ud9O_^4uUd\#@)K#R868Oud*#='aQj)Ef'p&`bbRM<2
%Ubs$L'*f,uR-a`t(5u72!>p+ei7hq]:q'.2."^)V^jVKrZ6U?U7_3-12?^dMjp,WN?OYmN'YYmui6bDhh'N?1>0R%pf<hn.RLYK'
%2FID`6d2pU(W#PpQrQ-K=Qh3Ld7+=M*DqNt#QnOY(%EAT.2PEP1n/T<V[-a;6'1l!(k<DB'P>Mt#-c#M"7T1jbuiZW.0;:18Ltq"
%As_OH$YWOY6*(j3k:2n;%Xk>!+:LYu"u)`^2(][McTErq"002b^]O!=Ku325_>r.T@/tbNaD"3Y\_3b#,#P!Q6pP5:703j/<R(R[
%H4"VuOhm9h//Y1BLbXbM+R6q/!@jh99LX_s)@;?0$:WI+qET__'SXV%9a-Y87*7VJ!)-/TM+$`Z+R;?aC>FCX.2pPM%@\M%0S%FL
%Rgu*S2N_*O0NH.915BuD9JQksOT8H:6kjdcL/d+p):bcIMBQ,rlS;f^JuBeU.6d[$"lgOKV$0<]"fc967LFkN-&Dmh?&+7C'hY.O
%78R'[UV.@>-2ge3fhkF995I)EW[pb?N)_P%U1TW$gd$bMPRT"nD4mCW21^i+J4Q_&JN?^/3Yq(0Qh@_#imI5u;RWF*9<t5e!Hlgn
%#"6VX#rI=BTu_u[Fjs/lil.i0a>I\1mt<%2"*b%"</=N*%$At,5r+oJ6l:_q5slj>OpqPM.?^Y`)i4KNTs:<@&IliQ+rHb#:^YGf
%R?g0cQp='a!C55+DX-RO$]+G1''!_)BI@YE?j*GC+_qf24tK\#L8.=uGWs.?O$]iV8l/pEM`cI(GF7FpnrO\cCfi)OOmVEPJ(-)B
%TnB@Z$>q9>b6T:!,42$mMBJrtA:u[+1@0a1_J;\9WB-^\*>f1$'@[(uN!ud7`+g8En72rqd?:pDYpG\<<hg+uB^MBghPrVM^iQ3=
%0U)sK#q$(IHD\pQB9"!,KhZu5&53fq.g9CMN$+i\q]cuQbX7I(Jui;63$*l<)_&d,KhP,AH>-m=/D\4O9sY(EW53pJMa:1q8.lS%
%M:@O$\gUL,J/F@pR(e;cQNDsd.0Lh5ZGnpMBEH]r&fAMK6ihcPG?@hd/4!=MC/I9nQ7@'b&AYSDA5+E#P9&KhISUn(74;m6#%:bI
%?'85*P!l[8.&^ZuF<]@6cXak&XjF;Z6HCJ,$<9#RU>T$J==-m7!79D'*(WsYG!J50WQNS\"p?Y,;ocd%X1I;DR&48r!sKmT<2Nnf
%7uq[D+;As`';5+hV!qsOV$1_/m,Sbt2#MlGJ=BlXiLD,XI8^[kHX_IdJ>emWU-\1#.=hqJVEIXa(TS#\WsVCsW%nTW"VEcDP%n(:
%6#8j(!RX"COYG^n15L"ld#jrf>#phh&ZaHhQJp+h]m<AL&sX55V*$ah+I_qS?sn#BMG@C]bZq5pj<l5X@5ePR\jU>m+?V5,+L3C)
%1ichqbgKtQ3-3;]O]BJ;26CQ%F&e,7<$7p:4-^3ZZl)bqr^a'O#IG@h\5'nf.PdfB1>Oop2@rSAfd&EtUR5aGX&]P(NbH"SLkCLO
%6Bb3qfulc$EUAF@L?p\X37LJ5JIZ]%SL"G,p4;bYEVGR$O)XkZ-K,&*UJXBtl6X?TJM;9kpjdu;+GihB3<W/Qd'F"PJpuk`,#%SX
%H&Vlf+I5=F=quV:(D'/SF9j)67"F#$UVNa.C]/dL2H%=bK%UAP1'%hKm2u"_2%Y6E"LUMdYVH2EWe`p-Q\F1r@s:L:97fK:U_&>M
%.AUl3WCfQg,"WOV2!W2P#0:6Vd8Yfb1b91M6l-<lHWi7&&9^E?Cg`G,,uZ$0THQVb"X$pT!E'"1%J'6NlJA!SeYNO"(o0s-+Hu?4
%4s`H&fcUi/-_Vau4C[#jR?!m^W"q#tgCpFe"J)3+)1-8Z3C9O-K7NJARB-i3Lm5)60Ij(PP*hOaaI!oG;_i.pjotpIQt"dbV?85+
%=[^^J59M!*VAF%#b(tj\"_%oJ=4ObfLtj@M%q'Wbo)g1#1Poe#f2\o"]n)!k,uo0&mKqre-8KgG4L1PDNa`PtP]:fn'?G6_]C47q
%KLh8:RWMM'@bn$!=ZRE@,T>#4Jg_=n[";9[L6!f\l^U6p2jfD."d:I6(e>?;p<YNa)G%SW7-pT@.46A5+t@-CMdQo:J1cJp!jQ&_
%s(hsMAPH(THPR1G@hLDKHnR7-O`2KMdHoeg(N$+Dl#\,,@+?A*,qnPN"DpFf7!$GR+n235r*U@h0b=NjM0-lIBPS_>2H:>WQ)Pd=
%"47O@.7XCNYqtAKV"5K,72@-B"<rDPHisWf7?Ip)_'DCEP<f3109WIeK\dDpBjsp#"[GGJUr0%5qBMc7+Ih4F#R6dg80]TL0W7PW
%M$sr;R5BJ.<<f/(,bYsb(_Y:Cd#/`J!!?7:WN4=sZg,N9N0hp+&S9WU^NlJ0PuY%m73<@*OjV@0XK$_7DB`;'Hbm4+N*]Ob:%JI-
%doZc:.>WF<DJg!XS'jY;87[9!#7%S^NlG4"'L*_$?;DLcHKY[rg>p8uRKNg/Y9(CaOD8F2<Z?kW2DT>*+:c:mdp#2rR7UJN#]jc:
%@UI5r1,f7A\fgU`cpUcB^*WuEke+e=nTu%5DjlJUCd[dr+senB.Kesj:8X*Ql[KgT!1M-R&&,T?R"9_OL8,S0*&C;[9bo$(^8_up
%.G8ip`a3nqgH`!'=?MXumWbCZ$rU5NBkpF5IQ&$!Sj8k`+P*ZNIR"'>Z^S`B#rma\"&Y7=_/rgS\k&S"hE\586[`T(d:qC#f6dQD
%R[\"T*L?.nM:60"H6c<2>H1J#m+G!h+k=P<,e=LP7(QW;WBM>jC)YY2<;#K``)9NmW'20;8R3B.<$0V#d#fOmNUTe4RT"Vq"BAE\
%;geqG$$>]r0H9;N/9:e0iFWal(1I;?9CX1bOY@o]phV(Nj)c&$nHO"p%UkJ/_\^BC4r>]FLl(-?@;SCf\Od;Pdpu2^d'X'WREd6F
%+Il$JD5-h+,"q>Y5X7W$3R+JF2Qm^XL+nJtY6ud229k&PBo&UQbC^NOFAWf6m]:`>/7W7D=cjm2PNWpE6,RBoPF,aC+c'Pf#MMRD
%L"a)g843.mY@UhT%*9hJEGoY!_MJ+dntH9j`u6e1JQ097nIUA96j4/*22H>^R>j8d&4B\:2\Zjl308C,RtIB*X!Y['!t>?c\Sa/e
%N):@uJ9js1r=MlT-'L!:X<pple'Pm*/3jVDFUeBQRPHbPf`5tVO;T`^JV#otNC4UK1JELTd!eWnV!p.WTWofA9%Q`XK&hQc=<4;)
%`/Q6;!U.$]2iaiH$-:'6,s#s$_dNEi_'o[PU*acW[EV#>\Ru#+l@Mq\BX]Rd+Q9OcaCI?^aj`Wg"Q1D=A0jt0B-8*K5pL\WPd"*i
%XqWnYXa4tDj`FF5D?jh'n3G0G0i8>3%Km:bB?rkSPKYLP+D9'SYBp=2M[l1$LlrjA;br.i>]3C\Vqm+(:2+/[9hP+#EATBY]!fK-
%?ipFr89*n,dUYTg9P'D)/pP)bTVO%iTTWnCc@-_?<7BZJ/0Ngo,WQ<"o`N(b!*r/#+L)`-TF/LAGF_9H$Dnc@gQn!#\j\VTTTdU(
%P$f[jcI6GPc7r'0O<8g[:5c!=9.V2U-WjQWm?Jh;s#OqX(X19OM"3T@o'HED^r4$B<<4A$j9)_=7CnjT><II[g[2J`@,T?ZoOY'`
%Sj8kc-At09!r3&2qe_*\EBI)5@-a14fo#a_!CR-gKYFAd/3g,X+BK`EN^fG]7L[,lF^un9K#/<[Onlo'.Zp_^Li#b'5Ze1WAETte
%b(7HDlO^4-<\^ZF<`SQO<kUQNZkk4%>'[,M5QtWF.]/)t.\(M=BHpHbckSjA:)#9lFj@#0K(*WaJ0NC`>ZFas36$O6*NigO0rshF
%<UN%O*G\_+hFT2;dgN?^LeKYYF&!HYWX,-!=!99D2?\Wb!s#.`8.euL/,0*D%?j3*9p$4?nA62J7k0Ip%H6Nf"-KE.`ji#on=X;5
%UBiB0,(#HZM[FF+ku:;r4f"1>K,1mN*@?jiO9P+3Td1MGZtCYLFf,RsFt$+3JStPh;`(JL2,r!ik+l[j9X\/^$<\q]irXYI!2/9C
%IgDQ[YU.GHn-$.L1*Zn%#s"`7UiYa!Ca`:T,AEWTs/)I/lt4/@0^SVB4%CSseNjC7+qE#?'to@p/lQj`E"6Ij$W;JmKD,L@6qfGZ
%gLrLfIR(,W1u7i9-]fF"ABj)PCMt?Q@ALMHdI78/bi%bHeS3qabD%g=_u]9#"U:,l((V+I,A\<*Ge$N\I:-<DJE_1/n,qCl$Oekj
%/?j[\gUkPAcB]NbJUEC24f8tpVUa=R<nM<b9n9eua>U9e!:%L4U'$;&K'<Lsa=\2g4iu&t"8UQN-@#[[-;glR-A8>E>qlnuVYXC1
%FiAqiWAYAG!lL`C+HiF\>qC4B,R8lp]opN[K*@K6NMnR8'j//T']Tb)A4`ogBGgt34dt[=ZU>p^-C]lbG::QYHN729MBXQ/Yiu-[
%%Wlskg'InQU.R&28p<NT+D=@Zn"[b"!I*"E;"HFQ03UV?",'IC.NJc,@$:sD'jup@"t?=`p;K/1W6$Li)NmCNY)/pELp5P*G<ejS
%3(-8i!b%Q!m#m)!n]h\8&EolW(m[Lg?Gn+:,VViKfJa@AZCjNE8S,M90T_GiQ:0C1@f+!kalX[4VtP`H_93kCb[<^&0&`g@\oe3q
%K!=Vn#,sZ;-<n)ML)]IaI(-3lb#FH@To_T%"O4\%5X[YL(rG!o7!DK6WejGI<E:Cb;C20APUW)`@L.Q2Qu:Md""6A0*X1g?)j+W8
%9sAL<qU%c'+]Zreg+KFneT=jB:_0U5h0,0i<io,c:`sSYP@\Q,8pK;5Te]Ttd7+J:.\"^F<m9tOX3-/VWBu.qSHCDNX"'NR/9;4%
%gM4_cbUR3^SlIYt8)&^Y2fp/'BR3pg<PupuX)Mb2_HH]0Iap#/RZK,qd4>6"O-Np$aQfdLd%f5`\)-G[]Cf:pZi(\*i$I]CKn\M8
%_Y&BZa.]10~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 962 226 a Fr(T)-7 b(itel)71 b(der)f(Ausarbeitung)1364
421 y Fq(Autor)32 b(A,)g(Autor)g(B,)g(Autor)g(C)-179
822 y Fp(Zusammenfassung)p Fo(\227)12 b(Hierhin)45 b(k)o(ommt)h(eine)g
(kurze)f(\(5-6)h(S\344tze\))-262 922 y(Zusammenfassung)24
b(der)g(Arbeit.)f(In)h(diesem)g(F)n(all)g(beschr)o(eibt)e(das)i(Do-)
-262 1021 y(kument)e(die)g(L)147 1004 y Fn(A)172 1021
y Fo(T)210 1038 y(E)250 1021 y(X-V)-7 b(orlage)23 b(f\374r)g(die)f
(Erstellung)g(der)h(A)l(usarbeitungen)-262 1121 y(eines)28
b(Pr)o(ojektseminars.)-179 1255 y Fp(Abstract)p Fo(\227)13
b(This)24 b(is)g(the)g(english)g(translation)g(of)h(y)n(our)g
(\204Zusammen-)-262 1338 y(fassung)j(\223.)497 1612 y
Fl(I)t(.)45 b(E)t Fm(I)t(N)t(F)t(\334)t(H)t(R)q(U)t(N)t(G)-262
1858 y Fk(D)-78 1748 y Fl(IESE)21 b(L)140 1733 y Fs(A)170
1748 y Fl(T)207 1767 y(E)246 1748 y(X-V)-11 b(orlage)20
b(\(PS_V)-11 b(orlage.te)o(x\))18 b(soll)k(als)f(V)-11
b(orlage)21 b(f\374r)-78 1848 y(die)37 b(Erstellung)f(der)h
(Ausarbeitungen)d(des)j(Projektseminars)-262 1947 y
(Automatisierungstechnik)j(dienen.)h(Zus\344tzlich)h(wird)h(die)g
(Style-)-262 2047 y(V)-11 b(orlage)46 b(PS.cls)h(ben\366tigt.)e(Die)h
(Dokumente)e(basieren)i(auf)g(den)-262 2147 y(IEEE)20
b(V)-11 b(orlagen)20 b(bare_jrnl.te)o(x)e(V)-9 b(ersion)19
b(1.2)h(und)g(IEEEtran.cls)f(V)-9 b(er)n(-)-262 2246
y(sion)29 b(1.6b)e(\(Online)g(auf)h(den)g(Autorenseiten)f(des)h(IEEE)g
(erh\344ltlich\))-262 2346 y(und)41 b(sind)h(f\374r)f(dieses)i
(Projektseminar)d(angepasst)h(w)o(orden.)f(V)-5 b(iel)-262
2446 y(Freunde)27 b(bei)i(der)f(Erstellung)f(eurer)h(Arbeit.)-179
2547 y(Bitte)41 b(beachtet)e(auch)f(die)i(Hinweise)g(zum)f(V)-9
b(erf)o(assen)39 b(wissen-)-262 2647 y(schaftlicher)28
b(T)-6 b(e)o(xte)28 b(in)g(Anhang)f(III)h(und)g(IV.)-179
2748 y(In)h(der)g(Einf\374hrung)d(sollte)j(kurz)f(beschrieben)f
(werden,)h(w)o(as)i(die)-262 2848 y(Problemstellung)j(der)h(Arbeit)g
(ist,)i(welche)e(V)-11 b(orarbeiten)33 b(es)j(schon)-262
2947 y(gibt)28 b(\(\223Stand)f(der)g(T)-6 b(echnik\224)26
b(mit)i(V)-9 b(erweis)28 b(auf)f(passende)g(Quellen\))-262
3047 y(und)33 b(w)o(as)g(der)g(neue)g(Beitrag)g(der)f(Arbeit)h(ist.)h
(Am)f(Ende)g(der)f(Ein-)-262 3146 y(f\374hrung)c(kann)h(kurz)g(auf)h
(die)g(Struktur)f(des)h(Artik)o(els)g(einge)o(gangen)-262
3246 y(werden,)d(z.B.:)-179 3348 y(Abschnitt)19 b(II)g(f\374hrt)g
(wichtige)g(Grundlagen)e(ein)i(und)g(Abschnitt)f(III)-262
3447 y(f)o(asst)48 b(schlie\337lich)d(die)h(Er)o(gebnisse)f(zusammen)g
(und)h(gibt)g(einen)-262 3547 y(Ausblick.)467 3774 y(I)t(I)t(.)f(G)t
Fm(R)q(U)t(N)t(D)t(L)t(A)q(G)t(E)t(N)-262 3910 y Fj(A.)c(Dies)29
b(ist)h(ein)f(Unter)o(absc)o(hnitt)-179 4042 y Fl(Subsection)f(te)o
(xt.)-179 4145 y Fj(1\))41 b(Dies)29 b(ist)h(ein)e(Unter)n(-Unter)o
(absc)o(hnitt:)40 b Fl(Subsubsection)27 b(te)o(xt.)331
4372 y(I)t(I)t(I)t(.)45 b(Z)t Fm(U)t(S)t(A)t(M)t(M)t(E)t(N)t(F)o(A)t(S)
t(S)t(U)t(N)t(G)-179 4508 y Fl(Hier)32 b(die)g(wichtigsten)f(Er)o
(gebnisse)f(der)h(Arbeit)h(in)g(5-10)e(S\344tzen)-262
4608 y(zusammenf)o(assen.)46 b(Dies)i(sollte)f(k)o(eine)g(W)m
(iederholung)e(des)i(Ab-)-262 4707 y(stracts)33 b(oder)f(der)g
(Einf\374hrung)d(sein.)k(Insbesondere)d(kann)h(hier)h(ein)-262
4807 y(Ausblick)c(auf)g(zuk\374nftige)e(Arbeiten)i(ge)o(geben)e
(werden.)598 5034 y(A)t Fm(N)t(H)t(A)t(N)t(G)f Fl(I)435
5134 y(O)t Fm(P)t(T)t(I)t(O)t(N)r(A)t(L)t(E)t(R)f Fl(T)t
Fm(I)t(T)t(E)t(L)-179 5270 y Fl(Anhang)j(eins.)582 5497
y(A)t Fm(N)t(H)t(A)t(N)t(G)e Fl(I)t(I)-179 5634 y(Anhang)i(zwei.)-191
5803 y Fm(Diese)d(Arbeit)h(wurde)f(v)o(on)g(Akad.T)n(itel)h(V)-9
b(orname)25 b(Name)f(unterst\374tzt.)2758 822 y Fl(A)t
Fm(N)t(H)t(A)t(N)t(G)h Fl(I)t(I)t(I)1937 922 y(R)t Fm(I)t(C)t(H)t(T)t
(L)t(I)t(N)t(I)t(E)t(N)g(F)t(\334)t(R)g(D)q(A)t(S)g Fl(V)t
Fm(E)t(R)t(F)o(A)t(S)t(S)t(E)t(N)g(W)t(I)t(S)t(S)t(E)t(N)t(S)t(C)t(H)t
(A)t(F)t(T)t(L)t(I)t(C)t(H)t(E)t(R)2792 1021 y Fl(A)t
Fm(R)t(B)t(E)t(I)t(T)t(E)t(N)2013 1163 y Fl(Im)37 b(F)o(olgenden)e
(werden)h(einige)g(wichtige)h(Richtlinien)f(zusam-)1930
1262 y(mengef)o(asst.)28 b(Die)g(Aufz\344hlung)e(ist)k(allerdings)d
(nicht)i(ersch\366pfend.)2013 1384 y Fi(\017)50 b Fl(Klare)24
b(Darstellung,)e(w)o(as)j(der)e(Eigenanteil)g(ist)i(und)e(w)o(as)i
(schon)2097 1483 y(v)n(orhanden)h(w)o(ar)-5 b(.)2013
1583 y Fi(\017)50 b Fl(V)-11 b(orsicht)60 b(v)n(or)h(Plagiaten:)f(v)n
(ollst\344ndige)f(Quellenangaben,)2097 1683 y(auch)35
b(bei)g(Bildern.)g(Es)h(sollte)g(immer)f(klar)g(ersichtlich)g(sein,)
2097 1782 y(w)o(as)27 b(der)f(Eigenanteil)f(ist)j(und)d(w)o(as)j(aus)e
(Quellen)g(entnommen)2097 1882 y(wurde.)2013 1982 y Fi(\017)50
b Fl(Bilder)29 b(nicht)f(1:1)g(aus)g(Quellen)g(k)o(opieren.)2013
2081 y Fi(\017)50 b Fl(Diskussion)e(der)h(Er)o(gebnisse)e
(\(Simulationen,)f(Messungen,)2097 2181 y(Rechnungen\):)40
b(W)l(urde)i(das)h(Er)o(gebnis)e(so)i(erw)o(artet?)g(W)-7
b(enn)2097 2280 y(nein,)28 b(w)o(as)h(sind)f(m\366gliche)g(Gr\374nde?)
2013 2380 y Fi(\017)50 b Fl(Autoren:)29 b(Als)i(Autor)f(sollte)g(jede)g
(Person)g(in)h(Betracht)f(gezo-)2097 2480 y(gen)38 b(werden,)g(die)h
(wesentlich)g(zur)f(Arbeit)h(beigetragen)e(hat)2097 2579
y(\(siehe)h(auch)f(die)h(Empfehlungen)c(der)j(DFG)i(diesbez\374glich,)
2097 2679 y(vgl.)26 b([2)o(]\).)g(Alle)g(Personen)g(mit)g(kleinerem)f
(Beitrag)h(\(f)o(achliche)2097 2779 y(Hinweise,)37 b(Beteiligung)g(an)h
(Datensammlung)d(etc.\))j(k\366nnen)2097 2878 y(in)29
b(der)f(Danksagung)e(oder)h(einer)h(Fu\337note)g(erw\344hnt)f(werden.)
2013 2978 y Fi(\017)50 b Fl(F)o(ormeln)25 b(in)i(den)f(Satz)h
(einbetten)e(und)h(alle)h(V)-9 b(ariablen)25 b(bei)h(der)2097
3077 y(ersten)31 b(V)-9 b(erwendung)29 b(im)i(T)-6 b(e)o(xt)31
b(einf\374hren.)e(Beispiel:)j(F\374r)g(die)2097 3177
y(T)-6 b(emperatur)26 b(er)o(gibt)i(sich)g(damit)2826
3344 y Fh(T)12 b Fg(\()p Fh(h)p Fg(\))22 b(=)h Fh(K)6
b(h)3234 3310 y Ff(2)3270 3344 y Fh(;)2097 3511 y Fl(sie)29
b(h\344ngt)f(quadratisch)f(v)n(on)g(der)i(H\366he)e Fh(h)i
Fl(ab)m(.)2758 3745 y(A)t Fm(N)t(H)t(A)t(N)t(G)c Fl(I)t(V)2516
3845 y(H)t Fm(I)t(N)t(W)t(E)t(I)t(S)t(E)g(Z)t(U)t(R)f
Fl(N)t Fm(O)q(T)n(A)m(T)t(I)t(O)t(N)2013 3986 y Fi(\017)50
b Fl(Abk\374rzungen)29 b(bei)j(der)h(ersten)f(V)-9 b(erwendung)30
b(erkl\344ren,)g(z.B.:)2097 4086 y(\223DFG)f(\(Deutsche)e(F)o
(orschungsgemeinschaft\)\224.)2013 4185 y Fi(\017)50
b Fl(F)o(ormelzeichen)30 b(k)o(onsistent)h(benennen,)f(nicht)i
(zwischen)f(den)2097 4285 y(Abschnitten)37 b(umbenennen.)e(F)o
(ormelzeichen)h(kursi)n(v)h(schrei-)2097 4385 y(ben,)28
b(z.B.)g(V)-9 b(ariable)28 b Fh(a)p Fl(.)2013 4484 y
Fi(\017)50 b Fl(Auf)c(k)o(orrekte)f(Dimensionen)g(und)g(Einheiten)g
(achten.)h(F\374r)2097 4584 y(Einheiten)c(das)i(SI-System)f(v)o
(erwenden,)e(z.B.)j(das)g(LaT)-6 b(eX-)2097 4684 y(P)o(ak)o(et)28
b Fj(units)h Fl(oder)e Fj(SIunits)p Fl(.)2013 4783 y
Fi(\017)50 b Fl(Zahlen:)28 b(Im)g(Deutschen)g(K)m(omma)g(als)h
(Dezimaltrennzeichen,)2097 4883 y(im)g(Englischen)e(Punkt.)2013
4982 y Fi(\017)50 b Fl(T)-7 b(abellen)31 b(haben)f(\334berschriften,)g
(Diagramme)g(haben)g(Unter)n(-)2097 5082 y(schriften.)2013
5182 y Fi(\017)50 b Fl(Diagramme:)73 b(Achsenbeschriftungen)c
(hinreichend)j(gro\337)2097 5281 y(\(insbesondere)26
b(die)j(Zahlen\).)2013 5381 y Fi(\017)50 b Fl(Diagrammunterschriften)33
b(sollen)k(im)h(W)-7 b(esentlichen)37 b(ausrei-)2097
5481 y(chen,)27 b(um)i(das)f(Diagramm)f(zu)i(v)o(erstehen.)2013
5580 y Fi(\017)50 b Fl(Indizes)i(werden)g Fj(kur)o(siv)i
Fl(gesetzt,)e(wenn)h(sie)g(die)g(Bedeu-)2097 5680 y(tung)28
b(v)n(on)h(V)-9 b(ariablen)28 b(haben,)g(ansonsten)g
Fe(normal)p Fl(.)h(Beispiele:)2097 5779 y Fh(V)2145 5791
y Fd(k)2186 5779 y Fh(;)43 b(k)26 b Fg(=)d(1)p Fh(;)14
b Fg(2)p Fh(;)g(:)g(:)g(:)27 b Fl(und)h Fh(V)2893 5791
y Ff(input)3052 5779 y Fl(.)3993 6043 y Fs(1)p eop end
%%Page: 2 2
TeXDict begin 2 1 bop 1705 -307 a Fs(PR)n(OJEKTSEMIN)n(AR)18
b(R)n(OBO)n(TIK)h(UND)i(COMPUT)-5 b(A)f(TION)n(AL)17
b(INTELLIGENCE,)h(V)n(OL.16,)g(SS)j(2016)-248 -133 y
@beginspecial 14 @llx 14 @lly 555 @urx 32 @ury 5140 @rwi
@setspecial
%%BeginDocument: ./pics/rmr2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: GIMP PostScript file plugin V 1.17 by Peter Kirchgessner
%%Title: rmr2.eps
%%CreationDate: Tue Dec  9 15:53:37 2014
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 14 14 555 32
%%EndComments
%%BeginProlog
% Use own dictionary to avoid conflicts
10 dict begin
%%EndProlog
%%Page: 1 1
% Translate for offset
14.173228346456694 14.173228346456694 translate
% Translate to begin of first scanline
0 17.280000000000001 translate
540 -17.280000000000001 scale
% Image geometry
750 24 8
% Transformation matrix
[ 750 0 0 24 0 0 ]
% Strings to hold RGB-samples per scanline
/rstr 750 string def
/gstr 750 string def
/bstr 750 string def
{currentfile /ASCII85Decode filter /RunLengthDecode filter rstr readstring pop}
{currentfile /ASCII85Decode filter /RunLengthDecode filter gstr readstring pop}
{currentfile /ASCII85Decode filter /RunLengthDecode filter bstr readstring pop}
true 3
%%BeginData:         1451 ASCII Bytes
colorimage
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
JW55?JW55?JW5kQJ,~>
J]<8\J]<8\J]<nnJ,~>
JNn]MJNn]MJNo>_J,~>
%%EndData
showpage
%%Trailer
end
%%EOF

%%EndDocument
 @endspecial 528 125 a Fl(D)q Fm(A)t(N)t(K)t(S)t(A)q(G)t(U)t(N)t(G)-179
250 y Fl(W)-7 b(enn)31 b(ihr)f(jemanden)e(dank)o(en)h(w)o(ollt,)h(der)g
(Euch)f(bei)i(der)e(Arbeit)-262 350 y(besonders)36 b(unterst\374tzt)g
(hat)i(\(K)m(orrekturlesen,)c(f)o(achliche)i(Hinwei-)-262
450 y(se,...\),)28 b(dann)f(ist)j(hier)e(der)g(daf\374r)f(v)n(or)o
(gesehene)f(Platz.)613 661 y(Q)s Fm(U)t(E)t(L)t(L)t(E)t(N)-262
785 y([1])42 b(H.)27 b(K)n(opka)h(and)h(P)-7 b(.)26 b(W)-6
b(.)27 b(Daly)l(,)h Fc(A)f(Guide)h(to)g(L)967 776 y Fb(A)988
785 y Fc(T)1014 800 y(E)1046 785 y(X)p Fm(,)f(3rd)h(ed.)f(Harlo)n(w)l
(,)i(England:)-143 859 y(Addison-W)-5 b(esle)o(y)l(,)25
b(1999.)-262 934 y([2])42 b(Deutsche)28 b(F)o(orschungsgemeinschaft,)h
Fc(V)-7 b(or)o(sc)o(hl\344g)o(e)28 b(zur)d(Sic)o(herung)j(guter)f(wis-)
-143 1009 y(sensc)o(haftlic)o(her)h(Pr)o(axis)p Fm(,)23
b(Denkschrift,)i(W)-5 b(einheim:)25 b(W)m(ile)o(y-VCH,)g(1998.)-262
2385 y @beginspecial 210 @llx 555 @lly 291 @urx 624 @ury
720 @rwi 613 @rhi @clip @setspecial
%%BeginDocument: ./pics/ComicKopf.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 210 555 291 624 
%%LanguageLevel: 1
%%Creator: CorelDRAW 11
%%Title: ComicKopf.eps
%%CreationDate: Tue Jan 10 14:16:35 2006
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/UseLevel 1 def
%Build: CorelDRAW 11 Version 11.633
%Color profile:  Generic offset separations profile
/CorelIsEPS true def
%%BeginResource: procset wCorel11Dict 11.0 0
/wCorel11Dict 300 dict def wCorel11Dict begin
% Copyright (c)1992-2002 Corel Corporation
% All rights reserved.     v11.0 r0.0
/bd{bind def}bind def/ld{load def}bd/xd{exch def}bd/_ null def/rp{{pop}repeat}
bd/@cp/closepath ld/@gs/gsave ld/@gr/grestore ld/@np/newpath ld/Tl/translate ld
/$sv 0 def/@sv{/$sv save def}bd/@rs{$sv restore}bd/spg/showpage ld/showpage{}
bd currentscreen/@dsp xd/$dsp/@dsp def/$dsa xd/$dsf xd/$sdf false def/$SDF
false def/$Scra 0 def/SetScr/setscreen ld/@ss{2 index 0 eq{$dsf 3 1 roll 4 -1
roll pop}if exch $Scra add exch load SetScr}bd/SepMode_5 where{pop}{/SepMode_5
0 def}ifelse/CorelIsSeps where{pop}{/CorelIsSeps false def}ifelse
/CorelIsInRIPSeps where{pop}{/CorelIsInRIPSeps false def}ifelse/CorelIsEPS
where{pop}{/CorelIsEPS false def}ifelse/CurrentInkName_5 where{pop}
{/CurrentInkName_5(Composite)def}ifelse/$ink_5 where{pop}{/$ink_5 -1 def}
ifelse/$c 0 def/$m 0 def/$y 0 def/$k 0 def/$t 1 def/$n _ def/$o 0 def/$fil 0
def/$C 0 def/$M 0 def/$Y 0 def/$K 0 def/$T 1 def/$N _ def/$O 0 def/$PF false
def/s1c 0 def/s1m 0 def/s1y 0 def/s1k 0 def/s1t 0 def/s1n _ def/$bkg false def
/SK 0 def/SM 0 def/SY 0 def/SC 0 def/$op false def matrix currentmatrix/$ctm xd
/$ptm matrix def/$ttm matrix def/$stm matrix def/$ffpnt true def
/CorelDrawReencodeVect[16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring
16#A/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle
16#60/grave 16#7C/bar
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe 16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/L2?/languagelevel where{pop languagelevel 2 ge}{false}ifelse def/Comp?{
/LumSepsDict where{pop false}{/AldusSepsDict where{pop false}{1 0 0 0 @gs
setcmykcolor currentcmykcolor @gr add add add 0 ne 0 1 0 0 @gs setcmykcolor
currentcmykcolor @gr add add add 0 ne 0 0 1 0 @gs setcmykcolor currentcmykcolor
@gr add add add 0 ne 0 0 0 1 @gs setcmykcolor currentcmykcolor @gr add add add
0 ne and and and}ifelse}ifelse}bd/@PL{/LV where{pop LV 2 ge L2? not and{@np
/Courier findfont 12 scalefont setfont 72 144 m
(The PostScript level set in the Corel application is higher than)show 72 132 m
(the PostScript level of this device. Change the PS Level in the Corel)show 72
120 m(application to Level 1 by selecting the PostScript tab in the print)show
72 108 m(dialog, and selecting Level 1 from the Compatibility drop down list.)
show flush spg quit}if}if}bd/@BeginSysCorelDict{systemdict/Corel30Dict known
{systemdict/Corel30Dict get exec}if systemdict/CorelLexDict known{1 systemdict
/CorelLexDict get exec}if}bd/@EndSysCorelDict{systemdict/Corel30Dict known
{end}if/EndCorelLexDict where{pop EndCorelLexDict}if}bd AutoFlatness{/@ifl{dup
currentflat exch sub 10 gt{
([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)print flush
@np exit}{currentflat 2 add setflat}ifelse}bd/@fill/fill ld/fill{currentflat{
{@fill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@eofill/eofill ld/eofill
{currentflat{{@eofill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@clip
/clip ld/clip{currentflat{{@clip}stopped{@ifl}{exit}ifelse}bind loop setflat}
bd/@eoclip/eoclip ld/eoclip{currentflat{{@eoclip}stopped{@ifl}{exit}ifelse}
bind loop setflat}bd/@stroke/stroke ld/stroke{currentflat{{@stroke}stopped
{@ifl}{exit}ifelse}bind loop setflat}bd}if L2?{/@ssa{true setstrokeadjust}bd}{
/@ssa{}bd}ifelse/d/setdash ld/j/setlinejoin ld/J/setlinecap ld/M/setmiterlimit
ld/w/setlinewidth ld/O{/$o xd}bd/R{/$O xd}bd/W/eoclip ld/c/curveto ld/C/c ld/l
/lineto ld/L/l ld/rl/rlineto ld/m/moveto ld/n/newpath ld/N/newpath ld/P{11 rp}
bd/u{}bd/U{}bd/A{pop}bd/q/@gs ld/Q/@gr ld/&{}bd/@j{@sv @np}bd/@J{@rs}bd/g{1
exch sub/$k xd/$c 0 def/$m 0 def/$y 0 def/$t 1 def/$n _ def/$fil 0 def}bd/G{1
sub neg/$K xd _ 1 0 0 0/$C xd/$M xd/$Y xd/$T xd/$N xd}bd/k{1 index type
/stringtype eq{/$t xd/$n xd}{/$t 0 def/$n _ def}ifelse/$k xd/$y xd/$m xd/$c xd
/$fil 0 def}bd/K{1 index type/stringtype eq{/$T xd/$N xd}{/$T 0 def/$N _ def}
ifelse/$K xd/$Y xd/$M xd/$C xd}bd/x/k ld/X/K ld/sf{1 index type/stringtype eq{
/s1t xd/s1n xd}{/s1t 0 def/s1n _ def}ifelse/s1k xd/s1y xd/s1m xd/s1c xd}bd/i{
dup 0 ne{setflat}{pop}ifelse}bd/v{4 -2 roll 2 copy 6 -2 roll c}bd/V/v ld/y{2
copy c}bd/Y/y ld/@w{matrix rotate/$ptm xd matrix scale $ptm dup concatmatrix
/$ptm xd 1 eq{$ptm exch dup concatmatrix/$ptm xd}if 1 w}bd/@g{1 eq dup/$sdf xd
{/$scp xd/$sca xd/$scf xd}if}bd/@G{1 eq dup/$SDF xd{/$SCP xd/$SCA xd/$SCF xd}
if}bd/@D{2 index 0 eq{$dsf 3 1 roll 4 -1 roll pop}if 3 copy exch $Scra add exch
load SetScr/$dsp xd/$dsa xd/$dsf xd}bd/$ngx{$SDF{$SCF SepMode_5 0 eq{$SCA}
{$dsa}ifelse $SCP @ss}if}bd/@MN{2 copy le{pop}{exch pop}ifelse}bd/@MX{2 copy ge
{pop}{exch pop}ifelse}bd/InRange{3 -1 roll @MN @MX}bd/@sqr{dup 0 rl dup 0 exch
rl neg 0 rl @cp}bd/currentscale{1 0 dtransform matrix defaultmatrix idtransform
dup mul exch dup mul add sqrt 0 1 dtransform matrix defaultmatrix idtransform
dup mul exch dup mul add sqrt}bd/@unscale{}bd/wDstChck{2 1 roll dup 3 -1 roll
eq{1 add}if}bd/@dot{dup mul exch dup mul add 1 exch sub}bd/@lin{exch pop abs 1
exch sub}bd/cmyk2rgb{3{dup 5 -1 roll add 1 exch sub dup 0 lt{pop 0}if exch}
repeat pop}bd/rgb2cmyk{3{1 exch sub 3 1 roll}repeat 3 copy @MN @MN 3{dup 5 -1
roll sub neg exch}repeat}bd/rgb2g{2 index .299 mul 2 index .587 mul add 1 index
.114 mul add 4 1 roll pop pop pop}bd/WaldoColor_5 where{pop}{/SetRgb
/setrgbcolor ld/GetRgb/currentrgbcolor ld/SetGry/setgray ld/GetGry/currentgray
ld/SetRgb2 systemdict/setrgbcolor get def/GetRgb2 systemdict/currentrgbcolor
get def/SetHsb systemdict/sethsbcolor get def/GetHsb systemdict
/currenthsbcolor get def/rgb2hsb{SetRgb2 GetHsb}bd/hsb2rgb{3 -1 roll dup floor
sub 3 1 roll SetHsb GetRgb2}bd/setcmykcolor where{pop/LumSepsDict where{pop
/SetCmyk_5{LumSepsDict/setcmykcolor get exec}def}{/AldusSepsDict where{pop
/SetCmyk_5{AldusSepsDict/setcmykcolor get exec}def}{/SetCmyk_5/setcmykcolor ld
}ifelse}ifelse}{/SetCmyk_5{cmyk2rgb SetRgb}bd}ifelse/currentcmykcolor where{
pop/GetCmyk/currentcmykcolor ld}{/GetCmyk{GetRgb rgb2cmyk}bd}ifelse
/setoverprint where{pop}{/setoverprint{/$op xd}bd}ifelse/currentoverprint where
{pop}{/currentoverprint{$op}bd}ifelse/@tc_5{5 -1 roll dup 1 ge{pop}{4{dup 6 -1
roll mul exch}repeat pop}ifelse}bd/@trp{exch pop 5 1 roll @tc_5}bd
/setprocesscolor_5{SepMode_5 0 eq{SetCmyk_5}{0 4 $ink_5 sub index exch pop 5 1
roll pop pop pop pop SepsColor true eq{$ink_5 3 gt{1 sub neg SetGry}{0 0 0 4
$ink_5 roll SetCmyk_5}ifelse}{1 sub neg SetGry}ifelse}ifelse}bd
/findcmykcustomcolor where{pop}{/findcmykcustomcolor{5 array astore}bd}ifelse
/Corelsetcustomcolor_exists false def/setcustomcolor where{pop
/Corelsetcustomcolor_exists true def}if CorelIsSeps true eq CorelIsInRIPSeps
false eq and{/Corelsetcustomcolor_exists false def}if
Corelsetcustomcolor_exists false eq{/setcustomcolor{exch aload pop SepMode_5 0
eq{pop @tc_5 setprocesscolor_5}{CurrentInkName_5 eq{4 index}{0}ifelse 6 1 roll
5 rp 1 sub neg SetGry}ifelse}bd}if/@scc_5{dup type/booleantype eq{dup
currentoverprint ne{setoverprint}{pop}ifelse}{1 eq setoverprint}ifelse dup _ eq
{pop setprocesscolor_5 pop}{findcmykcustomcolor exch setcustomcolor}ifelse
SepMode_5 0 eq{true}{GetGry 1 eq currentoverprint and not}ifelse}bd/colorimage
where{pop/ColorImage{colorimage}def}{/ColorImage{/ncolors xd/$multi xd $multi
true eq{ncolors 3 eq{/daqB xd/daqG xd/daqR xd pop pop exch pop abs{daqR pop
daqG pop daqB pop}repeat}{/daqK xd/daqY xd/daqM xd/daqC xd pop pop exch pop abs
{daqC pop daqM pop daqY pop daqK pop}repeat}ifelse}{/dataaq xd{dataaq ncolors
dup 3 eq{/$dat xd 0 1 $dat length 3 div 1 sub{dup 3 mul $dat 1 index get 255
div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div rgb2g 255 mul
cvi exch pop $dat 3 1 roll put}for $dat 0 $dat length 3 idiv getinterval pop}{
4 eq{/$dat xd 0 1 $dat length 4 div 1 sub{dup 4 mul $dat 1 index get 255 div
$dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div $dat 4 index 3
add get 255 div cmyk2rgb rgb2g 255 mul cvi exch pop $dat 3 1 roll put}for $dat
0 $dat length ncolors idiv getinterval}if}ifelse}image}ifelse}bd}ifelse
/setcmykcolor{1 5 1 roll _ currentoverprint @scc_5/$ffpnt xd}bd
/currentcmykcolor{GetCmyk}bd/setrgbcolor{rgb2cmyk setcmykcolor}bd
/currentrgbcolor{currentcmykcolor cmyk2rgb}bd/sethsbcolor{hsb2rgb setrgbcolor}
bd/currenthsbcolor{currentrgbcolor rgb2hsb}bd/setgray{dup dup setrgbcolor}bd
/currentgray{currentrgbcolor rgb2g}bd/InsideDCS false def/IMAGE/image ld/image
{InsideDCS{IMAGE}{/EPSDict where{pop SepMode_5 0 eq{IMAGE}{dup type/dicttype eq
{dup/ImageType get 1 ne{IMAGE}{dup dup/BitsPerComponent get 8 eq exch
/BitsPerComponent get 1 eq or currentcolorspace 0 get/DeviceGray eq and{
CurrentInkName_5(Black)eq{IMAGE}{dup/DataSource get/TCC xd/Height get abs{TCC
pop}repeat}ifelse}{IMAGE}ifelse}ifelse}{2 index 1 ne{CurrentInkName_5(Black)eq
{IMAGE}{/TCC xd pop pop exch pop abs{TCC pop}repeat}ifelse}{IMAGE}ifelse}
ifelse}ifelse}{IMAGE}ifelse}ifelse}bd}ifelse/WaldoColor_5 true def/$fm 0 def
/wfill{1 $fm eq{fill}{eofill}ifelse}bd/@Pf{@sv SepMode_5 0 eq $Psc 0 ne or
$ink_5 3 eq or{0 J 0 j[]0 d $t $c $m $y $k $n $o @scc_5 pop $ctm setmatrix 72
1000 div dup matrix scale dup concat dup Bburx exch Bbury exch itransform
ceiling cvi/Bbury xd ceiling cvi/Bburx xd Bbllx exch Bblly exch itransform
floor cvi/Bblly xd floor cvi/Bbllx xd $Prm aload pop $Psn load exec}{1 SetGry
wfill}ifelse @rs @np}bd/F{matrix currentmatrix $sdf{$scf $sca $scp @ss}if $fil
1 eq{CorelPtrnDoFill}{$fil 2 eq{@ff}{$fil 3 eq{@Pf}{$fil 4 eq
{CorelShfillDoFill}{$t $c $m $y $k $n $o @scc_5{wfill}{@np}ifelse}ifelse}
ifelse}ifelse}ifelse $sdf{$dsf $dsa $dsp @ss}if setmatrix}bd/f{@cp F}bd/S{
matrix currentmatrix $ctm setmatrix $SDF{$SCF $SCA $SCP @ss}if $T $C $M $Y $K
$N $O @scc_5{matrix currentmatrix $ptm concat stroke setmatrix}{@np}ifelse $SDF
{$dsf $dsa $dsp @ss}if setmatrix}bd/s{@cp S}bd/B{@gs F @gr S}bd/b{@cp B}bd/_E{
5 array astore exch cvlit xd}bd/@cc{currentfile $dat readhexstring pop}bd/@sm{
/$ctm $ctm currentmatrix def}bd/@E{/Bbury xd/Bburx xd/Bblly xd/Bbllx xd}bd/@c{
@cp}bd/@P{/$fil 3 def/$Psn xd/$Psc xd array astore/$Prm xd}bd/tcc{@cc}def/@B{
@gs S @gr F}bd/@b{@cp @B}bd/@sep{CurrentInkName_5(Composite)eq{/$ink_5 -1 def}
{CurrentInkName_5(Cyan)eq{/$ink_5 0 def}{CurrentInkName_5(Magenta)eq{/$ink_5 1
def}{CurrentInkName_5(Yellow)eq{/$ink_5 2 def}{CurrentInkName_5(Black)eq
{/$ink_5 3 def}{/$ink_5 4 def}ifelse}ifelse}ifelse}ifelse}ifelse}bd/@whi{@gs
-72000 dup m -72000 72000 l 72000 dup l 72000 -72000 l @cp 1 SetGry fill @gr}
bd/@neg{[{1 exch sub}/exec cvx currenttransfer/exec cvx]cvx settransfer @whi}
bd/deflevel 0 def/@sax{/deflevel deflevel 1 add def}bd/@eax{/deflevel deflevel
dup 0 gt{1 sub}if def deflevel 0 gt{/eax load}{eax}ifelse}bd/eax{{exec}forall}
bd/@rax{deflevel 0 eq{@rs @sv}if}bd systemdict/pdfmark known not{/pdfmark
/cleartomark ld}if/wclip{1 $fm eq{clip}{eoclip}ifelse}bd
% Copyright (c)1992-2002 Corel Corporation
% All rights reserved.     v11.0 r0.0
/@ii{concat 3 index 3 index m 3 index 1 index l 2 copy l 1 index 3 index l 3
index 3 index l clip pop pop pop pop}bd/@i{@sm @gs @ii 6 index 1 ne{/$frg true
def pop pop}{1 eq{s1t s1c s1m s1y s1k s1n $O @scc_5/$frg xd}{/$frg false def}
ifelse 1 eq{@gs $ctm setmatrix F @gr}if}ifelse @np/$ury xd/$urx xd/$lly xd
/$llx xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul 8 div ceiling cvi string
def $bkg $frg or{$SDF{$SCF $SCA $SCP @ss}if $llx $lly Tl $urx $llx sub $ury
$lly sub scale $bkg{$t $c $m $y $k $n $o @scc_5 pop}if $wid $hei abs $bts 1 eq
{$bkg}{$bts}ifelse[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/tcc load $bts
1 eq{imagemask}{image}ifelse $SDF{$dsf $dsa $dsp @ss}if}{$hei abs{tcc pop}
repeat}ifelse @gr $ctm setmatrix}bd/@I{@sm @gs @ii @np/$ury xd/$urx xd/$lly xd
/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd $ngx $llx $lly Tl $urx $llx sub $ury
$lly sub scale $wid $hei abs $bts[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse
]$msimage false eq $ncl 1 eq or{/$dat $wid $bts mul $ncl mul 8 div ceiling cvi
string def/@cc load false $ncl ColorImage}{$wid $bts mul 8 div ceiling cvi $ncl
3 eq{dup dup/$dat1 exch string def/$dat2 exch string def/$dat3 exch string def
/@cc1 load/@cc2 load/@cc3 load}{dup dup dup/$dat1 exch string def/$dat2 exch
string def/$dat3 exch string def/$dat4 exch string def/@cc1 load/@cc2 load
/@cc3 load/@cc4 load}ifelse true $ncl ColorImage}ifelse $SDF{$dsf $dsa $dsp
@ss}if @gr $ctm setmatrix}bd/@cc1{currentfile $dat1 readhexstring pop}bd/@cc2{
currentfile $dat2 readhexstring pop}bd/@cc3{currentfile $dat3 readhexstring pop
}bd/@cc4{currentfile $dat4 readhexstring pop}bd/$msimage false def/COMP 0 def
/MaskedImage false def L2?{/@I_2{@sm @gs @ii @np/$ury xd/$urx xd/$lly xd/$llx
xd/$ncl xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul $ncl mul 8 div ceiling
cvi string def $ngx $ncl 1 eq{/DeviceGray}{$ncl 3 eq{/DeviceRGB}{/DeviceCMYK}
ifelse}ifelse setcolorspace $llx $lly Tl $urx $llx sub $ury $lly sub scale 8
dict begin/ImageType 1 def/Width $wid def/Height $hei abs def/BitsPerComponent
$bts def/Decode $ncl 1 eq{[0 1]}{$ncl 3 eq{[0 1 0 1 0 1]}{[0 1 0 1 0 1 0 1]}
ifelse}ifelse def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def
/DataSource currentfile/ASCII85Decode filter COMP 1 eq{/DCTDecode filter}{COMP
2 eq{/RunLengthDecode filter}if}ifelse def currentdict end image $SDF{$dsf $dsa
$dsp @ss}if @gr $ctm setmatrix}bd}{/@I_2{}bd}ifelse/@I_3{@sm @gs @ii @np/$ury
xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul
$ncl mul 8 div ceiling cvi string def $ngx $ncl 1 eq{/DeviceGray}{$ncl 3 eq
{/DeviceRGB}{/DeviceCMYK}ifelse}ifelse setcolorspace $llx $lly Tl $urx $llx sub
$ury $lly sub scale/ImageDataDict 8 dict def ImageDataDict begin/ImageType 1
def/Width $wid def/Height $hei abs def/BitsPerComponent $bts def/Decode $ncl 1
eq{[0 1]}{$ncl 3 eq{[0 1 0 1 0 1]}{[0 1 0 1 0 1 0 1]}ifelse}ifelse def
/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource
currentfile/ASCII85Decode filter COMP 1 eq{/DCTDecode filter}{COMP 2 eq{
/RunLengthDecode filter}if}ifelse def end/MaskedImageDict 7 dict def
MaskedImageDict begin/ImageType 3 def/InterleaveType 3 def/MaskDict
ImageMaskDict def/DataDict ImageDataDict def end MaskedImageDict image $SDF
{$dsf $dsa $dsp @ss}if @gr $ctm setmatrix}bd/@SetMask{/$mbts xd/$mhei xd/$mwid
xd/ImageMaskDict 8 dict def ImageMaskDict begin/ImageType 1 def/Width $mwid def
/Height $mhei abs def/BitsPerComponent $mbts def/DataSource maskstream def
/ImageMatrix[$mwid 0 0 $mhei neg 0 $mhei 0 gt{$mhei}{0}ifelse]def/Decode[1 0]
def end}bd/@daq{dup type/arraytype eq{{}forall}if}bd/@BMP{/@cc xd UseLevel 3 eq
MaskedImage true eq and{7 -2 roll pop pop @I_3}{12 index 1 gt UseLevel 2 eq
UseLevel 3 eq or and{7 -2 roll pop pop @I_2}{11 index 1 eq{12 -1 roll pop @i}{
7 -2 roll pop pop @I}ifelse}ifelse}ifelse}bd
% Copyright (c)1992-2002 Corel Corporation
% All rights reserved.     v11.0 r0.0
/@p{/$fil 1 def 1 eq dup/$vectpat xd{/$pfrg true def}{@gs $t $c $m $y $k $n $o
@scc_5/$pfrg xd @gr}ifelse/$pm xd/$psy xd/$psx xd/$pyf xd/$pxf xd/$pn xd}bd
/CorelPtrnDoFill{@gs $ctm setmatrix $pm concat CorelPtrnSetBBox wclip @sv Bburx
Bbury $pm itransform/$tury xd/$turx xd Bbllx Bblly $pm itransform/$tlly xd
/$tllx xd newpath $tllx $tlly m $tllx $tury l $turx $tury l $turx $tlly l $tllx
$tlly m @cp pathbbox @rs/$tury xd/$turx xd/$tlly xd/$tllx xd/$wid $turx $tllx
sub def/$hei $tury $tlly sub def @gs $vectpat{1 0 0 0 0 _ $o @scc_5{wfill}if}{
$t $c $m $y $k $n $o @scc_5{SepMode_5 0 eq $pfrg or{$tllx $tlly Tl $wid $hei
scale <00> 8 1 false[8 0 0 1 0 0]{}imagemask}{/$bkg true def}ifelse}if}ifelse
@gr $wid 0 gt $hei 0 gt and{$pn cvlit load aload pop/$pd xd 3 -1 roll sub
/$phei xd exch sub/$pwid xd $wid $pwid div ceiling 1 add/$tlx xd $hei $phei div
ceiling 1 add/$tly xd currentdict/CorelPtrnL2Pattern known $psy 0 eq and $psx 0
eq and{CorelPtrnL2Pattern}{$psx 0 eq{CorelPtrnTileVeritcal}{CorelPtrnTileHoriz
}ifelse}ifelse}if @gr @np/$bkg false def}bd/CorelPtrnSetBBox{pathbbox/$ury xd
/$urx xd/$lly xd/$llx xd}bd/CorelPtrnSetFirstTile{$tllx $pxf add dup $tllx gt
{$pwid sub}if/$tx xd $tury $pyf sub dup $tury lt{$phei add}if/$ty xd}bd/p{/$pm
xd 7 rp/$pyf xd/$pxf xd/$pn xd/$fil 1 def}bd/CorelPtrnDraw{@ep}bd
/CorelPtrnPutTile{@sv/$in true def 2 copy dup $lly le{/$in false def}if $phei
sub $ury ge{/$in false def}if dup $urx ge{/$in false def}if $pwid add $llx le{
/$in false def}if $in{@np 2 copy m $pwid 0 rl 0 $phei neg rl $pwid neg 0 rl 0
$phei rl clip @np $pn cvlit load aload pop 7 -1 roll 5 index sub 7 -1 roll 3
index sub Tl matrix currentmatrix/$ctm xd CorelPtrnDraw pop pop pop pop}{pop
pop}ifelse @rs}bd/CorelPtrnTileHoriz{CorelPtrnSetFirstTile 0 1 $tly 1 sub{dup
$psx mul $tx add{dup $llx gt{$pwid sub}{exit}ifelse}loop exch $phei mul $ty
exch sub 0 1 $tlx 1 sub{$pwid mul 3 copy 3 -1 roll add exch CorelPtrnPutTile
pop}for pop pop}for}bd/CorelPtrnTileVeritcal{CorelPtrnSetFirstTile 0 1 $tlx 1
sub{dup $pwid mul $tx add exch $psy mul $ty exch sub{dup $ury lt{$phei add}
{exit}ifelse}loop 0 1 $tly 1 sub{$phei mul 3 copy sub CorelPtrnPutTile pop}for
pop pop}for}bd L2? UseLevel 2 ge and{/CorelPtrnL2Pattern{@sv[$pn cvlit load
aload pop pop]$pwid $phei $pn cvlit load aload pop pop pop pop pathbbox pop pop
2 index sub exch 3 index sub 4 -2 roll pop pop exch matrix identmatrix
translate/PatternMatrix xd/PatternYStep xd/PatternXStep xd/PatternBBox xd
currentdict/PatternMainDict xd <</PaintType 1/PatternType 1/TilingType 1/BBox
PatternBBox/XStep PatternXStep/YStep PatternYStep/PaintProc{begin
PatternMainDict begin $ctm currentmatrix pop 0 CorelPtrnDraw end end}bind >>
PatternMatrix makepattern setpattern fill @rs}def}if
end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel11Dict begin
@BeginSysCorelDict
2.6131 setmiterlimit
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
210.42397 555.82668 290.61184 623.58860 @E
 0 O 0 @g
0.00 0.00 0.00 0.90 k
0 J 0 j [] 0 d 0 R 0 @G
0.00 0.00 0.00 1.00 K
0 0.21600 0.21600 0.00000 @w
/$fm 0 def
290.61184 582.46668 m
290.61184 581.98989 290.40321 581.75150 289.98624 581.75150 c
289.62850 581.75150 288.49606 582.34734 286.58920 583.53931 c
286.11213 583.77770 285.45676 584.07562 284.62252 584.43335 C
284.62252 584.01609 284.68205 583.39020 284.80110 582.55597 c
284.92044 581.72173 284.97997 581.09584 284.97997 580.67858 c
284.97997 577.16249 284.47342 575.40416 283.46031 575.40416 c
282.74513 575.40416 282.38769 575.79165 282.38769 576.56636 c
282.32787 577.63928 282.08948 578.68214 281.67250 579.69524 C
279.82488 572.66277 276.07011 566.92658 270.40847 562.48668 c
264.74655 558.04649 258.28044 555.82668 251.00957 555.82668 c
243.20239 555.82668 236.33376 558.35943 230.40397 563.42523 c
224.47389 568.49102 220.94277 574.89761 219.81061 582.64526 C
219.54246 582.73483 l
219.00586 583.03276 218.73770 583.42025 218.73770 583.89676 c
218.73770 584.37354 219.00586 584.70151 219.54246 584.88009 C
219.54246 584.96967 L
219.00586 584.96967 l
218.11209 584.96967 217.18800 585.11877 216.23471 585.41669 C
216.11537 585.11877 215.69839 584.96967 214.98321 584.96967 c
214.02964 584.96967 213.07606 585.17830 212.12249 585.59528 c
210.99005 586.13187 210.42397 586.81729 210.42397 587.65153 c
210.42397 589.02208 210.87099 589.70750 211.76504 589.70750 c
212.18202 589.70750 212.80762 589.64797 213.64214 589.52891 c
214.47638 589.40957 215.10227 589.35005 215.51953 589.35005 c
216.05584 589.35005 L
216.05584 589.52891 l
216.05584 590.18428 217.27757 592.09143 219.72104 595.25008 C
218.76746 595.07121 217.69483 594.98192 216.50287 594.98192 c
215.78769 594.98192 214.74482 595.16079 213.37398 595.51824 c
212.65880 595.69710 212.30135 596.05483 212.30135 596.59115 c
212.30135 597.12746 212.65880 597.48491 213.37398 597.66378 c
216.47310 598.49802 219.15496 600.73313 221.41956 604.36857 c
222.67106 606.51411 224.57820 609.70252 227.14101 613.93380 c
229.34608 617.33083 232.26633 619.35732 235.90176 620.01269 C
235.12706 620.25109 234.29254 620.37043 233.39877 620.37043 c
233.21991 620.37043 L
232.32586 619.89364 231.78954 619.65524 231.61068 619.65524 c
231.01483 619.65524 230.71691 619.98293 230.71691 620.63858 c
230.71691 621.94961 231.61068 622.60526 233.39877 622.60526 c
234.02438 622.60526 L
234.68003 623.26063 235.93153 623.58860 237.77915 623.58860 c
239.20951 623.58860 241.36980 623.15660 244.26028 622.29231 c
247.15077 621.42803 249.07266 620.99603 250.02624 620.99603 C
250.68189 621.35376 251.30750 621.62192 251.90362 621.80079 C
253.63191 622.99247 255.62835 623.58860 257.89323 623.58860 c
261.34951 623.58860 263.76321 622.75436 265.13405 621.08561 C
268.76948 620.01269 271.74954 617.59899 274.07367 613.84450 c
275.32517 611.57991 277.29213 608.27216 279.97398 603.92154 c
282.29811 600.34564 285.39723 598.22986 289.27106 597.57449 c
290.04576 597.45543 290.43326 597.09770 290.43326 596.50157 c
290.43326 595.96526 290.10529 595.60781 289.44992 595.42894 c
288.01956 595.01169 286.58920 594.80306 285.15883 594.80306 c
284.44365 594.80306 283.72847 594.89263 283.01329 595.07121 C
283.37102 593.70066 284.62252 591.79351 286.76806 589.35005 c
288.91332 586.90658 290.16510 584.85061 290.52255 583.18157 c
290.58208 582.94318 290.61184 582.70507 290.61184 582.46668 c
@c
277.82844 583.36044 m
277.17279 584.73128 276.09987 585.86372 274.60998 586.75748 C
274.07367 585.32712 272.94123 584.61194 271.21294 584.61194 c
270.67663 584.61194 269.84211 585.11877 268.70995 586.13187 c
267.57751 587.14498 266.98167 587.91969 266.92214 588.45600 c
266.86233 589.29024 267.24983 589.70750 268.08435 589.70750 c
268.26293 589.70750 268.48658 589.67773 268.75474 589.61820 c
269.02290 589.55868 269.24627 589.52891 269.42513 589.52891 c
270.08079 589.52891 270.40847 589.76731 270.40847 590.24409 c
270.40847 591.13786 269.12693 592.00214 266.56441 592.83638 c
265.37244 593.19411 264.38910 593.37269 263.61439 593.37269 c
262.42243 593.37269 260.67912 592.95572 258.38476 592.12120 c
256.09011 591.28696 254.31732 590.86970 253.06583 590.86970 c
252.70809 590.86970 L
253.87030 589.43934 l
254.40661 588.78397 254.67477 588.30690 254.67477 588.00898 c
254.67477 587.11521 254.16822 586.81729 253.15512 587.11521 c
250.47326 587.88992 248.44677 589.35005 247.07622 591.49559 C
243.14287 589.88636 240.28214 589.08189 238.49433 589.08189 c
237.71934 589.08189 236.94463 589.23099 236.16992 589.52891 c
235.15654 589.94617 234.65027 590.48249 234.65027 591.13786 c
234.65027 591.67417 235.06724 591.94261 235.90176 591.94261 c
238.64315 591.94261 240.01398 592.64277 240.01398 594.04337 c
240.01398 595.32463 239.17946 595.96526 237.51099 595.96526 c
236.02082 595.96526 234.85861 595.23506 234.02438 593.76019 c
233.18986 592.28504 232.77288 590.78041 232.77288 589.21597 c
232.77288 588.12831 232.98151 587.20450 233.39877 586.42980 C
234.70980 585.28261 235.36545 584.50762 235.36545 584.07562 c
235.36545 583.42025 235.00772 583.09228 234.29254 583.09228 c
233.39877 583.09228 232.50472 583.73291 231.61068 585.02920 c
230.00173 586.56387 228.86929 587.90466 228.21364 589.08189 C
227.26006 586.87682 226.03833 584.32904 224.54844 581.42353 C
225.97880 575.24031 229.15247 570.17452 234.06917 566.22614 c
238.98586 562.27805 244.63276 560.29635 251.00957 560.29635 c
256.43282 560.29635 261.39430 561.77150 265.89402 564.72151 c
270.39345 567.67153 273.71622 571.64967 275.86176 576.65594 C
275.80195 576.77499 275.77219 576.89433 275.77219 577.01339 c
275.77219 577.49017 276.12992 578.26488 276.84510 579.33780 C
277.26208 580.64882 277.59005 581.98989 277.82844 583.36044 C
@c
265.40249 581.39376 m
265.40249 579.84435 264.85115 578.53304 263.74847 577.46041 c
262.64580 576.38750 261.32003 575.85118 259.77033 575.85118 c
257.62479 575.85118 256.01584 576.77499 254.94293 578.62261 C
259.77033 581.39376 L
254.94293 584.16520 L
256.01584 586.07206 257.62479 587.02564 259.77033 587.02564 c
261.32003 587.02564 262.64580 586.47430 263.74847 585.37191 c
264.85115 584.26951 265.40249 582.94318 265.40249 581.39376 c
@c
252.26107 581.39376 m
252.26107 579.84435 251.70973 578.53304 250.60734 577.46041 c
249.50466 576.38750 248.17861 575.85118 246.62920 575.85118 c
244.48365 575.85118 242.87471 576.77499 241.80180 578.62261 C
246.62920 581.39376 L
241.80180 584.16520 L
242.87471 586.07206 244.48365 587.02564 246.62920 587.02564 c
248.17861 587.02564 249.50466 586.47430 250.60734 585.37191 c
251.70973 584.26951 252.26107 582.94318 252.26107 581.39376 c
@c
260.66438 572.54372 m
260.66438 570.45770 259.91943 568.66989 258.42954 567.18000 c
256.93937 565.68983 255.15156 564.94488 253.06583 564.94488 c
250.97981 564.94488 249.19172 565.68983 247.70211 567.18000 c
246.21194 568.66989 245.46699 570.45770 245.46699 572.54372 C
260.66438 572.54372 L
@c
B

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel11Dict 11.0 0
%%EOF

%%EndDocument
 @endspecial 422 1798 a Fa(A)m(utor)h(A)e Fm(Biographie)j(Autor)d(A.)
-262 3845 y @beginspecial 210 @llx 555 @lly 291 @urx
624 @ury 720 @rwi 613 @rhi @clip @setspecial
%%BeginDocument: ./pics/ComicKopf.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 210 555 291 624 
%%LanguageLevel: 1
%%Creator: CorelDRAW 11
%%Title: ComicKopf.eps
%%CreationDate: Tue Jan 10 14:16:35 2006
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/UseLevel 1 def
%Build: CorelDRAW 11 Version 11.633
%Color profile:  Generic offset separations profile
/CorelIsEPS true def
%%BeginResource: procset wCorel11Dict 11.0 0
/wCorel11Dict 300 dict def wCorel11Dict begin
% Copyright (c)1992-2002 Corel Corporation
% All rights reserved.     v11.0 r0.0
/bd{bind def}bind def/ld{load def}bd/xd{exch def}bd/_ null def/rp{{pop}repeat}
bd/@cp/closepath ld/@gs/gsave ld/@gr/grestore ld/@np/newpath ld/Tl/translate ld
/$sv 0 def/@sv{/$sv save def}bd/@rs{$sv restore}bd/spg/showpage ld/showpage{}
bd currentscreen/@dsp xd/$dsp/@dsp def/$dsa xd/$dsf xd/$sdf false def/$SDF
false def/$Scra 0 def/SetScr/setscreen ld/@ss{2 index 0 eq{$dsf 3 1 roll 4 -1
roll pop}if exch $Scra add exch load SetScr}bd/SepMode_5 where{pop}{/SepMode_5
0 def}ifelse/CorelIsSeps where{pop}{/CorelIsSeps false def}ifelse
/CorelIsInRIPSeps where{pop}{/CorelIsInRIPSeps false def}ifelse/CorelIsEPS
where{pop}{/CorelIsEPS false def}ifelse/CurrentInkName_5 where{pop}
{/CurrentInkName_5(Composite)def}ifelse/$ink_5 where{pop}{/$ink_5 -1 def}
ifelse/$c 0 def/$m 0 def/$y 0 def/$k 0 def/$t 1 def/$n _ def/$o 0 def/$fil 0
def/$C 0 def/$M 0 def/$Y 0 def/$K 0 def/$T 1 def/$N _ def/$O 0 def/$PF false
def/s1c 0 def/s1m 0 def/s1y 0 def/s1k 0 def/s1t 0 def/s1n _ def/$bkg false def
/SK 0 def/SM 0 def/SY 0 def/SC 0 def/$op false def matrix currentmatrix/$ctm xd
/$ptm matrix def/$ttm matrix def/$stm matrix def/$ffpnt true def
/CorelDrawReencodeVect[16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring
16#A/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle
16#60/grave 16#7C/bar
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe 16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/L2?/languagelevel where{pop languagelevel 2 ge}{false}ifelse def/Comp?{
/LumSepsDict where{pop false}{/AldusSepsDict where{pop false}{1 0 0 0 @gs
setcmykcolor currentcmykcolor @gr add add add 0 ne 0 1 0 0 @gs setcmykcolor
currentcmykcolor @gr add add add 0 ne 0 0 1 0 @gs setcmykcolor currentcmykcolor
@gr add add add 0 ne 0 0 0 1 @gs setcmykcolor currentcmykcolor @gr add add add
0 ne and and and}ifelse}ifelse}bd/@PL{/LV where{pop LV 2 ge L2? not and{@np
/Courier findfont 12 scalefont setfont 72 144 m
(The PostScript level set in the Corel application is higher than)show 72 132 m
(the PostScript level of this device. Change the PS Level in the Corel)show 72
120 m(application to Level 1 by selecting the PostScript tab in the print)show
72 108 m(dialog, and selecting Level 1 from the Compatibility drop down list.)
show flush spg quit}if}if}bd/@BeginSysCorelDict{systemdict/Corel30Dict known
{systemdict/Corel30Dict get exec}if systemdict/CorelLexDict known{1 systemdict
/CorelLexDict get exec}if}bd/@EndSysCorelDict{systemdict/Corel30Dict known
{end}if/EndCorelLexDict where{pop EndCorelLexDict}if}bd AutoFlatness{/@ifl{dup
currentflat exch sub 10 gt{
([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)print flush
@np exit}{currentflat 2 add setflat}ifelse}bd/@fill/fill ld/fill{currentflat{
{@fill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@eofill/eofill ld/eofill
{currentflat{{@eofill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@clip
/clip ld/clip{currentflat{{@clip}stopped{@ifl}{exit}ifelse}bind loop setflat}
bd/@eoclip/eoclip ld/eoclip{currentflat{{@eoclip}stopped{@ifl}{exit}ifelse}
bind loop setflat}bd/@stroke/stroke ld/stroke{currentflat{{@stroke}stopped
{@ifl}{exit}ifelse}bind loop setflat}bd}if L2?{/@ssa{true setstrokeadjust}bd}{
/@ssa{}bd}ifelse/d/setdash ld/j/setlinejoin ld/J/setlinecap ld/M/setmiterlimit
ld/w/setlinewidth ld/O{/$o xd}bd/R{/$O xd}bd/W/eoclip ld/c/curveto ld/C/c ld/l
/lineto ld/L/l ld/rl/rlineto ld/m/moveto ld/n/newpath ld/N/newpath ld/P{11 rp}
bd/u{}bd/U{}bd/A{pop}bd/q/@gs ld/Q/@gr ld/&{}bd/@j{@sv @np}bd/@J{@rs}bd/g{1
exch sub/$k xd/$c 0 def/$m 0 def/$y 0 def/$t 1 def/$n _ def/$fil 0 def}bd/G{1
sub neg/$K xd _ 1 0 0 0/$C xd/$M xd/$Y xd/$T xd/$N xd}bd/k{1 index type
/stringtype eq{/$t xd/$n xd}{/$t 0 def/$n _ def}ifelse/$k xd/$y xd/$m xd/$c xd
/$fil 0 def}bd/K{1 index type/stringtype eq{/$T xd/$N xd}{/$T 0 def/$N _ def}
ifelse/$K xd/$Y xd/$M xd/$C xd}bd/x/k ld/X/K ld/sf{1 index type/stringtype eq{
/s1t xd/s1n xd}{/s1t 0 def/s1n _ def}ifelse/s1k xd/s1y xd/s1m xd/s1c xd}bd/i{
dup 0 ne{setflat}{pop}ifelse}bd/v{4 -2 roll 2 copy 6 -2 roll c}bd/V/v ld/y{2
copy c}bd/Y/y ld/@w{matrix rotate/$ptm xd matrix scale $ptm dup concatmatrix
/$ptm xd 1 eq{$ptm exch dup concatmatrix/$ptm xd}if 1 w}bd/@g{1 eq dup/$sdf xd
{/$scp xd/$sca xd/$scf xd}if}bd/@G{1 eq dup/$SDF xd{/$SCP xd/$SCA xd/$SCF xd}
if}bd/@D{2 index 0 eq{$dsf 3 1 roll 4 -1 roll pop}if 3 copy exch $Scra add exch
load SetScr/$dsp xd/$dsa xd/$dsf xd}bd/$ngx{$SDF{$SCF SepMode_5 0 eq{$SCA}
{$dsa}ifelse $SCP @ss}if}bd/@MN{2 copy le{pop}{exch pop}ifelse}bd/@MX{2 copy ge
{pop}{exch pop}ifelse}bd/InRange{3 -1 roll @MN @MX}bd/@sqr{dup 0 rl dup 0 exch
rl neg 0 rl @cp}bd/currentscale{1 0 dtransform matrix defaultmatrix idtransform
dup mul exch dup mul add sqrt 0 1 dtransform matrix defaultmatrix idtransform
dup mul exch dup mul add sqrt}bd/@unscale{}bd/wDstChck{2 1 roll dup 3 -1 roll
eq{1 add}if}bd/@dot{dup mul exch dup mul add 1 exch sub}bd/@lin{exch pop abs 1
exch sub}bd/cmyk2rgb{3{dup 5 -1 roll add 1 exch sub dup 0 lt{pop 0}if exch}
repeat pop}bd/rgb2cmyk{3{1 exch sub 3 1 roll}repeat 3 copy @MN @MN 3{dup 5 -1
roll sub neg exch}repeat}bd/rgb2g{2 index .299 mul 2 index .587 mul add 1 index
.114 mul add 4 1 roll pop pop pop}bd/WaldoColor_5 where{pop}{/SetRgb
/setrgbcolor ld/GetRgb/currentrgbcolor ld/SetGry/setgray ld/GetGry/currentgray
ld/SetRgb2 systemdict/setrgbcolor get def/GetRgb2 systemdict/currentrgbcolor
get def/SetHsb systemdict/sethsbcolor get def/GetHsb systemdict
/currenthsbcolor get def/rgb2hsb{SetRgb2 GetHsb}bd/hsb2rgb{3 -1 roll dup floor
sub 3 1 roll SetHsb GetRgb2}bd/setcmykcolor where{pop/LumSepsDict where{pop
/SetCmyk_5{LumSepsDict/setcmykcolor get exec}def}{/AldusSepsDict where{pop
/SetCmyk_5{AldusSepsDict/setcmykcolor get exec}def}{/SetCmyk_5/setcmykcolor ld
}ifelse}ifelse}{/SetCmyk_5{cmyk2rgb SetRgb}bd}ifelse/currentcmykcolor where{
pop/GetCmyk/currentcmykcolor ld}{/GetCmyk{GetRgb rgb2cmyk}bd}ifelse
/setoverprint where{pop}{/setoverprint{/$op xd}bd}ifelse/currentoverprint where
{pop}{/currentoverprint{$op}bd}ifelse/@tc_5{5 -1 roll dup 1 ge{pop}{4{dup 6 -1
roll mul exch}repeat pop}ifelse}bd/@trp{exch pop 5 1 roll @tc_5}bd
/setprocesscolor_5{SepMode_5 0 eq{SetCmyk_5}{0 4 $ink_5 sub index exch pop 5 1
roll pop pop pop pop SepsColor true eq{$ink_5 3 gt{1 sub neg SetGry}{0 0 0 4
$ink_5 roll SetCmyk_5}ifelse}{1 sub neg SetGry}ifelse}ifelse}bd
/findcmykcustomcolor where{pop}{/findcmykcustomcolor{5 array astore}bd}ifelse
/Corelsetcustomcolor_exists false def/setcustomcolor where{pop
/Corelsetcustomcolor_exists true def}if CorelIsSeps true eq CorelIsInRIPSeps
false eq and{/Corelsetcustomcolor_exists false def}if
Corelsetcustomcolor_exists false eq{/setcustomcolor{exch aload pop SepMode_5 0
eq{pop @tc_5 setprocesscolor_5}{CurrentInkName_5 eq{4 index}{0}ifelse 6 1 roll
5 rp 1 sub neg SetGry}ifelse}bd}if/@scc_5{dup type/booleantype eq{dup
currentoverprint ne{setoverprint}{pop}ifelse}{1 eq setoverprint}ifelse dup _ eq
{pop setprocesscolor_5 pop}{findcmykcustomcolor exch setcustomcolor}ifelse
SepMode_5 0 eq{true}{GetGry 1 eq currentoverprint and not}ifelse}bd/colorimage
where{pop/ColorImage{colorimage}def}{/ColorImage{/ncolors xd/$multi xd $multi
true eq{ncolors 3 eq{/daqB xd/daqG xd/daqR xd pop pop exch pop abs{daqR pop
daqG pop daqB pop}repeat}{/daqK xd/daqY xd/daqM xd/daqC xd pop pop exch pop abs
{daqC pop daqM pop daqY pop daqK pop}repeat}ifelse}{/dataaq xd{dataaq ncolors
dup 3 eq{/$dat xd 0 1 $dat length 3 div 1 sub{dup 3 mul $dat 1 index get 255
div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div rgb2g 255 mul
cvi exch pop $dat 3 1 roll put}for $dat 0 $dat length 3 idiv getinterval pop}{
4 eq{/$dat xd 0 1 $dat length 4 div 1 sub{dup 4 mul $dat 1 index get 255 div
$dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div $dat 4 index 3
add get 255 div cmyk2rgb rgb2g 255 mul cvi exch pop $dat 3 1 roll put}for $dat
0 $dat length ncolors idiv getinterval}if}ifelse}image}ifelse}bd}ifelse
/setcmykcolor{1 5 1 roll _ currentoverprint @scc_5/$ffpnt xd}bd
/currentcmykcolor{GetCmyk}bd/setrgbcolor{rgb2cmyk setcmykcolor}bd
/currentrgbcolor{currentcmykcolor cmyk2rgb}bd/sethsbcolor{hsb2rgb setrgbcolor}
bd/currenthsbcolor{currentrgbcolor rgb2hsb}bd/setgray{dup dup setrgbcolor}bd
/currentgray{currentrgbcolor rgb2g}bd/InsideDCS false def/IMAGE/image ld/image
{InsideDCS{IMAGE}{/EPSDict where{pop SepMode_5 0 eq{IMAGE}{dup type/dicttype eq
{dup/ImageType get 1 ne{IMAGE}{dup dup/BitsPerComponent get 8 eq exch
/BitsPerComponent get 1 eq or currentcolorspace 0 get/DeviceGray eq and{
CurrentInkName_5(Black)eq{IMAGE}{dup/DataSource get/TCC xd/Height get abs{TCC
pop}repeat}ifelse}{IMAGE}ifelse}ifelse}{2 index 1 ne{CurrentInkName_5(Black)eq
{IMAGE}{/TCC xd pop pop exch pop abs{TCC pop}repeat}ifelse}{IMAGE}ifelse}
ifelse}ifelse}{IMAGE}ifelse}ifelse}bd}ifelse/WaldoColor_5 true def/$fm 0 def
/wfill{1 $fm eq{fill}{eofill}ifelse}bd/@Pf{@sv SepMode_5 0 eq $Psc 0 ne or
$ink_5 3 eq or{0 J 0 j[]0 d $t $c $m $y $k $n $o @scc_5 pop $ctm setmatrix 72
1000 div dup matrix scale dup concat dup Bburx exch Bbury exch itransform
ceiling cvi/Bbury xd ceiling cvi/Bburx xd Bbllx exch Bblly exch itransform
floor cvi/Bblly xd floor cvi/Bbllx xd $Prm aload pop $Psn load exec}{1 SetGry
wfill}ifelse @rs @np}bd/F{matrix currentmatrix $sdf{$scf $sca $scp @ss}if $fil
1 eq{CorelPtrnDoFill}{$fil 2 eq{@ff}{$fil 3 eq{@Pf}{$fil 4 eq
{CorelShfillDoFill}{$t $c $m $y $k $n $o @scc_5{wfill}{@np}ifelse}ifelse}
ifelse}ifelse}ifelse $sdf{$dsf $dsa $dsp @ss}if setmatrix}bd/f{@cp F}bd/S{
matrix currentmatrix $ctm setmatrix $SDF{$SCF $SCA $SCP @ss}if $T $C $M $Y $K
$N $O @scc_5{matrix currentmatrix $ptm concat stroke setmatrix}{@np}ifelse $SDF
{$dsf $dsa $dsp @ss}if setmatrix}bd/s{@cp S}bd/B{@gs F @gr S}bd/b{@cp B}bd/_E{
5 array astore exch cvlit xd}bd/@cc{currentfile $dat readhexstring pop}bd/@sm{
/$ctm $ctm currentmatrix def}bd/@E{/Bbury xd/Bburx xd/Bblly xd/Bbllx xd}bd/@c{
@cp}bd/@P{/$fil 3 def/$Psn xd/$Psc xd array astore/$Prm xd}bd/tcc{@cc}def/@B{
@gs S @gr F}bd/@b{@cp @B}bd/@sep{CurrentInkName_5(Composite)eq{/$ink_5 -1 def}
{CurrentInkName_5(Cyan)eq{/$ink_5 0 def}{CurrentInkName_5(Magenta)eq{/$ink_5 1
def}{CurrentInkName_5(Yellow)eq{/$ink_5 2 def}{CurrentInkName_5(Black)eq
{/$ink_5 3 def}{/$ink_5 4 def}ifelse}ifelse}ifelse}ifelse}ifelse}bd/@whi{@gs
-72000 dup m -72000 72000 l 72000 dup l 72000 -72000 l @cp 1 SetGry fill @gr}
bd/@neg{[{1 exch sub}/exec cvx currenttransfer/exec cvx]cvx settransfer @whi}
bd/deflevel 0 def/@sax{/deflevel deflevel 1 add def}bd/@eax{/deflevel deflevel
dup 0 gt{1 sub}if def deflevel 0 gt{/eax load}{eax}ifelse}bd/eax{{exec}forall}
bd/@rax{deflevel 0 eq{@rs @sv}if}bd systemdict/pdfmark known not{/pdfmark
/cleartomark ld}if/wclip{1 $fm eq{clip}{eoclip}ifelse}bd
% Copyright (c)1992-2002 Corel Corporation
% All rights reserved.     v11.0 r0.0
/@ii{concat 3 index 3 index m 3 index 1 index l 2 copy l 1 index 3 index l 3
index 3 index l clip pop pop pop pop}bd/@i{@sm @gs @ii 6 index 1 ne{/$frg true
def pop pop}{1 eq{s1t s1c s1m s1y s1k s1n $O @scc_5/$frg xd}{/$frg false def}
ifelse 1 eq{@gs $ctm setmatrix F @gr}if}ifelse @np/$ury xd/$urx xd/$lly xd
/$llx xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul 8 div ceiling cvi string
def $bkg $frg or{$SDF{$SCF $SCA $SCP @ss}if $llx $lly Tl $urx $llx sub $ury
$lly sub scale $bkg{$t $c $m $y $k $n $o @scc_5 pop}if $wid $hei abs $bts 1 eq
{$bkg}{$bts}ifelse[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/tcc load $bts
1 eq{imagemask}{image}ifelse $SDF{$dsf $dsa $dsp @ss}if}{$hei abs{tcc pop}
repeat}ifelse @gr $ctm setmatrix}bd/@I{@sm @gs @ii @np/$ury xd/$urx xd/$lly xd
/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd $ngx $llx $lly Tl $urx $llx sub $ury
$lly sub scale $wid $hei abs $bts[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse
]$msimage false eq $ncl 1 eq or{/$dat $wid $bts mul $ncl mul 8 div ceiling cvi
string def/@cc load false $ncl ColorImage}{$wid $bts mul 8 div ceiling cvi $ncl
3 eq{dup dup/$dat1 exch string def/$dat2 exch string def/$dat3 exch string def
/@cc1 load/@cc2 load/@cc3 load}{dup dup dup/$dat1 exch string def/$dat2 exch
string def/$dat3 exch string def/$dat4 exch string def/@cc1 load/@cc2 load
/@cc3 load/@cc4 load}ifelse true $ncl ColorImage}ifelse $SDF{$dsf $dsa $dsp
@ss}if @gr $ctm setmatrix}bd/@cc1{currentfile $dat1 readhexstring pop}bd/@cc2{
currentfile $dat2 readhexstring pop}bd/@cc3{currentfile $dat3 readhexstring pop
}bd/@cc4{currentfile $dat4 readhexstring pop}bd/$msimage false def/COMP 0 def
/MaskedImage false def L2?{/@I_2{@sm @gs @ii @np/$ury xd/$urx xd/$lly xd/$llx
xd/$ncl xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul $ncl mul 8 div ceiling
cvi string def $ngx $ncl 1 eq{/DeviceGray}{$ncl 3 eq{/DeviceRGB}{/DeviceCMYK}
ifelse}ifelse setcolorspace $llx $lly Tl $urx $llx sub $ury $lly sub scale 8
dict begin/ImageType 1 def/Width $wid def/Height $hei abs def/BitsPerComponent
$bts def/Decode $ncl 1 eq{[0 1]}{$ncl 3 eq{[0 1 0 1 0 1]}{[0 1 0 1 0 1 0 1]}
ifelse}ifelse def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def
/DataSource currentfile/ASCII85Decode filter COMP 1 eq{/DCTDecode filter}{COMP
2 eq{/RunLengthDecode filter}if}ifelse def currentdict end image $SDF{$dsf $dsa
$dsp @ss}if @gr $ctm setmatrix}bd}{/@I_2{}bd}ifelse/@I_3{@sm @gs @ii @np/$ury
xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul
$ncl mul 8 div ceiling cvi string def $ngx $ncl 1 eq{/DeviceGray}{$ncl 3 eq
{/DeviceRGB}{/DeviceCMYK}ifelse}ifelse setcolorspace $llx $lly Tl $urx $llx sub
$ury $lly sub scale/ImageDataDict 8 dict def ImageDataDict begin/ImageType 1
def/Width $wid def/Height $hei abs def/BitsPerComponent $bts def/Decode $ncl 1
eq{[0 1]}{$ncl 3 eq{[0 1 0 1 0 1]}{[0 1 0 1 0 1 0 1]}ifelse}ifelse def
/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource
currentfile/ASCII85Decode filter COMP 1 eq{/DCTDecode filter}{COMP 2 eq{
/RunLengthDecode filter}if}ifelse def end/MaskedImageDict 7 dict def
MaskedImageDict begin/ImageType 3 def/InterleaveType 3 def/MaskDict
ImageMaskDict def/DataDict ImageDataDict def end MaskedImageDict image $SDF
{$dsf $dsa $dsp @ss}if @gr $ctm setmatrix}bd/@SetMask{/$mbts xd/$mhei xd/$mwid
xd/ImageMaskDict 8 dict def ImageMaskDict begin/ImageType 1 def/Width $mwid def
/Height $mhei abs def/BitsPerComponent $mbts def/DataSource maskstream def
/ImageMatrix[$mwid 0 0 $mhei neg 0 $mhei 0 gt{$mhei}{0}ifelse]def/Decode[1 0]
def end}bd/@daq{dup type/arraytype eq{{}forall}if}bd/@BMP{/@cc xd UseLevel 3 eq
MaskedImage true eq and{7 -2 roll pop pop @I_3}{12 index 1 gt UseLevel 2 eq
UseLevel 3 eq or and{7 -2 roll pop pop @I_2}{11 index 1 eq{12 -1 roll pop @i}{
7 -2 roll pop pop @I}ifelse}ifelse}ifelse}bd
% Copyright (c)1992-2002 Corel Corporation
% All rights reserved.     v11.0 r0.0
/@p{/$fil 1 def 1 eq dup/$vectpat xd{/$pfrg true def}{@gs $t $c $m $y $k $n $o
@scc_5/$pfrg xd @gr}ifelse/$pm xd/$psy xd/$psx xd/$pyf xd/$pxf xd/$pn xd}bd
/CorelPtrnDoFill{@gs $ctm setmatrix $pm concat CorelPtrnSetBBox wclip @sv Bburx
Bbury $pm itransform/$tury xd/$turx xd Bbllx Bblly $pm itransform/$tlly xd
/$tllx xd newpath $tllx $tlly m $tllx $tury l $turx $tury l $turx $tlly l $tllx
$tlly m @cp pathbbox @rs/$tury xd/$turx xd/$tlly xd/$tllx xd/$wid $turx $tllx
sub def/$hei $tury $tlly sub def @gs $vectpat{1 0 0 0 0 _ $o @scc_5{wfill}if}{
$t $c $m $y $k $n $o @scc_5{SepMode_5 0 eq $pfrg or{$tllx $tlly Tl $wid $hei
scale <00> 8 1 false[8 0 0 1 0 0]{}imagemask}{/$bkg true def}ifelse}if}ifelse
@gr $wid 0 gt $hei 0 gt and{$pn cvlit load aload pop/$pd xd 3 -1 roll sub
/$phei xd exch sub/$pwid xd $wid $pwid div ceiling 1 add/$tlx xd $hei $phei div
ceiling 1 add/$tly xd currentdict/CorelPtrnL2Pattern known $psy 0 eq and $psx 0
eq and{CorelPtrnL2Pattern}{$psx 0 eq{CorelPtrnTileVeritcal}{CorelPtrnTileHoriz
}ifelse}ifelse}if @gr @np/$bkg false def}bd/CorelPtrnSetBBox{pathbbox/$ury xd
/$urx xd/$lly xd/$llx xd}bd/CorelPtrnSetFirstTile{$tllx $pxf add dup $tllx gt
{$pwid sub}if/$tx xd $tury $pyf sub dup $tury lt{$phei add}if/$ty xd}bd/p{/$pm
xd 7 rp/$pyf xd/$pxf xd/$pn xd/$fil 1 def}bd/CorelPtrnDraw{@ep}bd
/CorelPtrnPutTile{@sv/$in true def 2 copy dup $lly le{/$in false def}if $phei
sub $ury ge{/$in false def}if dup $urx ge{/$in false def}if $pwid add $llx le{
/$in false def}if $in{@np 2 copy m $pwid 0 rl 0 $phei neg rl $pwid neg 0 rl 0
$phei rl clip @np $pn cvlit load aload pop 7 -1 roll 5 index sub 7 -1 roll 3
index sub Tl matrix currentmatrix/$ctm xd CorelPtrnDraw pop pop pop pop}{pop
pop}ifelse @rs}bd/CorelPtrnTileHoriz{CorelPtrnSetFirstTile 0 1 $tly 1 sub{dup
$psx mul $tx add{dup $llx gt{$pwid sub}{exit}ifelse}loop exch $phei mul $ty
exch sub 0 1 $tlx 1 sub{$pwid mul 3 copy 3 -1 roll add exch CorelPtrnPutTile
pop}for pop pop}for}bd/CorelPtrnTileVeritcal{CorelPtrnSetFirstTile 0 1 $tlx 1
sub{dup $pwid mul $tx add exch $psy mul $ty exch sub{dup $ury lt{$phei add}
{exit}ifelse}loop 0 1 $tly 1 sub{$phei mul 3 copy sub CorelPtrnPutTile pop}for
pop pop}for}bd L2? UseLevel 2 ge and{/CorelPtrnL2Pattern{@sv[$pn cvlit load
aload pop pop]$pwid $phei $pn cvlit load aload pop pop pop pop pathbbox pop pop
2 index sub exch 3 index sub 4 -2 roll pop pop exch matrix identmatrix
translate/PatternMatrix xd/PatternYStep xd/PatternXStep xd/PatternBBox xd
currentdict/PatternMainDict xd <</PaintType 1/PatternType 1/TilingType 1/BBox
PatternBBox/XStep PatternXStep/YStep PatternYStep/PaintProc{begin
PatternMainDict begin $ctm currentmatrix pop 0 CorelPtrnDraw end end}bind >>
PatternMatrix makepattern setpattern fill @rs}def}if
end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel11Dict begin
@BeginSysCorelDict
2.6131 setmiterlimit
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
210.42397 555.82668 290.61184 623.58860 @E
 0 O 0 @g
0.00 0.00 0.00 0.90 k
0 J 0 j [] 0 d 0 R 0 @G
0.00 0.00 0.00 1.00 K
0 0.21600 0.21600 0.00000 @w
/$fm 0 def
290.61184 582.46668 m
290.61184 581.98989 290.40321 581.75150 289.98624 581.75150 c
289.62850 581.75150 288.49606 582.34734 286.58920 583.53931 c
286.11213 583.77770 285.45676 584.07562 284.62252 584.43335 C
284.62252 584.01609 284.68205 583.39020 284.80110 582.55597 c
284.92044 581.72173 284.97997 581.09584 284.97997 580.67858 c
284.97997 577.16249 284.47342 575.40416 283.46031 575.40416 c
282.74513 575.40416 282.38769 575.79165 282.38769 576.56636 c
282.32787 577.63928 282.08948 578.68214 281.67250 579.69524 C
279.82488 572.66277 276.07011 566.92658 270.40847 562.48668 c
264.74655 558.04649 258.28044 555.82668 251.00957 555.82668 c
243.20239 555.82668 236.33376 558.35943 230.40397 563.42523 c
224.47389 568.49102 220.94277 574.89761 219.81061 582.64526 C
219.54246 582.73483 l
219.00586 583.03276 218.73770 583.42025 218.73770 583.89676 c
218.73770 584.37354 219.00586 584.70151 219.54246 584.88009 C
219.54246 584.96967 L
219.00586 584.96967 l
218.11209 584.96967 217.18800 585.11877 216.23471 585.41669 C
216.11537 585.11877 215.69839 584.96967 214.98321 584.96967 c
214.02964 584.96967 213.07606 585.17830 212.12249 585.59528 c
210.99005 586.13187 210.42397 586.81729 210.42397 587.65153 c
210.42397 589.02208 210.87099 589.70750 211.76504 589.70750 c
212.18202 589.70750 212.80762 589.64797 213.64214 589.52891 c
214.47638 589.40957 215.10227 589.35005 215.51953 589.35005 c
216.05584 589.35005 L
216.05584 589.52891 l
216.05584 590.18428 217.27757 592.09143 219.72104 595.25008 C
218.76746 595.07121 217.69483 594.98192 216.50287 594.98192 c
215.78769 594.98192 214.74482 595.16079 213.37398 595.51824 c
212.65880 595.69710 212.30135 596.05483 212.30135 596.59115 c
212.30135 597.12746 212.65880 597.48491 213.37398 597.66378 c
216.47310 598.49802 219.15496 600.73313 221.41956 604.36857 c
222.67106 606.51411 224.57820 609.70252 227.14101 613.93380 c
229.34608 617.33083 232.26633 619.35732 235.90176 620.01269 C
235.12706 620.25109 234.29254 620.37043 233.39877 620.37043 c
233.21991 620.37043 L
232.32586 619.89364 231.78954 619.65524 231.61068 619.65524 c
231.01483 619.65524 230.71691 619.98293 230.71691 620.63858 c
230.71691 621.94961 231.61068 622.60526 233.39877 622.60526 c
234.02438 622.60526 L
234.68003 623.26063 235.93153 623.58860 237.77915 623.58860 c
239.20951 623.58860 241.36980 623.15660 244.26028 622.29231 c
247.15077 621.42803 249.07266 620.99603 250.02624 620.99603 C
250.68189 621.35376 251.30750 621.62192 251.90362 621.80079 C
253.63191 622.99247 255.62835 623.58860 257.89323 623.58860 c
261.34951 623.58860 263.76321 622.75436 265.13405 621.08561 C
268.76948 620.01269 271.74954 617.59899 274.07367 613.84450 c
275.32517 611.57991 277.29213 608.27216 279.97398 603.92154 c
282.29811 600.34564 285.39723 598.22986 289.27106 597.57449 c
290.04576 597.45543 290.43326 597.09770 290.43326 596.50157 c
290.43326 595.96526 290.10529 595.60781 289.44992 595.42894 c
288.01956 595.01169 286.58920 594.80306 285.15883 594.80306 c
284.44365 594.80306 283.72847 594.89263 283.01329 595.07121 C
283.37102 593.70066 284.62252 591.79351 286.76806 589.35005 c
288.91332 586.90658 290.16510 584.85061 290.52255 583.18157 c
290.58208 582.94318 290.61184 582.70507 290.61184 582.46668 c
@c
277.82844 583.36044 m
277.17279 584.73128 276.09987 585.86372 274.60998 586.75748 C
274.07367 585.32712 272.94123 584.61194 271.21294 584.61194 c
270.67663 584.61194 269.84211 585.11877 268.70995 586.13187 c
267.57751 587.14498 266.98167 587.91969 266.92214 588.45600 c
266.86233 589.29024 267.24983 589.70750 268.08435 589.70750 c
268.26293 589.70750 268.48658 589.67773 268.75474 589.61820 c
269.02290 589.55868 269.24627 589.52891 269.42513 589.52891 c
270.08079 589.52891 270.40847 589.76731 270.40847 590.24409 c
270.40847 591.13786 269.12693 592.00214 266.56441 592.83638 c
265.37244 593.19411 264.38910 593.37269 263.61439 593.37269 c
262.42243 593.37269 260.67912 592.95572 258.38476 592.12120 c
256.09011 591.28696 254.31732 590.86970 253.06583 590.86970 c
252.70809 590.86970 L
253.87030 589.43934 l
254.40661 588.78397 254.67477 588.30690 254.67477 588.00898 c
254.67477 587.11521 254.16822 586.81729 253.15512 587.11521 c
250.47326 587.88992 248.44677 589.35005 247.07622 591.49559 C
243.14287 589.88636 240.28214 589.08189 238.49433 589.08189 c
237.71934 589.08189 236.94463 589.23099 236.16992 589.52891 c
235.15654 589.94617 234.65027 590.48249 234.65027 591.13786 c
234.65027 591.67417 235.06724 591.94261 235.90176 591.94261 c
238.64315 591.94261 240.01398 592.64277 240.01398 594.04337 c
240.01398 595.32463 239.17946 595.96526 237.51099 595.96526 c
236.02082 595.96526 234.85861 595.23506 234.02438 593.76019 c
233.18986 592.28504 232.77288 590.78041 232.77288 589.21597 c
232.77288 588.12831 232.98151 587.20450 233.39877 586.42980 C
234.70980 585.28261 235.36545 584.50762 235.36545 584.07562 c
235.36545 583.42025 235.00772 583.09228 234.29254 583.09228 c
233.39877 583.09228 232.50472 583.73291 231.61068 585.02920 c
230.00173 586.56387 228.86929 587.90466 228.21364 589.08189 C
227.26006 586.87682 226.03833 584.32904 224.54844 581.42353 C
225.97880 575.24031 229.15247 570.17452 234.06917 566.22614 c
238.98586 562.27805 244.63276 560.29635 251.00957 560.29635 c
256.43282 560.29635 261.39430 561.77150 265.89402 564.72151 c
270.39345 567.67153 273.71622 571.64967 275.86176 576.65594 C
275.80195 576.77499 275.77219 576.89433 275.77219 577.01339 c
275.77219 577.49017 276.12992 578.26488 276.84510 579.33780 C
277.26208 580.64882 277.59005 581.98989 277.82844 583.36044 C
@c
265.40249 581.39376 m
265.40249 579.84435 264.85115 578.53304 263.74847 577.46041 c
262.64580 576.38750 261.32003 575.85118 259.77033 575.85118 c
257.62479 575.85118 256.01584 576.77499 254.94293 578.62261 C
259.77033 581.39376 L
254.94293 584.16520 L
256.01584 586.07206 257.62479 587.02564 259.77033 587.02564 c
261.32003 587.02564 262.64580 586.47430 263.74847 585.37191 c
264.85115 584.26951 265.40249 582.94318 265.40249 581.39376 c
@c
252.26107 581.39376 m
252.26107 579.84435 251.70973 578.53304 250.60734 577.46041 c
249.50466 576.38750 248.17861 575.85118 246.62920 575.85118 c
244.48365 575.85118 242.87471 576.77499 241.80180 578.62261 C
246.62920 581.39376 L
241.80180 584.16520 L
242.87471 586.07206 244.48365 587.02564 246.62920 587.02564 c
248.17861 587.02564 249.50466 586.47430 250.60734 585.37191 c
251.70973 584.26951 252.26107 582.94318 252.26107 581.39376 c
@c
260.66438 572.54372 m
260.66438 570.45770 259.91943 568.66989 258.42954 567.18000 c
256.93937 565.68983 255.15156 564.94488 253.06583 564.94488 c
250.97981 564.94488 249.19172 565.68983 247.70211 567.18000 c
246.21194 568.66989 245.46699 570.45770 245.46699 572.54372 C
260.66438 572.54372 L
@c
B

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel11Dict 11.0 0
%%EOF

%%EndDocument
 @endspecial 422 3258 a Fa(A)m(utor)i(B)f Fm(Biographie)h(Autor)e(B.)
-262 5305 y @beginspecial 210 @llx 555 @lly 291 @urx
624 @ury 720 @rwi 613 @rhi @clip @setspecial
%%BeginDocument: ./pics/ComicKopf.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 210 555 291 624 
%%LanguageLevel: 1
%%Creator: CorelDRAW 11
%%Title: ComicKopf.eps
%%CreationDate: Tue Jan 10 14:16:35 2006
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/UseLevel 1 def
%Build: CorelDRAW 11 Version 11.633
%Color profile:  Generic offset separations profile
/CorelIsEPS true def
%%BeginResource: procset wCorel11Dict 11.0 0
/wCorel11Dict 300 dict def wCorel11Dict begin
% Copyright (c)1992-2002 Corel Corporation
% All rights reserved.     v11.0 r0.0
/bd{bind def}bind def/ld{load def}bd/xd{exch def}bd/_ null def/rp{{pop}repeat}
bd/@cp/closepath ld/@gs/gsave ld/@gr/grestore ld/@np/newpath ld/Tl/translate ld
/$sv 0 def/@sv{/$sv save def}bd/@rs{$sv restore}bd/spg/showpage ld/showpage{}
bd currentscreen/@dsp xd/$dsp/@dsp def/$dsa xd/$dsf xd/$sdf false def/$SDF
false def/$Scra 0 def/SetScr/setscreen ld/@ss{2 index 0 eq{$dsf 3 1 roll 4 -1
roll pop}if exch $Scra add exch load SetScr}bd/SepMode_5 where{pop}{/SepMode_5
0 def}ifelse/CorelIsSeps where{pop}{/CorelIsSeps false def}ifelse
/CorelIsInRIPSeps where{pop}{/CorelIsInRIPSeps false def}ifelse/CorelIsEPS
where{pop}{/CorelIsEPS false def}ifelse/CurrentInkName_5 where{pop}
{/CurrentInkName_5(Composite)def}ifelse/$ink_5 where{pop}{/$ink_5 -1 def}
ifelse/$c 0 def/$m 0 def/$y 0 def/$k 0 def/$t 1 def/$n _ def/$o 0 def/$fil 0
def/$C 0 def/$M 0 def/$Y 0 def/$K 0 def/$T 1 def/$N _ def/$O 0 def/$PF false
def/s1c 0 def/s1m 0 def/s1y 0 def/s1k 0 def/s1t 0 def/s1n _ def/$bkg false def
/SK 0 def/SM 0 def/SY 0 def/SC 0 def/$op false def matrix currentmatrix/$ctm xd
/$ptm matrix def/$ttm matrix def/$stm matrix def/$ffpnt true def
/CorelDrawReencodeVect[16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring
16#A/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle
16#60/grave 16#7C/bar
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe 16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/L2?/languagelevel where{pop languagelevel 2 ge}{false}ifelse def/Comp?{
/LumSepsDict where{pop false}{/AldusSepsDict where{pop false}{1 0 0 0 @gs
setcmykcolor currentcmykcolor @gr add add add 0 ne 0 1 0 0 @gs setcmykcolor
currentcmykcolor @gr add add add 0 ne 0 0 1 0 @gs setcmykcolor currentcmykcolor
@gr add add add 0 ne 0 0 0 1 @gs setcmykcolor currentcmykcolor @gr add add add
0 ne and and and}ifelse}ifelse}bd/@PL{/LV where{pop LV 2 ge L2? not and{@np
/Courier findfont 12 scalefont setfont 72 144 m
(The PostScript level set in the Corel application is higher than)show 72 132 m
(the PostScript level of this device. Change the PS Level in the Corel)show 72
120 m(application to Level 1 by selecting the PostScript tab in the print)show
72 108 m(dialog, and selecting Level 1 from the Compatibility drop down list.)
show flush spg quit}if}if}bd/@BeginSysCorelDict{systemdict/Corel30Dict known
{systemdict/Corel30Dict get exec}if systemdict/CorelLexDict known{1 systemdict
/CorelLexDict get exec}if}bd/@EndSysCorelDict{systemdict/Corel30Dict known
{end}if/EndCorelLexDict where{pop EndCorelLexDict}if}bd AutoFlatness{/@ifl{dup
currentflat exch sub 10 gt{
([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)print flush
@np exit}{currentflat 2 add setflat}ifelse}bd/@fill/fill ld/fill{currentflat{
{@fill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@eofill/eofill ld/eofill
{currentflat{{@eofill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@clip
/clip ld/clip{currentflat{{@clip}stopped{@ifl}{exit}ifelse}bind loop setflat}
bd/@eoclip/eoclip ld/eoclip{currentflat{{@eoclip}stopped{@ifl}{exit}ifelse}
bind loop setflat}bd/@stroke/stroke ld/stroke{currentflat{{@stroke}stopped
{@ifl}{exit}ifelse}bind loop setflat}bd}if L2?{/@ssa{true setstrokeadjust}bd}{
/@ssa{}bd}ifelse/d/setdash ld/j/setlinejoin ld/J/setlinecap ld/M/setmiterlimit
ld/w/setlinewidth ld/O{/$o xd}bd/R{/$O xd}bd/W/eoclip ld/c/curveto ld/C/c ld/l
/lineto ld/L/l ld/rl/rlineto ld/m/moveto ld/n/newpath ld/N/newpath ld/P{11 rp}
bd/u{}bd/U{}bd/A{pop}bd/q/@gs ld/Q/@gr ld/&{}bd/@j{@sv @np}bd/@J{@rs}bd/g{1
exch sub/$k xd/$c 0 def/$m 0 def/$y 0 def/$t 1 def/$n _ def/$fil 0 def}bd/G{1
sub neg/$K xd _ 1 0 0 0/$C xd/$M xd/$Y xd/$T xd/$N xd}bd/k{1 index type
/stringtype eq{/$t xd/$n xd}{/$t 0 def/$n _ def}ifelse/$k xd/$y xd/$m xd/$c xd
/$fil 0 def}bd/K{1 index type/stringtype eq{/$T xd/$N xd}{/$T 0 def/$N _ def}
ifelse/$K xd/$Y xd/$M xd/$C xd}bd/x/k ld/X/K ld/sf{1 index type/stringtype eq{
/s1t xd/s1n xd}{/s1t 0 def/s1n _ def}ifelse/s1k xd/s1y xd/s1m xd/s1c xd}bd/i{
dup 0 ne{setflat}{pop}ifelse}bd/v{4 -2 roll 2 copy 6 -2 roll c}bd/V/v ld/y{2
copy c}bd/Y/y ld/@w{matrix rotate/$ptm xd matrix scale $ptm dup concatmatrix
/$ptm xd 1 eq{$ptm exch dup concatmatrix/$ptm xd}if 1 w}bd/@g{1 eq dup/$sdf xd
{/$scp xd/$sca xd/$scf xd}if}bd/@G{1 eq dup/$SDF xd{/$SCP xd/$SCA xd/$SCF xd}
if}bd/@D{2 index 0 eq{$dsf 3 1 roll 4 -1 roll pop}if 3 copy exch $Scra add exch
load SetScr/$dsp xd/$dsa xd/$dsf xd}bd/$ngx{$SDF{$SCF SepMode_5 0 eq{$SCA}
{$dsa}ifelse $SCP @ss}if}bd/@MN{2 copy le{pop}{exch pop}ifelse}bd/@MX{2 copy ge
{pop}{exch pop}ifelse}bd/InRange{3 -1 roll @MN @MX}bd/@sqr{dup 0 rl dup 0 exch
rl neg 0 rl @cp}bd/currentscale{1 0 dtransform matrix defaultmatrix idtransform
dup mul exch dup mul add sqrt 0 1 dtransform matrix defaultmatrix idtransform
dup mul exch dup mul add sqrt}bd/@unscale{}bd/wDstChck{2 1 roll dup 3 -1 roll
eq{1 add}if}bd/@dot{dup mul exch dup mul add 1 exch sub}bd/@lin{exch pop abs 1
exch sub}bd/cmyk2rgb{3{dup 5 -1 roll add 1 exch sub dup 0 lt{pop 0}if exch}
repeat pop}bd/rgb2cmyk{3{1 exch sub 3 1 roll}repeat 3 copy @MN @MN 3{dup 5 -1
roll sub neg exch}repeat}bd/rgb2g{2 index .299 mul 2 index .587 mul add 1 index
.114 mul add 4 1 roll pop pop pop}bd/WaldoColor_5 where{pop}{/SetRgb
/setrgbcolor ld/GetRgb/currentrgbcolor ld/SetGry/setgray ld/GetGry/currentgray
ld/SetRgb2 systemdict/setrgbcolor get def/GetRgb2 systemdict/currentrgbcolor
get def/SetHsb systemdict/sethsbcolor get def/GetHsb systemdict
/currenthsbcolor get def/rgb2hsb{SetRgb2 GetHsb}bd/hsb2rgb{3 -1 roll dup floor
sub 3 1 roll SetHsb GetRgb2}bd/setcmykcolor where{pop/LumSepsDict where{pop
/SetCmyk_5{LumSepsDict/setcmykcolor get exec}def}{/AldusSepsDict where{pop
/SetCmyk_5{AldusSepsDict/setcmykcolor get exec}def}{/SetCmyk_5/setcmykcolor ld
}ifelse}ifelse}{/SetCmyk_5{cmyk2rgb SetRgb}bd}ifelse/currentcmykcolor where{
pop/GetCmyk/currentcmykcolor ld}{/GetCmyk{GetRgb rgb2cmyk}bd}ifelse
/setoverprint where{pop}{/setoverprint{/$op xd}bd}ifelse/currentoverprint where
{pop}{/currentoverprint{$op}bd}ifelse/@tc_5{5 -1 roll dup 1 ge{pop}{4{dup 6 -1
roll mul exch}repeat pop}ifelse}bd/@trp{exch pop 5 1 roll @tc_5}bd
/setprocesscolor_5{SepMode_5 0 eq{SetCmyk_5}{0 4 $ink_5 sub index exch pop 5 1
roll pop pop pop pop SepsColor true eq{$ink_5 3 gt{1 sub neg SetGry}{0 0 0 4
$ink_5 roll SetCmyk_5}ifelse}{1 sub neg SetGry}ifelse}ifelse}bd
/findcmykcustomcolor where{pop}{/findcmykcustomcolor{5 array astore}bd}ifelse
/Corelsetcustomcolor_exists false def/setcustomcolor where{pop
/Corelsetcustomcolor_exists true def}if CorelIsSeps true eq CorelIsInRIPSeps
false eq and{/Corelsetcustomcolor_exists false def}if
Corelsetcustomcolor_exists false eq{/setcustomcolor{exch aload pop SepMode_5 0
eq{pop @tc_5 setprocesscolor_5}{CurrentInkName_5 eq{4 index}{0}ifelse 6 1 roll
5 rp 1 sub neg SetGry}ifelse}bd}if/@scc_5{dup type/booleantype eq{dup
currentoverprint ne{setoverprint}{pop}ifelse}{1 eq setoverprint}ifelse dup _ eq
{pop setprocesscolor_5 pop}{findcmykcustomcolor exch setcustomcolor}ifelse
SepMode_5 0 eq{true}{GetGry 1 eq currentoverprint and not}ifelse}bd/colorimage
where{pop/ColorImage{colorimage}def}{/ColorImage{/ncolors xd/$multi xd $multi
true eq{ncolors 3 eq{/daqB xd/daqG xd/daqR xd pop pop exch pop abs{daqR pop
daqG pop daqB pop}repeat}{/daqK xd/daqY xd/daqM xd/daqC xd pop pop exch pop abs
{daqC pop daqM pop daqY pop daqK pop}repeat}ifelse}{/dataaq xd{dataaq ncolors
dup 3 eq{/$dat xd 0 1 $dat length 3 div 1 sub{dup 3 mul $dat 1 index get 255
div $dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div rgb2g 255 mul
cvi exch pop $dat 3 1 roll put}for $dat 0 $dat length 3 idiv getinterval pop}{
4 eq{/$dat xd 0 1 $dat length 4 div 1 sub{dup 4 mul $dat 1 index get 255 div
$dat 2 index 1 add get 255 div $dat 3 index 2 add get 255 div $dat 4 index 3
add get 255 div cmyk2rgb rgb2g 255 mul cvi exch pop $dat 3 1 roll put}for $dat
0 $dat length ncolors idiv getinterval}if}ifelse}image}ifelse}bd}ifelse
/setcmykcolor{1 5 1 roll _ currentoverprint @scc_5/$ffpnt xd}bd
/currentcmykcolor{GetCmyk}bd/setrgbcolor{rgb2cmyk setcmykcolor}bd
/currentrgbcolor{currentcmykcolor cmyk2rgb}bd/sethsbcolor{hsb2rgb setrgbcolor}
bd/currenthsbcolor{currentrgbcolor rgb2hsb}bd/setgray{dup dup setrgbcolor}bd
/currentgray{currentrgbcolor rgb2g}bd/InsideDCS false def/IMAGE/image ld/image
{InsideDCS{IMAGE}{/EPSDict where{pop SepMode_5 0 eq{IMAGE}{dup type/dicttype eq
{dup/ImageType get 1 ne{IMAGE}{dup dup/BitsPerComponent get 8 eq exch
/BitsPerComponent get 1 eq or currentcolorspace 0 get/DeviceGray eq and{
CurrentInkName_5(Black)eq{IMAGE}{dup/DataSource get/TCC xd/Height get abs{TCC
pop}repeat}ifelse}{IMAGE}ifelse}ifelse}{2 index 1 ne{CurrentInkName_5(Black)eq
{IMAGE}{/TCC xd pop pop exch pop abs{TCC pop}repeat}ifelse}{IMAGE}ifelse}
ifelse}ifelse}{IMAGE}ifelse}ifelse}bd}ifelse/WaldoColor_5 true def/$fm 0 def
/wfill{1 $fm eq{fill}{eofill}ifelse}bd/@Pf{@sv SepMode_5 0 eq $Psc 0 ne or
$ink_5 3 eq or{0 J 0 j[]0 d $t $c $m $y $k $n $o @scc_5 pop $ctm setmatrix 72
1000 div dup matrix scale dup concat dup Bburx exch Bbury exch itransform
ceiling cvi/Bbury xd ceiling cvi/Bburx xd Bbllx exch Bblly exch itransform
floor cvi/Bblly xd floor cvi/Bbllx xd $Prm aload pop $Psn load exec}{1 SetGry
wfill}ifelse @rs @np}bd/F{matrix currentmatrix $sdf{$scf $sca $scp @ss}if $fil
1 eq{CorelPtrnDoFill}{$fil 2 eq{@ff}{$fil 3 eq{@Pf}{$fil 4 eq
{CorelShfillDoFill}{$t $c $m $y $k $n $o @scc_5{wfill}{@np}ifelse}ifelse}
ifelse}ifelse}ifelse $sdf{$dsf $dsa $dsp @ss}if setmatrix}bd/f{@cp F}bd/S{
matrix currentmatrix $ctm setmatrix $SDF{$SCF $SCA $SCP @ss}if $T $C $M $Y $K
$N $O @scc_5{matrix currentmatrix $ptm concat stroke setmatrix}{@np}ifelse $SDF
{$dsf $dsa $dsp @ss}if setmatrix}bd/s{@cp S}bd/B{@gs F @gr S}bd/b{@cp B}bd/_E{
5 array astore exch cvlit xd}bd/@cc{currentfile $dat readhexstring pop}bd/@sm{
/$ctm $ctm currentmatrix def}bd/@E{/Bbury xd/Bburx xd/Bblly xd/Bbllx xd}bd/@c{
@cp}bd/@P{/$fil 3 def/$Psn xd/$Psc xd array astore/$Prm xd}bd/tcc{@cc}def/@B{
@gs S @gr F}bd/@b{@cp @B}bd/@sep{CurrentInkName_5(Composite)eq{/$ink_5 -1 def}
{CurrentInkName_5(Cyan)eq{/$ink_5 0 def}{CurrentInkName_5(Magenta)eq{/$ink_5 1
def}{CurrentInkName_5(Yellow)eq{/$ink_5 2 def}{CurrentInkName_5(Black)eq
{/$ink_5 3 def}{/$ink_5 4 def}ifelse}ifelse}ifelse}ifelse}ifelse}bd/@whi{@gs
-72000 dup m -72000 72000 l 72000 dup l 72000 -72000 l @cp 1 SetGry fill @gr}
bd/@neg{[{1 exch sub}/exec cvx currenttransfer/exec cvx]cvx settransfer @whi}
bd/deflevel 0 def/@sax{/deflevel deflevel 1 add def}bd/@eax{/deflevel deflevel
dup 0 gt{1 sub}if def deflevel 0 gt{/eax load}{eax}ifelse}bd/eax{{exec}forall}
bd/@rax{deflevel 0 eq{@rs @sv}if}bd systemdict/pdfmark known not{/pdfmark
/cleartomark ld}if/wclip{1 $fm eq{clip}{eoclip}ifelse}bd
% Copyright (c)1992-2002 Corel Corporation
% All rights reserved.     v11.0 r0.0
/@ii{concat 3 index 3 index m 3 index 1 index l 2 copy l 1 index 3 index l 3
index 3 index l clip pop pop pop pop}bd/@i{@sm @gs @ii 6 index 1 ne{/$frg true
def pop pop}{1 eq{s1t s1c s1m s1y s1k s1n $O @scc_5/$frg xd}{/$frg false def}
ifelse 1 eq{@gs $ctm setmatrix F @gr}if}ifelse @np/$ury xd/$urx xd/$lly xd
/$llx xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul 8 div ceiling cvi string
def $bkg $frg or{$SDF{$SCF $SCA $SCP @ss}if $llx $lly Tl $urx $llx sub $ury
$lly sub scale $bkg{$t $c $m $y $k $n $o @scc_5 pop}if $wid $hei abs $bts 1 eq
{$bkg}{$bts}ifelse[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/tcc load $bts
1 eq{imagemask}{image}ifelse $SDF{$dsf $dsa $dsp @ss}if}{$hei abs{tcc pop}
repeat}ifelse @gr $ctm setmatrix}bd/@I{@sm @gs @ii @np/$ury xd/$urx xd/$lly xd
/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd $ngx $llx $lly Tl $urx $llx sub $ury
$lly sub scale $wid $hei abs $bts[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse
]$msimage false eq $ncl 1 eq or{/$dat $wid $bts mul $ncl mul 8 div ceiling cvi
string def/@cc load false $ncl ColorImage}{$wid $bts mul 8 div ceiling cvi $ncl
3 eq{dup dup/$dat1 exch string def/$dat2 exch string def/$dat3 exch string def
/@cc1 load/@cc2 load/@cc3 load}{dup dup dup/$dat1 exch string def/$dat2 exch
string def/$dat3 exch string def/$dat4 exch string def/@cc1 load/@cc2 load
/@cc3 load/@cc4 load}ifelse true $ncl ColorImage}ifelse $SDF{$dsf $dsa $dsp
@ss}if @gr $ctm setmatrix}bd/@cc1{currentfile $dat1 readhexstring pop}bd/@cc2{
currentfile $dat2 readhexstring pop}bd/@cc3{currentfile $dat3 readhexstring pop
}bd/@cc4{currentfile $dat4 readhexstring pop}bd/$msimage false def/COMP 0 def
/MaskedImage false def L2?{/@I_2{@sm @gs @ii @np/$ury xd/$urx xd/$lly xd/$llx
xd/$ncl xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul $ncl mul 8 div ceiling
cvi string def $ngx $ncl 1 eq{/DeviceGray}{$ncl 3 eq{/DeviceRGB}{/DeviceCMYK}
ifelse}ifelse setcolorspace $llx $lly Tl $urx $llx sub $ury $lly sub scale 8
dict begin/ImageType 1 def/Width $wid def/Height $hei abs def/BitsPerComponent
$bts def/Decode $ncl 1 eq{[0 1]}{$ncl 3 eq{[0 1 0 1 0 1]}{[0 1 0 1 0 1 0 1]}
ifelse}ifelse def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def
/DataSource currentfile/ASCII85Decode filter COMP 1 eq{/DCTDecode filter}{COMP
2 eq{/RunLengthDecode filter}if}ifelse def currentdict end image $SDF{$dsf $dsa
$dsp @ss}if @gr $ctm setmatrix}bd}{/@I_2{}bd}ifelse/@I_3{@sm @gs @ii @np/$ury
xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul
$ncl mul 8 div ceiling cvi string def $ngx $ncl 1 eq{/DeviceGray}{$ncl 3 eq
{/DeviceRGB}{/DeviceCMYK}ifelse}ifelse setcolorspace $llx $lly Tl $urx $llx sub
$ury $lly sub scale/ImageDataDict 8 dict def ImageDataDict begin/ImageType 1
def/Width $wid def/Height $hei abs def/BitsPerComponent $bts def/Decode $ncl 1
eq{[0 1]}{$ncl 3 eq{[0 1 0 1 0 1]}{[0 1 0 1 0 1 0 1]}ifelse}ifelse def
/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]def/DataSource
currentfile/ASCII85Decode filter COMP 1 eq{/DCTDecode filter}{COMP 2 eq{
/RunLengthDecode filter}if}ifelse def end/MaskedImageDict 7 dict def
MaskedImageDict begin/ImageType 3 def/InterleaveType 3 def/MaskDict
ImageMaskDict def/DataDict ImageDataDict def end MaskedImageDict image $SDF
{$dsf $dsa $dsp @ss}if @gr $ctm setmatrix}bd/@SetMask{/$mbts xd/$mhei xd/$mwid
xd/ImageMaskDict 8 dict def ImageMaskDict begin/ImageType 1 def/Width $mwid def
/Height $mhei abs def/BitsPerComponent $mbts def/DataSource maskstream def
/ImageMatrix[$mwid 0 0 $mhei neg 0 $mhei 0 gt{$mhei}{0}ifelse]def/Decode[1 0]
def end}bd/@daq{dup type/arraytype eq{{}forall}if}bd/@BMP{/@cc xd UseLevel 3 eq
MaskedImage true eq and{7 -2 roll pop pop @I_3}{12 index 1 gt UseLevel 2 eq
UseLevel 3 eq or and{7 -2 roll pop pop @I_2}{11 index 1 eq{12 -1 roll pop @i}{
7 -2 roll pop pop @I}ifelse}ifelse}ifelse}bd
% Copyright (c)1992-2002 Corel Corporation
% All rights reserved.     v11.0 r0.0
/@p{/$fil 1 def 1 eq dup/$vectpat xd{/$pfrg true def}{@gs $t $c $m $y $k $n $o
@scc_5/$pfrg xd @gr}ifelse/$pm xd/$psy xd/$psx xd/$pyf xd/$pxf xd/$pn xd}bd
/CorelPtrnDoFill{@gs $ctm setmatrix $pm concat CorelPtrnSetBBox wclip @sv Bburx
Bbury $pm itransform/$tury xd/$turx xd Bbllx Bblly $pm itransform/$tlly xd
/$tllx xd newpath $tllx $tlly m $tllx $tury l $turx $tury l $turx $tlly l $tllx
$tlly m @cp pathbbox @rs/$tury xd/$turx xd/$tlly xd/$tllx xd/$wid $turx $tllx
sub def/$hei $tury $tlly sub def @gs $vectpat{1 0 0 0 0 _ $o @scc_5{wfill}if}{
$t $c $m $y $k $n $o @scc_5{SepMode_5 0 eq $pfrg or{$tllx $tlly Tl $wid $hei
scale <00> 8 1 false[8 0 0 1 0 0]{}imagemask}{/$bkg true def}ifelse}if}ifelse
@gr $wid 0 gt $hei 0 gt and{$pn cvlit load aload pop/$pd xd 3 -1 roll sub
/$phei xd exch sub/$pwid xd $wid $pwid div ceiling 1 add/$tlx xd $hei $phei div
ceiling 1 add/$tly xd currentdict/CorelPtrnL2Pattern known $psy 0 eq and $psx 0
eq and{CorelPtrnL2Pattern}{$psx 0 eq{CorelPtrnTileVeritcal}{CorelPtrnTileHoriz
}ifelse}ifelse}if @gr @np/$bkg false def}bd/CorelPtrnSetBBox{pathbbox/$ury xd
/$urx xd/$lly xd/$llx xd}bd/CorelPtrnSetFirstTile{$tllx $pxf add dup $tllx gt
{$pwid sub}if/$tx xd $tury $pyf sub dup $tury lt{$phei add}if/$ty xd}bd/p{/$pm
xd 7 rp/$pyf xd/$pxf xd/$pn xd/$fil 1 def}bd/CorelPtrnDraw{@ep}bd
/CorelPtrnPutTile{@sv/$in true def 2 copy dup $lly le{/$in false def}if $phei
sub $ury ge{/$in false def}if dup $urx ge{/$in false def}if $pwid add $llx le{
/$in false def}if $in{@np 2 copy m $pwid 0 rl 0 $phei neg rl $pwid neg 0 rl 0
$phei rl clip @np $pn cvlit load aload pop 7 -1 roll 5 index sub 7 -1 roll 3
index sub Tl matrix currentmatrix/$ctm xd CorelPtrnDraw pop pop pop pop}{pop
pop}ifelse @rs}bd/CorelPtrnTileHoriz{CorelPtrnSetFirstTile 0 1 $tly 1 sub{dup
$psx mul $tx add{dup $llx gt{$pwid sub}{exit}ifelse}loop exch $phei mul $ty
exch sub 0 1 $tlx 1 sub{$pwid mul 3 copy 3 -1 roll add exch CorelPtrnPutTile
pop}for pop pop}for}bd/CorelPtrnTileVeritcal{CorelPtrnSetFirstTile 0 1 $tlx 1
sub{dup $pwid mul $tx add exch $psy mul $ty exch sub{dup $ury lt{$phei add}
{exit}ifelse}loop 0 1 $tly 1 sub{$phei mul 3 copy sub CorelPtrnPutTile pop}for
pop pop}for}bd L2? UseLevel 2 ge and{/CorelPtrnL2Pattern{@sv[$pn cvlit load
aload pop pop]$pwid $phei $pn cvlit load aload pop pop pop pop pathbbox pop pop
2 index sub exch 3 index sub 4 -2 roll pop pop exch matrix identmatrix
translate/PatternMatrix xd/PatternYStep xd/PatternXStep xd/PatternBBox xd
currentdict/PatternMainDict xd <</PaintType 1/PatternType 1/TilingType 1/BBox
PatternBBox/XStep PatternXStep/YStep PatternYStep/PaintProc{begin
PatternMainDict begin $ctm currentmatrix pop 0 CorelPtrnDraw end end}bind >>
PatternMatrix makepattern setpattern fill @rs}def}if
end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel11Dict begin
@BeginSysCorelDict
2.6131 setmiterlimit
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
210.42397 555.82668 290.61184 623.58860 @E
 0 O 0 @g
0.00 0.00 0.00 0.90 k
0 J 0 j [] 0 d 0 R 0 @G
0.00 0.00 0.00 1.00 K
0 0.21600 0.21600 0.00000 @w
/$fm 0 def
290.61184 582.46668 m
290.61184 581.98989 290.40321 581.75150 289.98624 581.75150 c
289.62850 581.75150 288.49606 582.34734 286.58920 583.53931 c
286.11213 583.77770 285.45676 584.07562 284.62252 584.43335 C
284.62252 584.01609 284.68205 583.39020 284.80110 582.55597 c
284.92044 581.72173 284.97997 581.09584 284.97997 580.67858 c
284.97997 577.16249 284.47342 575.40416 283.46031 575.40416 c
282.74513 575.40416 282.38769 575.79165 282.38769 576.56636 c
282.32787 577.63928 282.08948 578.68214 281.67250 579.69524 C
279.82488 572.66277 276.07011 566.92658 270.40847 562.48668 c
264.74655 558.04649 258.28044 555.82668 251.00957 555.82668 c
243.20239 555.82668 236.33376 558.35943 230.40397 563.42523 c
224.47389 568.49102 220.94277 574.89761 219.81061 582.64526 C
219.54246 582.73483 l
219.00586 583.03276 218.73770 583.42025 218.73770 583.89676 c
218.73770 584.37354 219.00586 584.70151 219.54246 584.88009 C
219.54246 584.96967 L
219.00586 584.96967 l
218.11209 584.96967 217.18800 585.11877 216.23471 585.41669 C
216.11537 585.11877 215.69839 584.96967 214.98321 584.96967 c
214.02964 584.96967 213.07606 585.17830 212.12249 585.59528 c
210.99005 586.13187 210.42397 586.81729 210.42397 587.65153 c
210.42397 589.02208 210.87099 589.70750 211.76504 589.70750 c
212.18202 589.70750 212.80762 589.64797 213.64214 589.52891 c
214.47638 589.40957 215.10227 589.35005 215.51953 589.35005 c
216.05584 589.35005 L
216.05584 589.52891 l
216.05584 590.18428 217.27757 592.09143 219.72104 595.25008 C
218.76746 595.07121 217.69483 594.98192 216.50287 594.98192 c
215.78769 594.98192 214.74482 595.16079 213.37398 595.51824 c
212.65880 595.69710 212.30135 596.05483 212.30135 596.59115 c
212.30135 597.12746 212.65880 597.48491 213.37398 597.66378 c
216.47310 598.49802 219.15496 600.73313 221.41956 604.36857 c
222.67106 606.51411 224.57820 609.70252 227.14101 613.93380 c
229.34608 617.33083 232.26633 619.35732 235.90176 620.01269 C
235.12706 620.25109 234.29254 620.37043 233.39877 620.37043 c
233.21991 620.37043 L
232.32586 619.89364 231.78954 619.65524 231.61068 619.65524 c
231.01483 619.65524 230.71691 619.98293 230.71691 620.63858 c
230.71691 621.94961 231.61068 622.60526 233.39877 622.60526 c
234.02438 622.60526 L
234.68003 623.26063 235.93153 623.58860 237.77915 623.58860 c
239.20951 623.58860 241.36980 623.15660 244.26028 622.29231 c
247.15077 621.42803 249.07266 620.99603 250.02624 620.99603 C
250.68189 621.35376 251.30750 621.62192 251.90362 621.80079 C
253.63191 622.99247 255.62835 623.58860 257.89323 623.58860 c
261.34951 623.58860 263.76321 622.75436 265.13405 621.08561 C
268.76948 620.01269 271.74954 617.59899 274.07367 613.84450 c
275.32517 611.57991 277.29213 608.27216 279.97398 603.92154 c
282.29811 600.34564 285.39723 598.22986 289.27106 597.57449 c
290.04576 597.45543 290.43326 597.09770 290.43326 596.50157 c
290.43326 595.96526 290.10529 595.60781 289.44992 595.42894 c
288.01956 595.01169 286.58920 594.80306 285.15883 594.80306 c
284.44365 594.80306 283.72847 594.89263 283.01329 595.07121 C
283.37102 593.70066 284.62252 591.79351 286.76806 589.35005 c
288.91332 586.90658 290.16510 584.85061 290.52255 583.18157 c
290.58208 582.94318 290.61184 582.70507 290.61184 582.46668 c
@c
277.82844 583.36044 m
277.17279 584.73128 276.09987 585.86372 274.60998 586.75748 C
274.07367 585.32712 272.94123 584.61194 271.21294 584.61194 c
270.67663 584.61194 269.84211 585.11877 268.70995 586.13187 c
267.57751 587.14498 266.98167 587.91969 266.92214 588.45600 c
266.86233 589.29024 267.24983 589.70750 268.08435 589.70750 c
268.26293 589.70750 268.48658 589.67773 268.75474 589.61820 c
269.02290 589.55868 269.24627 589.52891 269.42513 589.52891 c
270.08079 589.52891 270.40847 589.76731 270.40847 590.24409 c
270.40847 591.13786 269.12693 592.00214 266.56441 592.83638 c
265.37244 593.19411 264.38910 593.37269 263.61439 593.37269 c
262.42243 593.37269 260.67912 592.95572 258.38476 592.12120 c
256.09011 591.28696 254.31732 590.86970 253.06583 590.86970 c
252.70809 590.86970 L
253.87030 589.43934 l
254.40661 588.78397 254.67477 588.30690 254.67477 588.00898 c
254.67477 587.11521 254.16822 586.81729 253.15512 587.11521 c
250.47326 587.88992 248.44677 589.35005 247.07622 591.49559 C
243.14287 589.88636 240.28214 589.08189 238.49433 589.08189 c
237.71934 589.08189 236.94463 589.23099 236.16992 589.52891 c
235.15654 589.94617 234.65027 590.48249 234.65027 591.13786 c
234.65027 591.67417 235.06724 591.94261 235.90176 591.94261 c
238.64315 591.94261 240.01398 592.64277 240.01398 594.04337 c
240.01398 595.32463 239.17946 595.96526 237.51099 595.96526 c
236.02082 595.96526 234.85861 595.23506 234.02438 593.76019 c
233.18986 592.28504 232.77288 590.78041 232.77288 589.21597 c
232.77288 588.12831 232.98151 587.20450 233.39877 586.42980 C
234.70980 585.28261 235.36545 584.50762 235.36545 584.07562 c
235.36545 583.42025 235.00772 583.09228 234.29254 583.09228 c
233.39877 583.09228 232.50472 583.73291 231.61068 585.02920 c
230.00173 586.56387 228.86929 587.90466 228.21364 589.08189 C
227.26006 586.87682 226.03833 584.32904 224.54844 581.42353 C
225.97880 575.24031 229.15247 570.17452 234.06917 566.22614 c
238.98586 562.27805 244.63276 560.29635 251.00957 560.29635 c
256.43282 560.29635 261.39430 561.77150 265.89402 564.72151 c
270.39345 567.67153 273.71622 571.64967 275.86176 576.65594 C
275.80195 576.77499 275.77219 576.89433 275.77219 577.01339 c
275.77219 577.49017 276.12992 578.26488 276.84510 579.33780 C
277.26208 580.64882 277.59005 581.98989 277.82844 583.36044 C
@c
265.40249 581.39376 m
265.40249 579.84435 264.85115 578.53304 263.74847 577.46041 c
262.64580 576.38750 261.32003 575.85118 259.77033 575.85118 c
257.62479 575.85118 256.01584 576.77499 254.94293 578.62261 C
259.77033 581.39376 L
254.94293 584.16520 L
256.01584 586.07206 257.62479 587.02564 259.77033 587.02564 c
261.32003 587.02564 262.64580 586.47430 263.74847 585.37191 c
264.85115 584.26951 265.40249 582.94318 265.40249 581.39376 c
@c
252.26107 581.39376 m
252.26107 579.84435 251.70973 578.53304 250.60734 577.46041 c
249.50466 576.38750 248.17861 575.85118 246.62920 575.85118 c
244.48365 575.85118 242.87471 576.77499 241.80180 578.62261 C
246.62920 581.39376 L
241.80180 584.16520 L
242.87471 586.07206 244.48365 587.02564 246.62920 587.02564 c
248.17861 587.02564 249.50466 586.47430 250.60734 585.37191 c
251.70973 584.26951 252.26107 582.94318 252.26107 581.39376 c
@c
260.66438 572.54372 m
260.66438 570.45770 259.91943 568.66989 258.42954 567.18000 c
256.93937 565.68983 255.15156 564.94488 253.06583 564.94488 c
250.97981 564.94488 249.19172 565.68983 247.70211 567.18000 c
246.21194 568.66989 245.46699 570.45770 245.46699 572.54372 C
260.66438 572.54372 L
@c
B

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel11Dict 11.0 0
%%EOF

%%EndDocument
 @endspecial 422 4717 a Fa(A)m(utor)i(C)e Fm(Biographie)j(Autor)d(C.)
-262 6043 y Fs(2)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
